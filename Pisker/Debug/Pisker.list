
Pisker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e188  0800dbb8  0800dbb8  0001dbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bd40  0802bd40  00040068  2**0
                  CONTENTS
  4 .ARM          00000008  0802bd40  0802bd40  0003bd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bd48  0802bd48  00040068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bd48  0802bd48  0003bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802bd4c  0802bd4c  0003bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0802bd50  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c6f8  20000068  0802bdb8  00040068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c760  0802bdb8  0004c760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040068  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000264e8  00000000  00000000  00040154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005556  00000000  00000000  0006663c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0006bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cf  00000000  00000000  0006d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb9b  00000000  00000000  0006e3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028a84  00000000  00000000  0008cf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a29a5  00000000  00000000  000b59c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000619c  00000000  00000000  0015836c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000391c  00000000  00000000  0015e56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001b0  00000000  00000000  00161e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dba0 	.word	0x0800dba0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800dba0 	.word	0x0800dba0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <bsp_adc_init>:
 * @param  hadc: Pointer to ADC handle.
 * @param  hdma: Pointer to DMA handle.
 * @retval Result of the initialization.
 */
uint8_t bsp_adc_init(ADC_HandleTypeDef *hadc, DMA_HandleTypeDef *hdma)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    if (hadc == NULL || hdma == NULL)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <bsp_adc_init+0x16>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d101      	bne.n	80005a6 <bsp_adc_init+0x1a>
    {
        return BSP_ADC_ERROR;
 80005a2:	2302      	movs	r3, #2
 80005a4:	e006      	b.n	80005b4 <bsp_adc_init+0x28>
    }
    _hadc = hadc;
 80005a6:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <bsp_adc_init+0x34>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6013      	str	r3, [r2, #0]
    _hdma = hdma;
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <bsp_adc_init+0x38>)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	6013      	str	r3, [r2, #0]

    return BSP_ADC_SUCCESS;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000084 	.word	0x20000084
 80005c4:	20000088 	.word	0x20000088

080005c8 <bsp_adc_start>:
 * @param  adc_buffer: Pointer to buffer where ADC values will be stored.
 * @param  length: Number of ADC samples to be read.
 * @retval Result of the start operation.
 */
uint8_t bsp_adc_start(uint16_t* buffer, uint32_t length)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
    adc_buffer = buffer;
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <bsp_adc_start+0x3c>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
    adc_length = length;
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <bsp_adc_start+0x40>)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	6013      	str	r3, [r2, #0]

    // Start ADC DMA
    if (HAL_ADC_Start_DMA(_hadc, (uint32_t*)adc_buffer, adc_length) != HAL_OK)
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <bsp_adc_start+0x44>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <bsp_adc_start+0x3c>)
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <bsp_adc_start+0x40>)
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fda6 	bl	800413c <HAL_ADC_Start_DMA>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <bsp_adc_start+0x32>
    {
        return BSP_ADC_ERROR;
 80005f6:	2302      	movs	r3, #2
 80005f8:	e000      	b.n	80005fc <bsp_adc_start+0x34>
    }

    return BSP_ADC_SUCCESS;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000008c 	.word	0x2000008c
 8000608:	20000090 	.word	0x20000090
 800060c:	20000084 	.word	0x20000084

08000610 <bsp_button_init>:
static bsp_btn_manage_t bsp_btn_info;
/* Private function prototypes ---------------------------------------- */
void bsp_reset_info(void);
/* Function definitions ----------------------------------------------- */
bool bsp_button_init(button_t *button)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  button->gpio_pin = BTN_PIN;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2201      	movs	r2, #1
 800061c:	811a      	strh	r2, [r3, #8]
  button->gpio_port = BTN_PORT;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <bsp_button_init+0x40>)
 8000622:	605a      	str	r2, [r3, #4]
  button->state = BTN_STATE_RELEASE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2210      	movs	r2, #16
 8000628:	701a      	strb	r2, [r3, #0]
  bsp_btn_info.btn_logic = 0;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <bsp_button_init+0x44>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
  bsp_btn_info.btn_pre_logic = 0;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <bsp_button_init+0x44>)
 8000632:	2200      	movs	r2, #0
 8000634:	705a      	strb	r2, [r3, #1]
  bsp_btn_info.btn_timeup = 0;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <bsp_button_init+0x44>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  bsp_btn_info.btn_timedown = 0;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <bsp_button_init+0x44>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  return true;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40020000 	.word	0x40020000
 8000654:	20000094 	.word	0x20000094

08000658 <bsp_btn_check_state_one_button>:
btn_event_t bsp_btn_check_state_one_button(button_t *button)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  btn_event_t event = BTN_EVENT_RELEASE;
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	73fb      	strb	r3, [r7, #15]
  uint32_t now = HAL_GetTick();
 8000664:	f003 fcf6 	bl	8004054 <HAL_GetTick>
 8000668:	60b8      	str	r0, [r7, #8]
  // Check change
  if (bsp_btn_info.btn_logic != HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin))
 800066a:	4b9e      	ldr	r3, [pc, #632]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800066c:	781c      	ldrb	r4, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	891b      	ldrh	r3, [r3, #8]
 8000676:	4619      	mov	r1, r3
 8000678:	4610      	mov	r0, r2
 800067a:	f004 ffc3 	bl	8005604 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	429c      	cmp	r4, r3
 8000682:	d01c      	beq.n	80006be <bsp_btn_check_state_one_button+0x66>
  {
    bsp_btn_info.btn_pre_logic = bsp_btn_info.btn_logic;
 8000684:	4b97      	ldr	r3, [pc, #604]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	4b96      	ldr	r3, [pc, #600]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800068a:	705a      	strb	r2, [r3, #1]
    bsp_btn_info.btn_logic = !bsp_btn_info.btn_logic;
 800068c:	4b95      	ldr	r3, [pc, #596]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	4b91      	ldr	r3, [pc, #580]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800069e:	701a      	strb	r2, [r3, #0]
    switch (bsp_btn_info.btn_logic)
 80006a0:	4b90      	ldr	r3, [pc, #576]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <bsp_btn_check_state_one_button+0x56>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d004      	beq.n	80006b6 <bsp_btn_check_state_one_button+0x5e>
    {
      bsp_btn_info.btn_timeup = now;
    }
    break;
    default:
      break;
 80006ac:	e007      	b.n	80006be <bsp_btn_check_state_one_button+0x66>
      bsp_btn_info.btn_timedown = now;
 80006ae:	4a8d      	ldr	r2, [pc, #564]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	6093      	str	r3, [r2, #8]
    break;
 80006b4:	e003      	b.n	80006be <bsp_btn_check_state_one_button+0x66>
      bsp_btn_info.btn_timeup = now;
 80006b6:	4a8b      	ldr	r2, [pc, #556]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	6053      	str	r3, [r2, #4]
    break;
 80006bc:	bf00      	nop
    }
  }
  switch (button->state)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b10      	subs	r3, #16
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	f200 80fc 	bhi.w	80008c2 <bsp_btn_check_state_one_button+0x26a>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <bsp_btn_check_state_one_button+0x78>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	0800077b 	.word	0x0800077b
 80006d8:	080007d1 	.word	0x080007d1
 80006dc:	080008ab 	.word	0x080008ab
 80006e0:	08000885 	.word	0x08000885
  {
  case BTN_STATE_RELEASE:
  {
    if (bsp_btn_info.btn_logic == bsp_btn_info.btn_pre_logic)
 80006e4:	4b7f      	ldr	r3, [pc, #508]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d105      	bne.n	80006fc <bsp_btn_check_state_one_button+0xa4>
    {
      button->state = BTN_STATE_RELEASE;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2210      	movs	r2, #16
 80006f4:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 80006f6:	23a0      	movs	r3, #160	; 0xa0
 80006f8:	73fb      	strb	r3, [r7, #15]
    else if ((bsp_btn_info.btn_logic) && (now - bsp_btn_info.btn_timeup > LONG_MILIS_MIN))
    {
      button->state = BTN_STATE_HOLDING;
      event = BTN_EVENT_HOLD;
    }
    break;
 80006fa:	e0e4      	b.n	80008c6 <bsp_btn_check_state_one_button+0x26e>
    else if ((bsp_btn_info.btn_pre_logic) && (bsp_btn_info.btn_timedown - bsp_btn_info.btn_timeup < DEBOUNCE_MILIS))
 80006fc:	4b79      	ldr	r3, [pc, #484]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00c      	beq.n	800071e <bsp_btn_check_state_one_button+0xc6>
 8000704:	4b77      	ldr	r3, [pc, #476]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	4b76      	ldr	r3, [pc, #472]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	2b1d      	cmp	r3, #29
 8000710:	d805      	bhi.n	800071e <bsp_btn_check_state_one_button+0xc6>
      button->state = BTN_STATE_RELEASE;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2210      	movs	r2, #16
 8000716:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 8000718:	23a0      	movs	r3, #160	; 0xa0
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	e02c      	b.n	8000778 <bsp_btn_check_state_one_button+0x120>
    else if ((bsp_btn_info.btn_pre_logic) && (bsp_btn_info.btn_timedown - bsp_btn_info.btn_timeup > DEBOUNCE_MILIS) && (bsp_btn_info.btn_timedown - bsp_btn_info.btn_timeup < SINGLE_CLICK_MAX))
 800071e:	4b71      	ldr	r3, [pc, #452]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d014      	beq.n	8000750 <bsp_btn_check_state_one_button+0xf8>
 8000726:	4b6f      	ldr	r3, [pc, #444]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	4b6e      	ldr	r3, [pc, #440]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	2b1e      	cmp	r3, #30
 8000732:	d90d      	bls.n	8000750 <bsp_btn_check_state_one_button+0xf8>
 8000734:	4b6b      	ldr	r3, [pc, #428]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	4b6a      	ldr	r3, [pc, #424]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000742:	d205      	bcs.n	8000750 <bsp_btn_check_state_one_button+0xf8>
      button->state = BTN_STATE_PRESSED;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2211      	movs	r2, #17
 8000748:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 800074a:	23a0      	movs	r3, #160	; 0xa0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e013      	b.n	8000778 <bsp_btn_check_state_one_button+0x120>
    else if ((bsp_btn_info.btn_logic) && (now - bsp_btn_info.btn_timeup > LONG_MILIS_MIN))
 8000750:	4b64      	ldr	r3, [pc, #400]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	f000 80b6 	beq.w	80008c6 <bsp_btn_check_state_one_button+0x26e>
 800075a:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000766:	4293      	cmp	r3, r2
 8000768:	f240 80ad 	bls.w	80008c6 <bsp_btn_check_state_one_button+0x26e>
      button->state = BTN_STATE_HOLDING;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2213      	movs	r2, #19
 8000770:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_HOLD;
 8000772:	23a2      	movs	r3, #162	; 0xa2
 8000774:	73fb      	strb	r3, [r7, #15]
    break;
 8000776:	e0a6      	b.n	80008c6 <bsp_btn_check_state_one_button+0x26e>
 8000778:	e0a5      	b.n	80008c6 <bsp_btn_check_state_one_button+0x26e>
  }
  case BTN_STATE_PRESSED:
  {
    if ((!bsp_btn_info.btn_logic) && (now - bsp_btn_info.btn_timedown > DOUBLE_GAP_MILIS_MAX))
 800077a:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10e      	bne.n	80007a0 <bsp_btn_check_state_one_button+0x148>
 8000782:	4b58      	ldr	r3, [pc, #352]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800078e:	d907      	bls.n	80007a0 <bsp_btn_check_state_one_button+0x148>
    {
      button->state = BTN_STATE_RELEASE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2210      	movs	r2, #16
 8000794:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_SINGLE_CLICK;
 8000796:	23a1      	movs	r3, #161	; 0xa1
 8000798:	73fb      	strb	r3, [r7, #15]
      bsp_reset_info();
 800079a:	f000 f8a5 	bl	80008e8 <bsp_reset_info>
      event = BTN_EVENT_RELEASE;
      // save pre_timedown
      bsp_btn_info.btn_pretimedown = bsp_btn_info.btn_timedown;
    }
  }
  break;
 800079e:	e094      	b.n	80008ca <bsp_btn_check_state_one_button+0x272>
    else if ((!bsp_btn_info.btn_pre_logic) && (bsp_btn_info.btn_timeup - bsp_btn_info.btn_timedown <= DOUBLE_GAP_MILIS_MAX))
 80007a0:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f040 8090 	bne.w	80008ca <bsp_btn_check_state_one_button+0x272>
 80007aa:	4b4e      	ldr	r3, [pc, #312]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	4b4d      	ldr	r3, [pc, #308]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007b8:	f200 8087 	bhi.w	80008ca <bsp_btn_check_state_one_button+0x272>
      button->state = BTN_STATE_MAYBE_2_CLICK;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2212      	movs	r2, #18
 80007c0:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 80007c2:	23a0      	movs	r3, #160	; 0xa0
 80007c4:	73fb      	strb	r3, [r7, #15]
      bsp_btn_info.btn_pretimedown = bsp_btn_info.btn_timedown;
 80007c6:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	4a46      	ldr	r2, [pc, #280]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007cc:	60d3      	str	r3, [r2, #12]
  break;
 80007ce:	e07c      	b.n	80008ca <bsp_btn_check_state_one_button+0x272>
  case BTN_STATE_MAYBE_2_CLICK: // Code here
  {
    if ((bsp_btn_info.btn_pre_logic) && (bsp_btn_info.btn_timedown - bsp_btn_info.btn_timeup <= DEBOUNCE_MILIS))
 80007d0:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d018      	beq.n	800080a <bsp_btn_check_state_one_button+0x1b2>
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b1e      	cmp	r3, #30
 80007e4:	d811      	bhi.n	800080a <bsp_btn_check_state_one_button+0x1b2>
    {
      button->state = BTN_STATE_MAYBE_2_CLICK;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2212      	movs	r2, #18
 80007ea:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	73fb      	strb	r3, [r7, #15]
      // reset half btn_info
      bsp_btn_info.btn_logic = 0;
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
      bsp_btn_info.btn_pre_logic = 0;
 80007f6:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	705a      	strb	r2, [r3, #1]
      bsp_btn_info.btn_timedown = 0;
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
      bsp_btn_info.btn_timeup = 0;
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	e029      	b.n	800085e <bsp_btn_check_state_one_button+0x206>
    }
    else if ((bsp_btn_info.btn_pre_logic) && (bsp_btn_info.btn_timedown - bsp_btn_info.btn_timeup > DEBOUNCE_MILIS) && (bsp_btn_info.btn_timedown - bsp_btn_info.btn_timeup < SINGLE_CLICK_MAX))
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d014      	beq.n	800083c <bsp_btn_check_state_one_button+0x1e4>
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	2b1e      	cmp	r3, #30
 800081e:	d90d      	bls.n	800083c <bsp_btn_check_state_one_button+0x1e4>
 8000820:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800082e:	d205      	bcs.n	800083c <bsp_btn_check_state_one_button+0x1e4>
    {
      button->state = BTN_STATE_2_CLICK;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2214      	movs	r2, #20
 8000834:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e010      	b.n	800085e <bsp_btn_check_state_one_button+0x206>
    }
    else if ((bsp_btn_info.btn_logic) && (now - bsp_btn_info.btn_timeup > LONG_MILIS_MIN))
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00c      	beq.n	800085e <bsp_btn_check_state_one_button+0x206>
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000850:	4293      	cmp	r3, r2
 8000852:	d904      	bls.n	800085e <bsp_btn_check_state_one_button+0x206>
    {
      button->state = BTN_STATE_HOLDING;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2213      	movs	r2, #19
 8000858:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_HOLD;
 800085a:	23a2      	movs	r3, #162	; 0xa2
 800085c:	73fb      	strb	r3, [r7, #15]
    }
    if ((!bsp_btn_info.btn_logic) && (now - bsp_btn_info.btn_pretimedown >= DOUBLE_GAP_MILIS_MAX))
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d133      	bne.n	80008ce <bsp_btn_check_state_one_button+0x276>
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000872:	d32c      	bcc.n	80008ce <bsp_btn_check_state_one_button+0x276>
    {
      button->state = BTN_STATE_RELEASE;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2210      	movs	r2, #16
 8000878:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_SINGLE_CLICK;
 800087a:	23a1      	movs	r3, #161	; 0xa1
 800087c:	73fb      	strb	r3, [r7, #15]
      bsp_reset_info();
 800087e:	f000 f833 	bl	80008e8 <bsp_reset_info>
    }
    break;
 8000882:	e024      	b.n	80008ce <bsp_btn_check_state_one_button+0x276>
  }
  case BTN_STATE_2_CLICK:
  {
    if ((!bsp_btn_info.btn_logic) && (now - bsp_btn_info.btn_timedown) > DOUBLE_GAP_MILIS_MAX)
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d122      	bne.n	80008d2 <bsp_btn_check_state_one_button+0x27a>
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000898:	d91b      	bls.n	80008d2 <bsp_btn_check_state_one_button+0x27a>
    {
      button->state = BTN_STATE_RELEASE;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2210      	movs	r2, #16
 800089e:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_DOUBLE_CLICK;
 80008a0:	23a3      	movs	r3, #163	; 0xa3
 80008a2:	73fb      	strb	r3, [r7, #15]
      bsp_reset_info();
 80008a4:	f000 f820 	bl	80008e8 <bsp_reset_info>
    }
    break;
 80008a8:	e013      	b.n	80008d2 <bsp_btn_check_state_one_button+0x27a>
  }
  case BTN_STATE_HOLDING:
  {
    if ((!bsp_btn_info.btn_logic))
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <bsp_btn_check_state_one_button+0x28c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d111      	bne.n	80008d6 <bsp_btn_check_state_one_button+0x27e>
    {
      button->state = BTN_STATE_RELEASE;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2210      	movs	r2, #16
 80008b6:	701a      	strb	r2, [r3, #0]
      event = BTN_EVENT_RELEASE;
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	73fb      	strb	r3, [r7, #15]
      bsp_reset_info();
 80008bc:	f000 f814 	bl	80008e8 <bsp_reset_info>
    }
    break;
 80008c0:	e009      	b.n	80008d6 <bsp_btn_check_state_one_button+0x27e>
  }
  default:
    break;
 80008c2:	bf00      	nop
 80008c4:	e008      	b.n	80008d8 <bsp_btn_check_state_one_button+0x280>
    break;
 80008c6:	bf00      	nop
 80008c8:	e006      	b.n	80008d8 <bsp_btn_check_state_one_button+0x280>
  break;
 80008ca:	bf00      	nop
 80008cc:	e004      	b.n	80008d8 <bsp_btn_check_state_one_button+0x280>
    break;
 80008ce:	bf00      	nop
 80008d0:	e002      	b.n	80008d8 <bsp_btn_check_state_one_button+0x280>
    break;
 80008d2:	bf00      	nop
 80008d4:	e000      	b.n	80008d8 <bsp_btn_check_state_one_button+0x280>
    break;
 80008d6:	bf00      	nop
  }
  return event;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000094 	.word	0x20000094

080008e8 <bsp_reset_info>:
void bsp_reset_info(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  bsp_btn_info.btn_logic = 0;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <bsp_reset_info+0x2c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
  bsp_btn_info.btn_pre_logic = 0;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <bsp_reset_info+0x2c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	705a      	strb	r2, [r3, #1]
  bsp_btn_info.btn_timeup = 0;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <bsp_reset_info+0x2c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  bsp_btn_info.btn_timedown = 0;
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <bsp_reset_info+0x2c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  bsp_btn_info.btn_pretimedown = 0;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <bsp_reset_info+0x2c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000094 	.word	0x20000094

08000918 <bsp_i2c_init>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

bsp_i2c_status_t bsp_i2c_init(I2C_HandleTypeDef *hi2c)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    bi2c_data.bsp_hi2c = hi2c;
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <bsp_i2c_init+0x1c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
    return BSP_I2C_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	200000a4 	.word	0x200000a4

08000938 <bsp_i2c_write_buffer>:
{
  return bi2c_data.bsp_hi2c;
}

bsp_i2c_status_t bsp_i2c_write_buffer(uint8_t DEV_ADDR, uint8_t sizebuf)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af02      	add	r7, sp, #8
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
    d_rtc_t *rtc = drv_rtc_get_rtc_ds1307();
 8000948:	f002 fd26 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 800094c:	6138      	str	r0, [r7, #16]
    HAL_StatusTypeDef hal_status;
    uint32_t retry_count = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
    const uint32_t max_retries = 3;
 8000952:	2303      	movs	r3, #3
 8000954:	60fb      	str	r3, [r7, #12]
    do
    {
     	hal_status = HAL_I2C_Master_Transmit(bi2c_data.bsp_hi2c, (uint16_t)DEV_ADDR, (uint8_t*)&rtc->i2c_buf, (uint16_t)sizebuf, HAL_TIMEOUT);
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <bsp_i2c_write_buffer+0x78>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	b299      	uxth	r1, r3
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1dda      	adds	r2, r3, #7
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	b29b      	uxth	r3, r3
 8000966:	2403      	movs	r4, #3
 8000968:	9400      	str	r4, [sp, #0]
 800096a:	f004 ffd7 	bl	800591c <HAL_I2C_Master_Transmit>
 800096e:	4603      	mov	r3, r0
 8000970:	72fb      	strb	r3, [r7, #11]
     	if (hal_status == HAL_OK)
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <bsp_i2c_write_buffer+0x44>
     	{
     	  return BSP_I2C_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	e014      	b.n	80009a6 <bsp_i2c_write_buffer+0x6e>
     	}
     	retry_count++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
    }
    while (hal_status != HAL_OK && retry_count < max_retries);
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d003      	beq.n	8000990 <bsp_i2c_write_buffer+0x58>
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3e2      	bcc.n	8000956 <bsp_i2c_write_buffer+0x1e>
    if (HAL_I2C_GetError(bi2c_data.bsp_hi2c) != BSP_I2C_ERROR_ACK_FAILURE)
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <bsp_i2c_write_buffer+0x78>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fd4b 	bl	8006430 <HAL_I2C_GetError>
 800099a:	4603      	mov	r3, r0
 800099c:	2b02      	cmp	r3, #2
 800099e:	d001      	beq.n	80009a4 <bsp_i2c_write_buffer+0x6c>
    {
      return BSP_I2C_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <bsp_i2c_write_buffer+0x6e>
    }

    // If we've reached here, it means we've had repeated AF errors
    return BSP_I2C_ERROR_ACK_FAILURE;
 80009a4:	2302      	movs	r3, #2
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	371c      	adds	r7, #28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000a4 	.word	0x200000a4

080009b4 <bsp_i2c_read_buffer>:

bsp_i2c_status_t bsp_i2c_read_buffer(uint8_t DEV_ADDR, uint8_t sizebuf)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
    d_rtc_t *rtc = drv_rtc_get_rtc_ds1307();
 80009c4:	f002 fce8 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 80009c8:	6138      	str	r0, [r7, #16]
    HAL_StatusTypeDef hal_status;
    uint32_t retry_count = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
    const uint32_t max_retries = 3;
 80009ce:	2303      	movs	r3, #3
 80009d0:	60fb      	str	r3, [r7, #12]

    do
    {
        hal_status = HAL_I2C_Master_Receive(bi2c_data.bsp_hi2c, (uint16_t)DEV_ADDR, (uint8_t*)&rtc->i2c_buf, (uint16_t)sizebuf, HAL_TIMEOUT);
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <bsp_i2c_read_buffer+0x78>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	b299      	uxth	r1, r3
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	1dda      	adds	r2, r3, #7
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	2403      	movs	r4, #3
 80009e4:	9400      	str	r4, [sp, #0]
 80009e6:	f005 f897 	bl	8005b18 <HAL_I2C_Master_Receive>
 80009ea:	4603      	mov	r3, r0
 80009ec:	72fb      	strb	r3, [r7, #11]
        if (hal_status == HAL_OK) {
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <bsp_i2c_read_buffer+0x44>
            return BSP_I2C_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e014      	b.n	8000a22 <bsp_i2c_read_buffer+0x6e>
        }
        retry_count++;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
    } while (hal_status != HAL_OK && retry_count < max_retries);
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <bsp_i2c_read_buffer+0x58>
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3e2      	bcc.n	80009d2 <bsp_i2c_read_buffer+0x1e>

    if (HAL_I2C_GetError(bi2c_data.bsp_hi2c) != BSP_I2C_ERROR_ACK_FAILURE) {
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <bsp_i2c_read_buffer+0x78>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 fd0d 	bl	8006430 <HAL_I2C_GetError>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d001      	beq.n	8000a20 <bsp_i2c_read_buffer+0x6c>
        // Serious error occurred
        return BSP_I2C_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <bsp_i2c_read_buffer+0x6e>
    }

    // If we've reached here, it means we've had repeated AF errors
    return BSP_I2C_ERROR_ACK_FAILURE;
 8000a20:	2302      	movs	r3, #2
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	371c      	adds	r7, #28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000a4 	.word	0x200000a4

08000a30 <bsp_uart_pc_control_init>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
bsp_uart_result_t bsp_uart_pc_control_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_usart_rx)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uart_pc_control_data.hdma_usart_rx = hdma_usart_rx;
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <bsp_uart_pc_control_init+0x48>)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	6053      	str	r3, [r2, #4]
  uart_pc_control_data.huart = huart;
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <bsp_uart_pc_control_init+0x48>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]

  uint8_t succes[] = SUCCESS_INIT;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <bsp_uart_pc_control_init+0x4c>)
 8000a48:	f107 040c 	add.w	r4, r7, #12
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a56:	c403      	stmia	r4!, {r0, r1}
 8000a58:	8022      	strh	r2, [r4, #0]
 8000a5a:	3402      	adds	r4, #2
 8000a5c:	0c13      	lsrs	r3, r2, #16
 8000a5e:	7023      	strb	r3, [r4, #0]
  bsp_uart_pc_control_send(succes, sizeof(succes));
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	211b      	movs	r1, #27
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f842 	bl	8000af0 <bsp_uart_pc_control_send>

  return BSP_UART_SUCCESS;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bdb0      	pop	{r4, r5, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000c0 	.word	0x200000c0
 8000a7c:	0800dbb8 	.word	0x0800dbb8

08000a80 <bsp_uart_pc_control_buffer_init>:

bsp_uart_result_t bsp_uart_pc_control_buffer_init(uint8_t *tx_buffer, uint8_t *rx_buffer, uint16_t buffer_size)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80fb      	strh	r3, [r7, #6]
  uart_pc_control_data.uart_tx_buffer = tx_buffer;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <bsp_uart_pc_control_buffer_init+0x38>)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6093      	str	r3, [r2, #8]
  uart_pc_control_data.uart_rx_buffer = rx_buffer;
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <bsp_uart_pc_control_buffer_init+0x38>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	60d3      	str	r3, [r2, #12]
  uart_pc_control_data.uart_tx_rx_buffer_size = buffer_size;
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <bsp_uart_pc_control_buffer_init+0x38>)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	8293      	strh	r3, [r2, #20]
  uart_pc_control_data.uart_main_buffer_size = buffer_size * 2;
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <bsp_uart_pc_control_buffer_init+0x38>)
 8000aa8:	82da      	strh	r2, [r3, #22]
  return BSP_UART_SUCCESS;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	200000c0 	.word	0x200000c0

08000abc <bsp_uart_start_pc_control_receive>:

bsp_uart_result_t bsp_uart_start_pc_control_receive(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(uart_pc_control_data.huart, uart_pc_control_data.uart_rx_buffer, RX_BUFFER_SIZE);
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <bsp_uart_start_pc_control_receive+0x30>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a09      	ldr	r2, [pc, #36]	; (8000aec <bsp_uart_start_pc_control_receive+0x30>)
 8000ac6:	68d1      	ldr	r1, [r2, #12]
 8000ac8:	2219      	movs	r2, #25
 8000aca:	4618      	mov	r0, r3
 8000acc:	f009 fa7d 	bl	8009fca <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(uart_pc_control_data.hdma_usart_rx, DMA_IT_HT);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <bsp_uart_start_pc_control_receive+0x30>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <bsp_uart_start_pc_control_receive+0x30>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0208 	bic.w	r2, r2, #8
 8000ae2:	601a      	str	r2, [r3, #0]
  return BSP_UART_SUCCESS;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000c0 	.word	0x200000c0

08000af0 <bsp_uart_pc_control_send>:

bsp_uart_result_t bsp_uart_pc_control_send(uint8_t *data, uint16_t size)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(uart_pc_control_data.huart, data, size, HAL_MAX_DELAY);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <bsp_uart_pc_control_send+0x28>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	887a      	ldrh	r2, [r7, #2]
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f009 f9d4 	bl	8009eb4 <HAL_UART_Transmit>
  return BSP_UART_SUCCESS;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000c0 	.word	0x200000c0

08000b1c <bsp_uart_pc_control_handle_it>:

bsp_uart_result_t bsp_uart_pc_control_handle_it(uint16_t Size)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  fsm_process_received_data(uart_pc_control_data.huart, uart_pc_control_data.uart_rx_buffer, RX_BUFFER_SIZE);
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <bsp_uart_pc_control_handle_it+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <bsp_uart_pc_control_handle_it+0x24>)
 8000b2c:	68d1      	ldr	r1, [r2, #12]
 8000b2e:	2219      	movs	r2, #25
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 f94f 	bl	8003dd4 <fsm_process_received_data>
  return BSP_UART_SUCCESS;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000c0 	.word	0x200000c0

08000b44 <bsp_uart_dfp_init>:

bsp_uart_result_t bsp_uart_dfp_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_usart_rx)
{
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uart_dfp_data.hdma_usart_rx = hdma_usart_rx;
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <bsp_uart_dfp_init+0x48>)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6053      	str	r3, [r2, #4]
  uart_dfp_data.huart = huart;
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <bsp_uart_dfp_init+0x48>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]

  uint8_t succes[] = SUCCESS_INIT;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <bsp_uart_dfp_init+0x4c>)
 8000b5c:	f107 040c 	add.w	r4, r7, #12
 8000b60:	461d      	mov	r5, r3
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6a:	c403      	stmia	r4!, {r0, r1}
 8000b6c:	8022      	strh	r2, [r4, #0]
 8000b6e:	3402      	adds	r4, #2
 8000b70:	0c13      	lsrs	r3, r2, #16
 8000b72:	7023      	strb	r3, [r4, #0]
  bsp_uart_dfp_send(succes, sizeof(succes));
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	211b      	movs	r1, #27
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f80a 	bl	8000b94 <bsp_uart_dfp_send>

  return BSP_UART_SUCCESS;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000a8 	.word	0x200000a8
 8000b90:	0800dbb8 	.word	0x0800dbb8

08000b94 <bsp_uart_dfp_send>:

bsp_uart_result_t bsp_uart_dfp_send(uint8_t *data, uint16_t size)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(uart_dfp_data.huart, data, size, HAL_MAX_DELAY);
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <bsp_uart_dfp_send+0x28>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	887a      	ldrh	r2, [r7, #2]
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f009 f982 	bl	8009eb4 <HAL_UART_Transmit>
  return BSP_UART_SUCCESS;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000a8 	.word	0x200000a8

08000bc0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f003 f9e0 	bl	8003f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f84a 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 fa6e 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd0:	f000 fa26 	bl	8001020 <MX_DMA_Init>
  MX_I2C1_Init();
 8000bd4:	f000 f8fe 	bl	8000dd4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000bd8:	f000 f976 	bl	8000ec8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000bdc:	f000 f9cc 	bl	8000f78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000be0:	f000 f8a6 	bl	8000d30 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000be4:	f000 f9f2 	bl	8000fcc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000be8:	f000 f922 	bl	8000e30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Init bsp
  bsp_adc_init(&hadc1, &hdma_adc1);
 8000bec:	4910      	ldr	r1, [pc, #64]	; (8000c30 <main+0x70>)
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <main+0x74>)
 8000bf0:	f7ff fccc 	bl	800058c <bsp_adc_init>
  bsp_i2c_init(&hi2c1);
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <main+0x78>)
 8000bf6:	f7ff fe8f 	bl	8000918 <bsp_i2c_init>
  bsp_tim_init(&htim4);
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <main+0x7c>)
 8000bfc:	f000 ffbe 	bl	8001b7c <bsp_tim_init>
  bsp_uart_pc_control_init(&huart2, &hdma_usart2_rx);
 8000c00:	490f      	ldr	r1, [pc, #60]	; (8000c40 <main+0x80>)
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <main+0x84>)
 8000c04:	f7ff ff14 	bl	8000a30 <bsp_uart_pc_control_init>
  bsp_uart_pc_control_buffer_init(uart_tx_buffer, uart_rx_buffer, RX_BUFFER_SIZE);
 8000c08:	2219      	movs	r2, #25
 8000c0a:	490f      	ldr	r1, [pc, #60]	; (8000c48 <main+0x88>)
 8000c0c:	480f      	ldr	r0, [pc, #60]	; (8000c4c <main+0x8c>)
 8000c0e:	f7ff ff37 	bl	8000a80 <bsp_uart_pc_control_buffer_init>
  bsp_uart_start_pc_control_receive();
 8000c12:	f7ff ff53 	bl	8000abc <bsp_uart_start_pc_control_receive>
  bsp_uart_dfp_init(&huart6, &hdma_usart6_rx);
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <main+0x90>)
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <main+0x94>)
 8000c1a:	f7ff ff93 	bl	8000b44 <bsp_uart_dfp_init>
  //system init
  sys_manager_init();
 8000c1e:	f00a fbc5 	bl	800b3ac <sys_manager_init>
  //start Timer
  HAL_TIM_Base_Start_IT(&htim3);
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <main+0x98>)
 8000c24:	f007 fef8 	bl	8008a18 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    sys_manager_run(&button_state);
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <main+0x9c>)
 8000c2a:	f00a fbcf 	bl	800b3cc <sys_manager_run>
 8000c2e:	e7fb      	b.n	8000c28 <main+0x68>
 8000c30:	20000120 	.word	0x20000120
 8000c34:	200000d8 	.word	0x200000d8
 8000c38:	20000180 	.word	0x20000180
 8000c3c:	2000021c 	.word	0x2000021c
 8000c40:	20000354 	.word	0x20000354
 8000c44:	200002c4 	.word	0x200002c4
 8000c48:	20000434 	.word	0x20000434
 8000c4c:	20000418 	.word	0x20000418
 8000c50:	200003b4 	.word	0x200003b4
 8000c54:	2000030c 	.word	0x2000030c
 8000c58:	200001d4 	.word	0x200001d4
 8000c5c:	20000414 	.word	0x20000414

08000c60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	2230      	movs	r2, #48	; 0x30
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00c fade 	bl	800d230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <SystemClock_Config+0xc8>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <SystemClock_Config+0xc8>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <SystemClock_Config+0xc8>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <SystemClock_Config+0xcc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <SystemClock_Config+0xcc>)
 8000caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <SystemClock_Config+0xcc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000cd4:	2350      	movs	r3, #80	; 0x50
 8000cd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f007 f9af 	bl	8008048 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf0:	f000 fa58 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f007 fc11 	bl	8008538 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d1c:	f000 fa42 	bl	80011a4 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3750      	adds	r7, #80	; 0x50
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d44:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xa0>)
 8000d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000d96:	f003 f98d 	bl	80040b4 <HAL_ADC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000da0:	f000 fa00 	bl	80011a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_ADC1_Init+0x9c>)
 8000db6:	f003 facf 	bl	8004358 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000dc0:	f000 f9f0 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000d8 	.word	0x200000d8
 8000dd0:	40012000 	.word	0x40012000

08000dd4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dda:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <MX_I2C1_Init+0x54>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_I2C1_Init+0x58>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e12:	f004 fc29 	bl	8005668 <HAL_I2C_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 f9c2 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000180 	.word	0x20000180
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	000186a0 	.word	0x000186a0

08000e30 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <MX_TIM3_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100 - 1;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e54:	2263      	movs	r2, #99	; 0x63
 8000e56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25 - 1;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e60:	2218      	movs	r2, #24
 8000e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e72:	f007 fd81 	bl	8008978 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000e7c:	f000 f992 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000e8e:	f008 fa9d 	bl	80093cc <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000e98:	f000 f984 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_TIM3_Init+0x90>)
 8000eaa:	f008 ff31 	bl	8009d10 <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000eb4:	f000 f976 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001d4 	.word	0x200001d4
 8000ec4:	40000400 	.word	0x40000400

08000ec8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <MX_TIM4_Init+0xac>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50 - 1;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000efe:	2231      	movs	r2, #49	; 0x31
 8000f00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000f10:	f007 fde4 	bl	8008adc <HAL_TIM_PWM_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000f1a:	f000 f943 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000f2e:	f008 feef 	bl	8009d10 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000f38:	f000 f934 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2360      	movs	r3, #96	; 0x60
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000f54:	f008 f978 	bl	8009248 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f5e:	f000 f921 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MX_TIM4_Init+0xa8>)
 8000f64:	f000 faa0 	bl	80014a8 <HAL_TIM_MspPostInit>
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000021c 	.word	0x2000021c
 8000f74:	40000800 	.word	0x40000800

08000f78 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_USART2_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f008 ff30 	bl	8009e14 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f000 f8f3 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200002c4 	.word	0x200002c4
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART6_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8001004:	f008 ff06 	bl	8009e14 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f8c9 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000030c 	.word	0x2000030c
 800101c:	40011400 	.word	0x40011400

08001020 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_DMA_Init+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <MX_DMA_Init+0x88>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_DMA_Init+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_DMA_Init+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <MX_DMA_Init+0x88>)
 800104c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_DMA_Init+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200b      	movs	r0, #11
 8001064:	f003 fd03 	bl	8004a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001068:	200b      	movs	r0, #11
 800106a:	f003 fd1c 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2010      	movs	r0, #16
 8001074:	f003 fcfb 	bl	8004a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001078:	2010      	movs	r0, #16
 800107a:	f003 fd14 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2038      	movs	r0, #56	; 0x38
 8001084:	f003 fcf3 	bl	8004a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001088:	2038      	movs	r0, #56	; 0x38
 800108a:	f003 fd0c 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2039      	movs	r0, #57	; 0x39
 8001094:	f003 fceb 	bl	8004a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001098:	2039      	movs	r0, #57	; 0x39
 800109a:	f003 fd04 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <MX_GPIO_Init+0xec>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <MX_GPIO_Init+0xec>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <MX_GPIO_Init+0xec>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_GPIO_Init+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <MX_GPIO_Init+0xec>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_GPIO_Init+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_GPIO_Init+0xec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a25      	ldr	r2, [pc, #148]	; (8001198 <MX_GPIO_Init+0xec>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_GPIO_Init+0xec>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_GPIO_Init+0xec>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <MX_GPIO_Init+0xec>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_GPIO_Init+0xec>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_GPIO_Init+0xec>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_GPIO_Init+0xec>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_GPIO_Init+0xec>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_GPIO_Init+0xf0>)
 8001156:	f004 fa6d 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115a:	2301      	movs	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_GPIO_Init+0xf4>)
 800116e:	f004 f8c5 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_GPIO_Init+0xf0>)
 800118c:	f004 f8b6 	bl	80052fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020000 	.word	0x40020000

080011a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <HAL_ADC_MspInit+0xdc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d157      	bne.n	80012d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	481d      	ldr	r0, [pc, #116]	; (80012e4 <HAL_ADC_MspInit+0xe4>)
 800126e:	f004 f845 	bl	80052fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_ADC_MspInit+0xec>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001298:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800129c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012b8:	f003 fc10 	bl	8004adc <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80012c2:	f7ff ff6f 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40012000 	.word	0x40012000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	20000120 	.word	0x20000120
 80012ec:	40026410 	.word	0x40026410

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a21      	ldr	r2, [pc, #132]	; (8001394 <HAL_I2C_MspInit+0xa4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d13b      	bne.n	800138a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_I2C_MspInit+0xa8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_I2C_MspInit+0xa8>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_I2C_MspInit+0xa8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132e:	23c0      	movs	r3, #192	; 0xc0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <HAL_I2C_MspInit+0xac>)
 800134a:	f003 ffd7 	bl	80052fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_I2C_MspInit+0xa8>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_I2C_MspInit+0xa8>)
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_I2C_MspInit+0xa8>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	201f      	movs	r0, #31
 8001370:	f003 fb7d 	bl	8004a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001374:	201f      	movs	r0, #31
 8001376:	f003 fb96 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2020      	movs	r0, #32
 8001380:	f003 fb75 	bl	8004a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001384:	2020      	movs	r0, #32
 8001386:	f003 fb8e 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_TIM_Base_MspInit+0x48>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d115      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201d      	movs	r0, #29
 80013d4:	f003 fb4b 	bl	8004a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013d8:	201d      	movs	r0, #29
 80013da:	f003 fb64 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a26      	ldr	r2, [pc, #152]	; (8001498 <HAL_TIM_PWM_MspInit+0xa8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d145      	bne.n	800148e <HAL_TIM_PWM_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_TIM_PWM_MspInit+0xac>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_TIM_PWM_MspInit+0xac>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_TIM_PWM_MspInit+0xac>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <HAL_TIM_PWM_MspInit+0xb4>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001426:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800142a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 800143a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001446:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 800144a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001464:	f003 fb3a 	bl	8004adc <HAL_DMA_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800146e:	f7ff fe99 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_PWM_MspInit+0xb0>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	201e      	movs	r0, #30
 8001484:	f003 faf3 	bl	8004a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001488:	201e      	movs	r0, #30
 800148a:	f003 fb0c 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40000800 	.word	0x40000800
 800149c:	40023800 	.word	0x40023800
 80014a0:	20000264 	.word	0x20000264
 80014a4:	40026010 	.word	0x40026010

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_TIM_MspPostInit+0x70>)
 8001504:	f003 fefa 	bl	80052fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40000800 	.word	0x40000800
 8001514:	40023800 	.word	0x40023800
 8001518:	40020c00 	.word	0x40020c00

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a69      	ldr	r2, [pc, #420]	; (80016e0 <HAL_UART_MspInit+0x1c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d163      	bne.n	8001606 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a67      	ldr	r2, [pc, #412]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a60      	ldr	r2, [pc, #384]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001576:	230c      	movs	r3, #12
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4855      	ldr	r0, [pc, #340]	; (80016e8 <HAL_UART_MspInit+0x1cc>)
 8001592:	f003 feb3 	bl	80052fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 8001598:	4a55      	ldr	r2, [pc, #340]	; (80016f0 <HAL_UART_MspInit+0x1d4>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 800159e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a4:	4b51      	ldr	r3, [pc, #324]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b0:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015be:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015c4:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015d8:	4844      	ldr	r0, [pc, #272]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015da:	f003 fa7f 	bl	8004adc <HAL_DMA_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80015e4:	f7ff fdde 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ee:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_UART_MspInit+0x1d0>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2026      	movs	r0, #38	; 0x26
 80015fa:	f003 fa38 	bl	8004a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015fe:	2026      	movs	r0, #38	; 0x26
 8001600:	f003 fa51 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001604:	e067      	b.n	80016d6 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART6)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a3a      	ldr	r2, [pc, #232]	; (80016f4 <HAL_UART_MspInit+0x1d8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d162      	bne.n	80016d6 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	6453      	str	r3, [r2, #68]	; 0x44
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 0320 	and.w	r3, r3, #32
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_UART_MspInit+0x1c8>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001648:	23c0      	movs	r3, #192	; 0xc0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001658:	2308      	movs	r3, #8
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4825      	ldr	r0, [pc, #148]	; (80016f8 <HAL_UART_MspInit+0x1dc>)
 8001664:	f003 fe4a 	bl	80052fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 800166a:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_UART_MspInit+0x1e4>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 8001670:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001674:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 8001684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001688:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 8001698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 80016ac:	f003 fa16 	bl	8004adc <HAL_DMA_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80016b6:	f7ff fd75 	bl	80011a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_UART_MspInit+0x1e0>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2047      	movs	r0, #71	; 0x47
 80016cc:	f003 f9cf 	bl	8004a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016d0:	2047      	movs	r0, #71	; 0x47
 80016d2:	f003 f9e8 	bl	8004aa6 <HAL_NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	; 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	20000354 	.word	0x20000354
 80016f0:	40026088 	.word	0x40026088
 80016f4:	40011400 	.word	0x40011400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	200003b4 	.word	0x200003b4
 8001700:	40026428 	.word	0x40026428

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f002 fc6c 	bl	800402c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  FatFsCnt++;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <SysTick_Handler+0x30>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <SysTick_Handler+0x30>)
 8001760:	701a      	strb	r2, [r3, #0]
    if(FatFsCnt >= 10)
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <SysTick_Handler+0x30>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b09      	cmp	r3, #9
 800176a:	d904      	bls.n	8001776 <SysTick_Handler+0x2a>
    {
      FatFsCnt = 0;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <SysTick_Handler+0x30>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
      SDTimer_Handler();
 8001772:	f000 f869 	bl	8001848 <SDTimer_Handler>
    }

  /* USER CODE END SysTick_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000044d 	.word	0x2000044d

08001780 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream0_IRQHandler+0x10>)
 8001786:	f003 fb41 	bl	8004e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000264 	.word	0x20000264

08001794 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Stream5_IRQHandler+0x10>)
 800179a:	f003 fb37 	bl	8004e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000354 	.word	0x20000354

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM3_IRQHandler+0x10>)
 80017ae:	f007 fc5b 	bl	8009068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001d4 	.word	0x200001d4

080017bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM4_IRQHandler+0x10>)
 80017c2:	f007 fc51 	bl	8009068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000021c 	.word	0x2000021c

080017d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <I2C1_EV_IRQHandler+0x10>)
 80017d6:	f004 fbd1 	bl	8005f7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000180 	.word	0x20000180

080017e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <I2C1_ER_IRQHandler+0x10>)
 80017ea:	f004 fd1a 	bl	8006222 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000180 	.word	0x20000180

080017f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USART2_IRQHandler+0x10>)
 80017fe:	f008 fc41 	bl	800a084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200002c4 	.word	0x200002c4

0800180c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA2_Stream0_IRQHandler+0x10>)
 8001812:	f003 fafb 	bl	8004e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000120 	.word	0x20000120

08001820 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <DMA2_Stream1_IRQHandler+0x10>)
 8001826:	f003 faf1 	bl	8004e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200003b4 	.word	0x200003b4

08001834 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <USART6_IRQHandler+0x10>)
 800183a:	f008 fc23 	bl	800a084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000030c 	.word	0x2000030c

08001848 <SDTimer_Handler>:

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <SDTimer_Handler+0x40>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <SDTimer_Handler+0x1c>
    Timer1--;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <SDTimer_Handler+0x40>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3b01      	subs	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <SDTimer_Handler+0x40>)
 8001862:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <SDTimer_Handler+0x44>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <SDTimer_Handler+0x34>
    Timer2--;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <SDTimer_Handler+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <SDTimer_Handler+0x44>)
 800187a:	701a      	strb	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000044e 	.word	0x2000044e
 800188c:	2000044f 	.word	0x2000044f

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f00b fcd0 	bl	800d264 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20020000 	.word	0x20020000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	20000450 	.word	0x20000450
 80018f8:	2000c760 	.word	0x2000c760

080018fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001924:	f7ff ffea 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f00b fc8f 	bl	800d270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff f935 	bl	8000bc0 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001964:	0802bd50 	.word	0x0802bd50
  ldr r2, =_sbss
 8001968:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800196c:	2000c760 	.word	0x2000c760

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <drv_btn_init>:
static button_t button;
static btn_event_t button_event;
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
bool drv_btn_init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  bsp_button_init(&button);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <drv_btn_init+0x10>)
 800197a:	f7fe fe49 	bl	8000610 <bsp_button_init>
  return true;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000454 	.word	0x20000454

08001988 <drv_btn_check_event>:

void drv_btn_check_event(btn_info_t *button_state)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  button_event = bsp_btn_check_state_one_button(&button);
 8001990:	4814      	ldr	r0, [pc, #80]	; (80019e4 <drv_btn_check_event+0x5c>)
 8001992:	f7fe fe61 	bl	8000658 <bsp_btn_check_state_one_button>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <drv_btn_check_event+0x60>)
 800199c:	701a      	strb	r2, [r3, #0]
  if (button_event == BTN_EVENT_SINGLE_CLICK)
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <drv_btn_check_event+0x60>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2ba1      	cmp	r3, #161	; 0xa1
 80019a4:	d103      	bne.n	80019ae <drv_btn_check_event+0x26>
  {
    *button_state = SINGLE_CLICK_BUTTON;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e00e      	b.n	80019cc <drv_btn_check_event+0x44>
  }
  else if (button_event == BTN_EVENT_DOUBLE_CLICK)
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <drv_btn_check_event+0x60>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2ba3      	cmp	r3, #163	; 0xa3
 80019b4:	d103      	bne.n	80019be <drv_btn_check_event+0x36>
  {
    *button_state = DOUBLE_CLICK_BUTTON;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e006      	b.n	80019cc <drv_btn_check_event+0x44>
  }
  else if (button_event == BTN_EVENT_HOLD)
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <drv_btn_check_event+0x60>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2ba2      	cmp	r3, #162	; 0xa2
 80019c4:	d102      	bne.n	80019cc <drv_btn_check_event+0x44>
  {
    *button_state = HOLD_BUTTON;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	701a      	strb	r2, [r3, #0]
  }
  if (button_event == BTN_EVENT_RELEASE)
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <drv_btn_check_event+0x60>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2ba0      	cmp	r3, #160	; 0xa0
 80019d2:	d102      	bne.n	80019da <drv_btn_check_event+0x52>
  {
    *button_state = RELEASE_BUTTON;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	701a      	strb	r2, [r3, #0]
  }
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000454 	.word	0x20000454
 80019e8:	20000460 	.word	0x20000460

080019ec <drv_df_playfromstart>:
/* Private function prototypes ---------------------------------------- */
void drv_df_send_cmd(uint8_t cmd, uint8_t param1, uint8_t param2);
static uint8_t drv_df_volume;
/* Private definitions ----------------------------------------------- */
drv_dfplayer_status_t drv_df_playfromstart(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  drv_df_send_cmd(0x03, 0x00, 0x01);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2100      	movs	r1, #0
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f872 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 80019fa:	20c8      	movs	r0, #200	; 0xc8
 80019fc:	f002 fb36 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <drv_df_init>:
drv_dfplayer_status_t drv_df_init(uint8_t volume)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  drv_df_send_cmd(0x0C, 0x00, 0x00);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	200c      	movs	r0, #12
 8001a18:	f000 f861 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001a1c:	20c8      	movs	r0, #200	; 0xc8
 8001a1e:	f002 fb25 	bl	800406c <HAL_Delay>
  drv_df_send_cmd(0x3F, 0x00, SOURCE);
 8001a22:	2202      	movs	r2, #2
 8001a24:	2100      	movs	r1, #0
 8001a26:	203f      	movs	r0, #63	; 0x3f
 8001a28:	f000 f859 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001a2c:	20c8      	movs	r0, #200	; 0xc8
 8001a2e:	f002 fb1d 	bl	800406c <HAL_Delay>
  drv_df_send_cmd(0x06, 0x00, volume);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	461a      	mov	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f000 f850 	bl	8001ade <drv_df_send_cmd>
  drv_df_volume = volume;
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <drv_df_init+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	7013      	strb	r3, [r2, #0]
  HAL_Delay(500);
 8001a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a48:	f002 fb10 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000461 	.word	0x20000461

08001a5c <drv_df_next>:
drv_dfplayer_status_t drv_df_next(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  drv_df_send_cmd(0x01, 0x00, 0x00);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f83a 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001a6a:	20c8      	movs	r0, #200	; 0xc8
 8001a6c:	f002 fafe 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <drv_df_pause>:
drv_dfplayer_status_t drv_df_pause(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  drv_df_send_cmd(0x0E, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	200e      	movs	r0, #14
 8001a80:	f000 f82d 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001a84:	20c8      	movs	r0, #200	; 0xc8
 8001a86:	f002 faf1 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <drv_df_previous>:
drv_dfplayer_status_t drv_df_previous(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  drv_df_send_cmd(0x02, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f000 f820 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001a9e:	20c8      	movs	r0, #200	; 0xc8
 8001aa0:	f002 fae4 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <drv_df_playback>:
drv_dfplayer_status_t drv_df_playback(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  drv_df_send_cmd(0x0D, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200d      	movs	r0, #13
 8001ab4:	f000 f813 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001ab8:	20c8      	movs	r0, #200	; 0xc8
 8001aba:	f002 fad7 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <drv_df_playrandom>:

drv_dfplayer_status_t drv_df_playrandom(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  drv_df_send_cmd(0x18, 0x00, 0x00);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2018      	movs	r0, #24
 8001ace:	f000 f806 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001ad2:	20c8      	movs	r0, #200	; 0xc8
 8001ad4:	f002 faca 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}

08001ade <drv_df_send_cmd>:

void drv_df_send_cmd(uint8_t cmd, uint8_t param1, uint8_t param2)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	71bb      	strb	r3, [r7, #6]
 8001aec:	4613      	mov	r3, r2
 8001aee:	717b      	strb	r3, [r7, #5]
  uint16_t checksum = VERSION + CMD_LEN + cmd + FEEDBACK + param1 + param2;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	797b      	ldrb	r3, [r7, #5]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f203 1305 	addw	r3, r3, #261	; 0x105
 8001b08:	82fb      	strh	r3, [r7, #22]
  checksum = 0 - checksum;
 8001b0a:	8afb      	ldrh	r3, [r7, #22]
 8001b0c:	425b      	negs	r3, r3
 8001b0e:	82fb      	strh	r3, [r7, #22]
  uint8_t cmd_sequence[10] = {START_BYTE, VERSION, CMD_LEN, cmd, FEEDBACK, param1, param2, (checksum >> 8) & 0x00ff, (checksum & 0x00ff), END_BYTE};
 8001b10:	237e      	movs	r3, #126	; 0x7e
 8001b12:	733b      	strb	r3, [r7, #12]
 8001b14:	23ff      	movs	r3, #255	; 0xff
 8001b16:	737b      	strb	r3, [r7, #13]
 8001b18:	2306      	movs	r3, #6
 8001b1a:	73bb      	strb	r3, [r7, #14]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	2300      	movs	r3, #0
 8001b22:	743b      	strb	r3, [r7, #16]
 8001b24:	79bb      	ldrb	r3, [r7, #6]
 8001b26:	747b      	strb	r3, [r7, #17]
 8001b28:	797b      	ldrb	r3, [r7, #5]
 8001b2a:	74bb      	strb	r3, [r7, #18]
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	74fb      	strb	r3, [r7, #19]
 8001b36:	8afb      	ldrh	r3, [r7, #22]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	753b      	strb	r3, [r7, #20]
 8001b3c:	23ef      	movs	r3, #239	; 0xef
 8001b3e:	757b      	strb	r3, [r7, #21]
  bsp_uart_dfp_send(cmd_sequence, 10);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	210a      	movs	r1, #10
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f824 	bl	8000b94 <bsp_uart_dfp_send>
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <drv_df_playfile>:

drv_dfplayer_status_t drv_df_playfile(uint8_t file_number)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  drv_df_send_cmd(0x03, 0x00, file_number);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	2003      	movs	r0, #3
 8001b66:	f7ff ffba 	bl	8001ade <drv_df_send_cmd>
  HAL_Delay(200);
 8001b6a:	20c8      	movs	r0, #200	; 0xc8
 8001b6c:	f002 fa7e 	bl	800406c <HAL_Delay>
  return DRV_DFPLAYER_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <bsp_tim_init>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bsp_tim_init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    btim_data = htim;
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <bsp_tim_init+0x1c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000464 	.word	0x20000464

08001b9c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop_DMA(btim_data, TIM_CHANNEL_1);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f007 f996 	bl	8008edc <HAL_TIM_PWM_Stop_DMA>
    data_sent_flag = 1;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000464 	.word	0x20000464
 8001bc4:	20000468 	.word	0x20000468

08001bc8 <get_set_time_hour>:

uint8_t *get_set_time_hour()
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
    return &set_time_hours;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <get_set_time_hour+0x10>)
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	200074d0 	.word	0x200074d0

08001bdc <get_set_time_minutes>:

uint8_t *get_set_time_minutes()
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
    return &set_time_minutes;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <get_set_time_minutes+0x10>)
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	200074d1 	.word	0x200074d1

08001bf0 <get_set_time_seconds>:

uint8_t *get_set_time_seconds()
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
    return &set_time_seconds;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <get_set_time_seconds+0x10>)
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	200074d2 	.word	0x200074d2

08001c04 <get_set_time_date>:

uint8_t *get_set_time_date()
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
    return &set_time_date;
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <get_set_time_date+0x10>)
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000004 	.word	0x20000004

08001c18 <get_set_time_month>:

uint8_t *get_set_time_month()
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
    return &set_time_month;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <get_set_time_month+0x10>)
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000005 	.word	0x20000005

08001c2c <get_set_time_year>:

uint8_t *get_set_time_year()
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
    return &set_time_year;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <get_set_time_year+0x10>)
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000006 	.word	0x20000006

08001c40 <drv_led_matrix_clear>:

uint32_t drv_led_matrix_clear()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_LED; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	e017      	b.n	8001c7c <drv_led_matrix_clear+0x3c>
    {
        drv_led_matrix_set_led(i / 16, i % 16, 0, 0, 0);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da00      	bge.n	8001c54 <drv_led_matrix_clear+0x14>
 8001c52:	330f      	adds	r3, #15
 8001c54:	111b      	asrs	r3, r3, #4
 8001c56:	b2d8      	uxtb	r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	425a      	negs	r2, r3
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	f002 020f 	and.w	r2, r2, #15
 8001c64:	bf58      	it	pl
 8001c66:	4253      	negpl	r3, r2
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2200      	movs	r2, #0
 8001c72:	f000 f80d 	bl	8001c90 <drv_led_matrix_set_led>
    for (int i = 0; i < MAX_LED; i++)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c82:	dbe3      	blt.n	8001c4c <drv_led_matrix_clear+0xc>
    }
    return D_LED_MATRIX_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <drv_led_matrix_set_led>:

uint32_t drv_led_matrix_set_led(uint8_t row, uint8_t col, uint8_t red, uint8_t green, uint8_t blue)
{
 8001c90:	b490      	push	{r4, r7}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4604      	mov	r4, r0
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	717b      	strb	r3, [r7, #5]
 8001caa:	4613      	mov	r3, r2
 8001cac:	713b      	strb	r3, [r7, #4]
    int led_num;
    if (row % 2 == 0)
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d105      	bne.n	8001cc6 <drv_led_matrix_set_led+0x36>
    {
        // Even row (0-indexed), straight order
        led_num = row * 16 + col;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	011a      	lsls	r2, r3, #4
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e006      	b.n	8001cd4 <drv_led_matrix_set_led+0x44>
    }
    else
    {
        // Odd row (0-indexed), reverse order
        led_num = row * 16 + (15 - col);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	011a      	lsls	r2, r3, #4
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	f1c3 030f 	rsb	r3, r3, #15
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
    if (led_num < 0 || led_num >= MAX_LED)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db03      	blt.n	8001ce2 <drv_led_matrix_set_led+0x52>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	db01      	blt.n	8001ce6 <drv_led_matrix_set_led+0x56>
    {
        return D_LED_MATRIX_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e018      	b.n	8001d18 <drv_led_matrix_set_led+0x88>
    } // Ensure led_num is within bounds
    led_data[led_num][0] = led_num;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	b2d9      	uxtb	r1, r3
 8001cea:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <drv_led_matrix_set_led+0x94>)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    led_data[led_num][1] = green;
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <drv_led_matrix_set_led+0x94>)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	793a      	ldrb	r2, [r7, #4]
 8001cfc:	705a      	strb	r2, [r3, #1]
    led_data[led_num][2] = red;
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <drv_led_matrix_set_led+0x94>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	797a      	ldrb	r2, [r7, #5]
 8001d08:	709a      	strb	r2, [r3, #2]
    led_data[led_num][3] = blue;
 8001d0a:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <drv_led_matrix_set_led+0x94>)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	7e3a      	ldrb	r2, [r7, #24]
 8001d14:	70da      	strb	r2, [r3, #3]

    return D_LED_MATRIX_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc90      	pop	{r4, r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2000046c 	.word	0x2000046c

08001d28 <drv_led_matrix_set_brightness>:

uint32_t drv_led_matrix_set_brightness(uint8_t brightness)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
#if USE_BRIGHTNESS

    if (brightness > 100)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <drv_led_matrix_set_brightness+0x14>
        brightness = 100;
 8001d38:	2364      	movs	r3, #100	; 0x64
 8001d3a:	71fb      	strb	r3, [r7, #7]

    for (int i = 0; i < MAX_LED; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e02d      	b.n	8001d9e <drv_led_matrix_set_brightness+0x76>
    {
        led_mod[i][0] = led_data[i][0];
 8001d42:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <drv_led_matrix_set_brightness+0x8c>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <drv_led_matrix_set_brightness+0x90>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        for (int j = 1; j < 4; j++)
 8001d52:	2301      	movs	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	e01c      	b.n	8001d92 <drv_led_matrix_set_brightness+0x6a>
        {
            // Adjust brightness based on percentage
            led_mod[i][j] = (led_data[i][j] * brightness) / 100;
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <drv_led_matrix_set_brightness+0x8c>)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	441a      	add	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <drv_led_matrix_set_brightness+0x94>)
 8001d70:	fb82 1203 	smull	r1, r2, r2, r3
 8001d74:	1152      	asrs	r2, r2, #5
 8001d76:	17db      	asrs	r3, r3, #31
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b2d9      	uxtb	r1, r3
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <drv_led_matrix_set_brightness+0x90>)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	441a      	add	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4413      	add	r3, r2
 8001d88:	460a      	mov	r2, r1
 8001d8a:	701a      	strb	r2, [r3, #0]
        for (int j = 1; j < 4; j++)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	dddf      	ble.n	8001d58 <drv_led_matrix_set_brightness+0x30>
    for (int i = 0; i < MAX_LED; i++)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da4:	dbcd      	blt.n	8001d42 <drv_led_matrix_set_brightness+0x1a>
        }
    }
#endif
    return D_LED_MATRIX_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	2000046c 	.word	0x2000046c
 8001db8:	20000c6c 	.word	0x20000c6c
 8001dbc:	51eb851f 	.word	0x51eb851f

08001dc0 <drv_led_matrix_ws2812_send>:

uint32_t drv_led_matrix_ws2812_send()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
    uint32_t indx = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
    uint32_t color;

    for (int i = 0; i < MAX_LED; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e036      	b.n	8001e3e <drv_led_matrix_ws2812_send+0x7e>
    {
        color = ((led_mod[i][1] << 16) | (led_mod[i][2] << 8) | (led_mod[i][3]));
 8001dd0:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <drv_led_matrix_ws2812_send+0xd4>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	041a      	lsls	r2, r3, #16
 8001ddc:	492d      	ldr	r1, [pc, #180]	; (8001e94 <drv_led_matrix_ws2812_send+0xd4>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	431a      	orrs	r2, r3
 8001dea:	492a      	ldr	r1, [pc, #168]	; (8001e94 <drv_led_matrix_ws2812_send+0xd4>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	78db      	ldrb	r3, [r3, #3]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	607b      	str	r3, [r7, #4]
        for (int i = 23; i >= 0; i--)
 8001df8:	2317      	movs	r3, #23
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e019      	b.n	8001e32 <drv_led_matrix_ws2812_send+0x72>
        {
            if (color & (1 << i))
 8001dfe:	2201      	movs	r2, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <drv_led_matrix_ws2812_send+0x5c>
            {
                pwm_data[indx] = 33;
 8001e10:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <drv_led_matrix_ws2812_send+0xd8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2121      	movs	r1, #33	; 0x21
 8001e16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e1a:	e004      	b.n	8001e26 <drv_led_matrix_ws2812_send+0x66>
            }
            else
                pwm_data[indx] = 17;
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <drv_led_matrix_ws2812_send+0xd8>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2111      	movs	r1, #17
 8001e22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

            indx++;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
        for (int i = 23; i >= 0; i--)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	dae2      	bge.n	8001dfe <drv_led_matrix_ws2812_send+0x3e>
    for (int i = 0; i < MAX_LED; i++)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	dbc4      	blt.n	8001dd0 <drv_led_matrix_ws2812_send+0x10>
        }
    }

    for (int i = 0; i < 50; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	e00a      	b.n	8001e62 <drv_led_matrix_ws2812_send+0xa2>
    {
        pwm_data[indx] = 0;
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <drv_led_matrix_ws2812_send+0xd8>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2100      	movs	r1, #0
 8001e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        indx++;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 50; i++)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b31      	cmp	r3, #49	; 0x31
 8001e66:	ddf1      	ble.n	8001e4c <drv_led_matrix_ws2812_send+0x8c>
    }

    HAL_TIM_PWM_Start_DMA(btim_data, TIM_CHANNEL_1, (uint32_t *)pwm_data, indx);
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <drv_led_matrix_ws2812_send+0xdc>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <drv_led_matrix_ws2812_send+0xd8>)
 8001e72:	2100      	movs	r1, #0
 8001e74:	f006 fe82 	bl	8008b7c <HAL_TIM_PWM_Start_DMA>
    while (!data_sent_flag)
 8001e78:	bf00      	nop
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <drv_led_matrix_ws2812_send+0xe0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0fb      	beq.n	8001e7a <drv_led_matrix_ws2812_send+0xba>
    {
    };
    data_sent_flag = 0;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <drv_led_matrix_ws2812_send+0xe0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

    return D_LED_MATRIX_SENT_OK;
 8001e88:	2302      	movs	r3, #2
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000c6c 	.word	0x20000c6c
 8001e98:	2000146c 	.word	0x2000146c
 8001e9c:	20000464 	.word	0x20000464
 8001ea0:	20000468 	.word	0x20000468

08001ea4 <drv_led_matrix_draw_digit>:

    return D_LED_MATRIX_OK;
}

uint32_t drv_led_matrix_draw_digit(uint8_t num, uint8_t row_offset, uint8_t col_offset, uint8_t red, uint8_t green, uint8_t blue)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	717b      	strb	r3, [r7, #5]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	713b      	strb	r3, [r7, #4]
    if (num < 0 || num > 9)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d901      	bls.n	8001ecc <drv_led_matrix_draw_digit+0x28>
    {
        return D_LED_MATRIX_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e039      	b.n	8001f40 <drv_led_matrix_draw_digit+0x9c>
    }

    for (int y = 0; y < 5; y++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e032      	b.n	8001f38 <drv_led_matrix_draw_digit+0x94>
    {
        for (int x = 0; x < 3; x++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e029      	b.n	8001f2c <drv_led_matrix_draw_digit+0x88>
        {
            // Đảo ngược vị trí x khi vẽ số để xử lý việc hiển thị ngược
            int col = col_offset + (2 - x);
 8001ed8:	797a      	ldrb	r2, [r7, #5]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f1c3 0302 	rsb	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
            int row = row_offset + y;
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
            if (number_patterns[num][y][x] == 1)
 8001eec:	79f9      	ldrb	r1, [r7, #7]
 8001eee:	4816      	ldr	r0, [pc, #88]	; (8001f48 <drv_led_matrix_draw_digit+0xa4>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	0052      	lsls	r2, r2, #1
 8001ef6:	441a      	add	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a5b      	subs	r3, r3, r1
 8001efe:	4413      	add	r3, r2
 8001f00:	18c2      	adds	r2, r0, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10c      	bne.n	8001f26 <drv_led_matrix_draw_digit+0x82>
            {
                drv_led_matrix_set_led(row, col, red, green, blue);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	b2d8      	uxtb	r0, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	b2d9      	uxtb	r1, r3
 8001f14:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8001f18:	793a      	ldrb	r2, [r7, #4]
 8001f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4623      	mov	r3, r4
 8001f22:	f7ff feb5 	bl	8001c90 <drv_led_matrix_set_led>
        for (int x = 0; x < 3; x++)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	ddd2      	ble.n	8001ed8 <drv_led_matrix_draw_digit+0x34>
    for (int y = 0; y < 5; y++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	ddc9      	ble.n	8001ed2 <drv_led_matrix_draw_digit+0x2e>
            }
        }
    }
    return D_LED_MATRIX_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}
 8001f48:	0800dd84 	.word	0x0800dd84

08001f4c <drv_led_matrix_draw_letter>:

uint32_t drv_led_matrix_draw_letter(char letter, uint8_t row_offset, uint8_t col_offset, uint8_t red, uint8_t green, uint8_t blue)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	4604      	mov	r4, r0
 8001f54:	4608      	mov	r0, r1
 8001f56:	4611      	mov	r1, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71bb      	strb	r3, [r7, #6]
 8001f62:	460b      	mov	r3, r1
 8001f64:	717b      	strb	r3, [r7, #5]
 8001f66:	4613      	mov	r3, r2
 8001f68:	713b      	strb	r3, [r7, #4]
    if (letter < 'A' || letter > 'Z')
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d902      	bls.n	8001f76 <drv_led_matrix_draw_letter+0x2a>
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	2b5a      	cmp	r3, #90	; 0x5a
 8001f74:	d901      	bls.n	8001f7a <drv_led_matrix_draw_letter+0x2e>
    {
        return D_LED_MATRIX_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e03c      	b.n	8001ff4 <drv_led_matrix_draw_letter+0xa8>
    }

    uint8_t index = letter - 'A';
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	3b41      	subs	r3, #65	; 0x41
 8001f7e:	75fb      	strb	r3, [r7, #23]

    for (int y = 0; y < 5; y++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	e032      	b.n	8001fec <drv_led_matrix_draw_letter+0xa0>
    {
        for (int x = 0; x < 3; x++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	e029      	b.n	8001fe0 <drv_led_matrix_draw_letter+0x94>
        {
            // Đảo ngược vị trí x khi vẽ chữ cái để xử lý việc hiển thị ngược
            int col = col_offset + (2 - x);
 8001f8c:	797a      	ldrb	r2, [r7, #5]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f1c3 0302 	rsb	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
            int row = row_offset + y;
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
            if (letter_patterns[index][y][x] == 1)
 8001fa0:	7df9      	ldrb	r1, [r7, #23]
 8001fa2:	4816      	ldr	r0, [pc, #88]	; (8001ffc <drv_led_matrix_draw_letter+0xb0>)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	0052      	lsls	r2, r2, #1
 8001faa:	441a      	add	r2, r3
 8001fac:	460b      	mov	r3, r1
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a5b      	subs	r3, r3, r1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	18c2      	adds	r2, r0, r3
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d10c      	bne.n	8001fda <drv_led_matrix_draw_letter+0x8e>
            {
                drv_led_matrix_set_led(row, col, red, green, blue);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	b2d8      	uxtb	r0, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	b2d9      	uxtb	r1, r3
 8001fc8:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 8001fcc:	793a      	ldrb	r2, [r7, #4]
 8001fce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	f7ff fe5b 	bl	8001c90 <drv_led_matrix_set_led>
        for (int x = 0; x < 3; x++)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	ddd2      	ble.n	8001f8c <drv_led_matrix_draw_letter+0x40>
    for (int y = 0; y < 5; y++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	ddc9      	ble.n	8001f86 <drv_led_matrix_draw_letter+0x3a>
            }
        }
    }
    return D_LED_MATRIX_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3724      	adds	r7, #36	; 0x24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	0800de1c 	.word	0x0800de1c

08002000 <drv_led_matrix_draw_string>:

void drv_led_matrix_draw_string(const char *str, uint8_t row_offset, uint8_t col_offset, uint8_t red, uint8_t green, uint8_t blue)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b087      	sub	sp, #28
 8002004:	af02      	add	r7, sp, #8
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	70fb      	strb	r3, [r7, #3]
 8002012:	460b      	mov	r3, r1
 8002014:	70bb      	strb	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	707b      	strb	r3, [r7, #1]
    uint8_t current_col_offset = col_offset;
 800201a:	78bb      	ldrb	r3, [r7, #2]
 800201c:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; str[i] != '\0'; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	e022      	b.n	800206a <drv_led_matrix_draw_string+0x6a>
    {
        if (str[i] != ' ')
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b20      	cmp	r3, #32
 800202e:	d013      	beq.n	8002058 <drv_led_matrix_draw_string+0x58>
        {
            drv_led_matrix_draw_letter(str[i], row_offset, current_col_offset, red, green, blue);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	7818      	ldrb	r0, [r3, #0]
 8002038:	787c      	ldrb	r4, [r7, #1]
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	78f9      	ldrb	r1, [r7, #3]
 800203e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4623      	mov	r3, r4
 800204c:	f7ff ff7e 	bl	8001f4c <drv_led_matrix_draw_letter>
            current_col_offset += 4; // Khoảng cách giữa các chữ cái
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	3304      	adds	r3, #4
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e002      	b.n	800205e <drv_led_matrix_draw_string+0x5e>
        }
        else
        {
            current_col_offset += 2; // Khoảng cách giữa các chữ cái khi gặp khoảng trắng
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3302      	adds	r3, #2
 800205c:	73fb      	strb	r3, [r7, #15]
        }

        // Nếu vượt quá chiều rộng ma trận, thoát khỏi vòng lặp
        if (current_col_offset >= MATRIX_WIDTH)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d809      	bhi.n	8002078 <drv_led_matrix_draw_string+0x78>
    for (int i = 0; str[i] != '\0'; i++)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1d6      	bne.n	8002024 <drv_led_matrix_draw_string+0x24>
        {
            break;
        }
    }
}
 8002076:	e000      	b.n	800207a <drv_led_matrix_draw_string+0x7a>
            break;
 8002078:	bf00      	nop
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}
	...

08002084 <drv_led_matrix_draw_clock_icon>:
    }
    return D_LED_MATRIX_OK;
}

uint32_t drv_led_matrix_draw_clock_icon(void)
{
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	b087      	sub	sp, #28
 8002088:	af02      	add	r7, sp, #8
    for (int row = 0; row < ROWS; row++)
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e040      	b.n	8002112 <drv_led_matrix_draw_clock_icon+0x8e>
    {
        for (int col = 0; col < COLS; col++)
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e037      	b.n	8002106 <drv_led_matrix_draw_clock_icon+0x82>
        {
            drv_led_matrix_set_led(row, col, clock_icon[row][col][0], clock_icon[row][col][1], clock_icon[row][col][2]);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	b2d8      	uxtb	r0, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	b2dc      	uxtb	r4, r3
 800209e:	4d21      	ldr	r5, [pc, #132]	; (8002124 <drv_led_matrix_draw_clock_icon+0xa0>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	68f9      	ldr	r1, [r7, #12]
 80020a4:	461a      	mov	r2, r3
 80020a6:	0052      	lsls	r2, r2, #1
 80020a8:	441a      	add	r2, r3
 80020aa:	460b      	mov	r3, r1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	440b      	add	r3, r1
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4413      	add	r3, r2
 80020b4:	442b      	add	r3, r5
 80020b6:	781d      	ldrb	r5, [r3, #0]
 80020b8:	4e1a      	ldr	r6, [pc, #104]	; (8002124 <drv_led_matrix_draw_clock_icon+0xa0>)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	441a      	add	r2, r3
 80020c4:	460b      	mov	r3, r1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	440b      	add	r3, r1
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	4413      	add	r3, r2
 80020ce:	4433      	add	r3, r6
 80020d0:	3301      	adds	r3, #1
 80020d2:	781e      	ldrb	r6, [r3, #0]
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <drv_led_matrix_draw_clock_icon+0xa0>)
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	461a      	mov	r2, r3
 80020de:	0052      	lsls	r2, r2, #1
 80020e0:	441a      	add	r2, r3
 80020e2:	460b      	mov	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	440b      	add	r3, r1
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3302      	adds	r3, #2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	4633      	mov	r3, r6
 80020f8:	462a      	mov	r2, r5
 80020fa:	4621      	mov	r1, r4
 80020fc:	f7ff fdc8 	bl	8001c90 <drv_led_matrix_set_led>
        for (int col = 0; col < COLS; col++)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	3301      	adds	r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	ddc4      	ble.n	8002096 <drv_led_matrix_draw_clock_icon+0x12>
    for (int row = 0; row < ROWS; row++)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	ddbb      	ble.n	8002090 <drv_led_matrix_draw_clock_icon+0xc>
        }
    }
    return D_LED_MATRIX_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	bf00      	nop
 8002124:	0800e2a4 	.word	0x0800e2a4

08002128 <drv_led_matrix_draw_alarm_clock_icon>:

uint32_t drv_led_matrix_draw_alarm_clock_icon(void)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b087      	sub	sp, #28
 800212c:	af02      	add	r7, sp, #8
    for (int row = 0; row < ROWS; row++)
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e040      	b.n	80021b6 <drv_led_matrix_draw_alarm_clock_icon+0x8e>
    {
        for (int col = 0; col < COLS; col++)
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	e037      	b.n	80021aa <drv_led_matrix_draw_alarm_clock_icon+0x82>
        {
            drv_led_matrix_set_led(row, col, alarm_clock_icon[row][col][0], alarm_clock_icon[row][col][1], alarm_clock_icon[row][col][2]);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	b2dc      	uxtb	r4, r3
 8002142:	4d21      	ldr	r5, [pc, #132]	; (80021c8 <drv_led_matrix_draw_alarm_clock_icon+0xa0>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	461a      	mov	r2, r3
 800214a:	0052      	lsls	r2, r2, #1
 800214c:	441a      	add	r2, r3
 800214e:	460b      	mov	r3, r1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	440b      	add	r3, r1
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4413      	add	r3, r2
 8002158:	442b      	add	r3, r5
 800215a:	781d      	ldrb	r5, [r3, #0]
 800215c:	4e1a      	ldr	r6, [pc, #104]	; (80021c8 <drv_led_matrix_draw_alarm_clock_icon+0xa0>)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	0052      	lsls	r2, r2, #1
 8002166:	441a      	add	r2, r3
 8002168:	460b      	mov	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	440b      	add	r3, r1
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	4433      	add	r3, r6
 8002174:	3301      	adds	r3, #1
 8002176:	781e      	ldrb	r6, [r3, #0]
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <drv_led_matrix_draw_alarm_clock_icon+0xa0>)
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	461a      	mov	r2, r3
 8002182:	0052      	lsls	r2, r2, #1
 8002184:	441a      	add	r2, r3
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3302      	adds	r3, #2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4633      	mov	r3, r6
 800219c:	462a      	mov	r2, r5
 800219e:	4621      	mov	r1, r4
 80021a0:	f7ff fd76 	bl	8001c90 <drv_led_matrix_set_led>
        for (int col = 0; col < COLS; col++)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	ddc4      	ble.n	800213a <drv_led_matrix_draw_alarm_clock_icon+0x12>
    for (int row = 0; row < ROWS; row++)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	ddbb      	ble.n	8002134 <drv_led_matrix_draw_alarm_clock_icon+0xc>
        }
    }
    return D_LED_MATRIX_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	0800dfa4 	.word	0x0800dfa4

080021cc <drv_led_matrix_draw_number>:

uint32_t drv_led_matrix_draw_number(uint8_t number, uint8_t row_offset, uint8_t col_offset, uint8_t red, uint8_t green, uint8_t blue)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	4604      	mov	r4, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	4603      	mov	r3, r0
 80021e0:	71bb      	strb	r3, [r7, #6]
 80021e2:	460b      	mov	r3, r1
 80021e4:	717b      	strb	r3, [r7, #5]
 80021e6:	4613      	mov	r3, r2
 80021e8:	713b      	strb	r3, [r7, #4]
    if (number < 0 || number > 99)
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b63      	cmp	r3, #99	; 0x63
 80021ee:	d901      	bls.n	80021f4 <drv_led_matrix_draw_number+0x28>
    {
        return D_LED_MATRIX_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e031      	b.n	8002258 <drv_led_matrix_draw_number+0x8c>
    }

    int tens = number / 10;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <drv_led_matrix_draw_number+0x94>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	60fb      	str	r3, [r7, #12]
    int units = number % 10;
 8002202:	79fa      	ldrb	r2, [r7, #7]
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <drv_led_matrix_draw_number+0x94>)
 8002206:	fba3 1302 	umull	r1, r3, r3, r2
 800220a:	08d9      	lsrs	r1, r3, #3
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	60bb      	str	r3, [r7, #8]

    drv_led_matrix_draw_digit(tens, row_offset, col_offset + 4, red, green, blue);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	3304      	adds	r3, #4
 8002222:	b2da      	uxtb	r2, r3
 8002224:	793c      	ldrb	r4, [r7, #4]
 8002226:	79b9      	ldrb	r1, [r7, #6]
 8002228:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4623      	mov	r3, r4
 8002236:	f7ff fe35 	bl	8001ea4 <drv_led_matrix_draw_digit>
    drv_led_matrix_draw_digit(units, row_offset, col_offset, red, green, blue); // Adjust column offset for the second digit
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	b2d8      	uxtb	r0, r3
 800223e:	793c      	ldrb	r4, [r7, #4]
 8002240:	797a      	ldrb	r2, [r7, #5]
 8002242:	79b9      	ldrb	r1, [r7, #6]
 8002244:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4623      	mov	r3, r4
 8002252:	f7ff fe27 	bl	8001ea4 <drv_led_matrix_draw_digit>

    return D_LED_MATRIX_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	cccccccd 	.word	0xcccccccd

08002264 <drv_led_matrix_draw_number_sec>:

uint32_t drv_led_matrix_draw_number_sec(uint8_t number, uint8_t row_offset, uint8_t col_offset, uint8_t red, uint8_t green, uint8_t blue)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af02      	add	r7, sp, #8
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4623      	mov	r3, r4
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	4603      	mov	r3, r0
 8002278:	71bb      	strb	r3, [r7, #6]
 800227a:	460b      	mov	r3, r1
 800227c:	717b      	strb	r3, [r7, #5]
 800227e:	4613      	mov	r3, r2
 8002280:	713b      	strb	r3, [r7, #4]
    if (number < 0 || number > 99)
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b63      	cmp	r3, #99	; 0x63
 8002286:	d901      	bls.n	800228c <drv_led_matrix_draw_number_sec+0x28>
    {
        return D_LED_MATRIX_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e031      	b.n	80022f0 <drv_led_matrix_draw_number_sec+0x8c>
    }
    int tens = number / 10;
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <drv_led_matrix_draw_number_sec+0x94>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	60fb      	str	r3, [r7, #12]
    int units = number % 10;
 800229a:	79fa      	ldrb	r2, [r7, #7]
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <drv_led_matrix_draw_number_sec+0x94>)
 800229e:	fba3 1302 	umull	r1, r3, r3, r2
 80022a2:	08d9      	lsrs	r1, r3, #3
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	60bb      	str	r3, [r7, #8]

    drv_led_matrix_draw_digit(tens, row_offset, col_offset + 5, red, green, blue);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	797b      	ldrb	r3, [r7, #5]
 80022b8:	3305      	adds	r3, #5
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	793c      	ldrb	r4, [r7, #4]
 80022be:	79b9      	ldrb	r1, [r7, #6]
 80022c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4623      	mov	r3, r4
 80022ce:	f7ff fde9 	bl	8001ea4 <drv_led_matrix_draw_digit>
    drv_led_matrix_draw_digit(units, row_offset, col_offset, red, green, blue); // Adjust column offset for the second digit
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	b2d8      	uxtb	r0, r3
 80022d6:	793c      	ldrb	r4, [r7, #4]
 80022d8:	797a      	ldrb	r2, [r7, #5]
 80022da:	79b9      	ldrb	r1, [r7, #6]
 80022dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4623      	mov	r3, r4
 80022ea:	f7ff fddb 	bl	8001ea4 <drv_led_matrix_draw_digit>

    return D_LED_MATRIX_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	cccccccd 	.word	0xcccccccd

080022fc <drv_led_matrix_draw_time>:

uint32_t drv_led_matrix_draw_time(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t red, uint8_t green, uint8_t blue)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	af02      	add	r7, sp, #8
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4623      	mov	r3, r4
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	4603      	mov	r3, r0
 8002310:	71bb      	strb	r3, [r7, #6]
 8002312:	460b      	mov	r3, r1
 8002314:	717b      	strb	r3, [r7, #5]
 8002316:	4613      	mov	r3, r2
 8002318:	713b      	strb	r3, [r7, #4]
    // Clear the matrix before drawing the new time
    for (int i = 0; i < MAX_LED; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e017      	b.n	8002350 <drv_led_matrix_draw_time+0x54>
    {
        drv_led_matrix_set_led(i / 16, i % 16, 0, 0, 0);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <drv_led_matrix_draw_time+0x2c>
 8002326:	330f      	adds	r3, #15
 8002328:	111b      	asrs	r3, r3, #4
 800232a:	b2d8      	uxtb	r0, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	425a      	negs	r2, r3
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	f002 020f 	and.w	r2, r2, #15
 8002338:	bf58      	it	pl
 800233a:	4253      	negpl	r3, r2
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	2300      	movs	r3, #0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2300      	movs	r3, #0
 8002344:	2200      	movs	r2, #0
 8002346:	f7ff fca3 	bl	8001c90 <drv_led_matrix_set_led>
    for (int i = 0; i < MAX_LED; i++)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002356:	dbe3      	blt.n	8002320 <drv_led_matrix_draw_time+0x24>
    }

    // Draw hours
    drv_led_matrix_draw_number(hours, 2, 9, red, green, blue);
 8002358:	793a      	ldrb	r2, [r7, #4]
 800235a:	79f8      	ldrb	r0, [r7, #7]
 800235c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	2209      	movs	r2, #9
 800236c:	2102      	movs	r1, #2
 800236e:	f7ff ff2d 	bl	80021cc <drv_led_matrix_draw_number>

    // Draw first colon
    // draw_colon(3, 7, red, green, blue);

    // Draw minutes
    drv_led_matrix_draw_number(minutes, 2, 0, red, green, blue);
 8002372:	793a      	ldrb	r2, [r7, #4]
 8002374:	79b8      	ldrb	r0, [r7, #6]
 8002376:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	2200      	movs	r2, #0
 8002386:	2102      	movs	r1, #2
 8002388:	f7ff ff20 	bl	80021cc <drv_led_matrix_draw_number>

    // Draw second colon

    // Draw seconds
    drv_led_matrix_draw_number_sec(seconds, 9, 4, red, green, blue);
 800238c:	793a      	ldrb	r2, [r7, #4]
 800238e:	7978      	ldrb	r0, [r7, #5]
 8002390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	2204      	movs	r2, #4
 80023a0:	2109      	movs	r1, #9
 80023a2:	f7ff ff5f 	bl	8002264 <drv_led_matrix_draw_number_sec>

    return D_LED_MATRIX_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <drv_led_matrix_display_rtc_setting>:
    }
    return D_LED_MATRIX_OK;
}

uint32_t drv_led_matrix_display_rtc_setting(uint8_t set_rtc, uint8_t blink_state)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	71bb      	strb	r3, [r7, #6]
    drv_led_matrix_clear();
 80023c0:	f7ff fc3e 	bl	8001c40 <drv_led_matrix_clear>

    uint8_t red, green, blue;

    // Display hours
    red = ((set_rtc == D_LED_MATRIX_SET_TIME) && blink_state) ? 0 : 255;
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b17      	cmp	r3, #23
 80023c8:	d104      	bne.n	80023d4 <drv_led_matrix_display_rtc_setting+0x24>
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <drv_led_matrix_display_rtc_setting+0x24>
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <drv_led_matrix_display_rtc_setting+0x26>
 80023d4:	23ff      	movs	r3, #255	; 0xff
 80023d6:	73fb      	strb	r3, [r7, #15]
    green = (set_rtc == D_LED_MATRIX_SET_TIME) ? 255 : 0;
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	2b17      	cmp	r3, #23
 80023dc:	d101      	bne.n	80023e2 <drv_led_matrix_display_rtc_setting+0x32>
 80023de:	23ff      	movs	r3, #255	; 0xff
 80023e0:	e000      	b.n	80023e4 <drv_led_matrix_display_rtc_setting+0x34>
 80023e2:	2300      	movs	r3, #0
 80023e4:	73bb      	strb	r3, [r7, #14]
    blue = (set_rtc == D_LED_MATRIX_SET_TIME) ? 255 : 0;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b17      	cmp	r3, #23
 80023ea:	d101      	bne.n	80023f0 <drv_led_matrix_display_rtc_setting+0x40>
 80023ec:	23ff      	movs	r3, #255	; 0xff
 80023ee:	e000      	b.n	80023f2 <drv_led_matrix_display_rtc_setting+0x42>
 80023f0:	2300      	movs	r3, #0
 80023f2:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_string("EMIT", 2, 0, red, green, blue);
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	7b7b      	ldrb	r3, [r7, #13]
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4815      	ldr	r0, [pc, #84]	; (800245c <drv_led_matrix_display_rtc_setting+0xac>)
 8002406:	f7ff fdfb 	bl	8002000 <drv_led_matrix_draw_string>
    // drv_led_matrix_draw_number(hours, 2, 9, red, green, blue);

    // Display minutes
    red = ((set_rtc == D_LED_MATRIX_SET_DATE) && blink_state) ? 0 : 255;
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b18      	cmp	r3, #24
 800240e:	d104      	bne.n	800241a <drv_led_matrix_display_rtc_setting+0x6a>
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <drv_led_matrix_display_rtc_setting+0x6a>
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <drv_led_matrix_display_rtc_setting+0x6c>
 800241a:	23ff      	movs	r3, #255	; 0xff
 800241c:	73fb      	strb	r3, [r7, #15]
    green = (set_rtc == D_LED_MATRIX_SET_DATE) ? 255 : 0;
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b18      	cmp	r3, #24
 8002422:	d101      	bne.n	8002428 <drv_led_matrix_display_rtc_setting+0x78>
 8002424:	23ff      	movs	r3, #255	; 0xff
 8002426:	e000      	b.n	800242a <drv_led_matrix_display_rtc_setting+0x7a>
 8002428:	2300      	movs	r3, #0
 800242a:	73bb      	strb	r3, [r7, #14]
    blue = (set_rtc == D_LED_MATRIX_SET_DATE) ? 255 : 0;
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2b18      	cmp	r3, #24
 8002430:	d101      	bne.n	8002436 <drv_led_matrix_display_rtc_setting+0x86>
 8002432:	23ff      	movs	r3, #255	; 0xff
 8002434:	e000      	b.n	8002438 <drv_led_matrix_display_rtc_setting+0x88>
 8002436:	2300      	movs	r3, #0
 8002438:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_string("ETAD", 9, 0, red, green, blue);
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	7b7b      	ldrb	r3, [r7, #13]
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	7bbb      	ldrb	r3, [r7, #14]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	2200      	movs	r2, #0
 8002448:	2109      	movs	r1, #9
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <drv_led_matrix_display_rtc_setting+0xb0>)
 800244c:	f7ff fdd8 	bl	8002000 <drv_led_matrix_draw_string>
    // drv_led_matrix_draw_number(minutes, 2, 0, red, green, blue);

    return D_LED_MATRIX_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	0800dbd4 	.word	0x0800dbd4
 8002460:	0800dbdc 	.word	0x0800dbdc

08002464 <drv_led_matrix_display_alarm_setting>:

uint32_t drv_led_matrix_display_alarm_setting(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t set_alarm, uint8_t blink_state)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b087      	sub	sp, #28
 8002468:	af02      	add	r7, sp, #8
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4623      	mov	r3, r4
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	4603      	mov	r3, r0
 8002478:	71bb      	strb	r3, [r7, #6]
 800247a:	460b      	mov	r3, r1
 800247c:	717b      	strb	r3, [r7, #5]
 800247e:	4613      	mov	r3, r2
 8002480:	713b      	strb	r3, [r7, #4]
    drv_led_matrix_clear();
 8002482:	f7ff fbdd 	bl	8001c40 <drv_led_matrix_clear>

    uint8_t red, green, blue;

    // Display hours
    red = ((set_alarm == D_LED_MATRIX_ALARM_HOUR || set_alarm == D_LED_MATRIX_ALARM_HOUR_PLUS_ONE) && blink_state) ? 0 : 255;
 8002486:	793b      	ldrb	r3, [r7, #4]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d002      	beq.n	8002492 <drv_led_matrix_display_alarm_setting+0x2e>
 800248c:	793b      	ldrb	r3, [r7, #4]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d105      	bne.n	800249e <drv_led_matrix_display_alarm_setting+0x3a>
 8002492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <drv_led_matrix_display_alarm_setting+0x3a>
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <drv_led_matrix_display_alarm_setting+0x3c>
 800249e:	23ff      	movs	r3, #255	; 0xff
 80024a0:	73fb      	strb	r3, [r7, #15]
    green = (set_alarm == D_LED_MATRIX_ALARM_HOUR || set_alarm == D_LED_MATRIX_ALARM_HOUR_PLUS_ONE) ? 255 : 0;
 80024a2:	793b      	ldrb	r3, [r7, #4]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d002      	beq.n	80024ae <drv_led_matrix_display_alarm_setting+0x4a>
 80024a8:	793b      	ldrb	r3, [r7, #4]
 80024aa:	2b07      	cmp	r3, #7
 80024ac:	d101      	bne.n	80024b2 <drv_led_matrix_display_alarm_setting+0x4e>
 80024ae:	23ff      	movs	r3, #255	; 0xff
 80024b0:	e000      	b.n	80024b4 <drv_led_matrix_display_alarm_setting+0x50>
 80024b2:	2300      	movs	r3, #0
 80024b4:	73bb      	strb	r3, [r7, #14]
    blue = (set_alarm == D_LED_MATRIX_ALARM_HOUR || set_alarm == D_LED_MATRIX_ALARM_HOUR_PLUS_ONE) ? 255 : 0;
 80024b6:	793b      	ldrb	r3, [r7, #4]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d002      	beq.n	80024c2 <drv_led_matrix_display_alarm_setting+0x5e>
 80024bc:	793b      	ldrb	r3, [r7, #4]
 80024be:	2b07      	cmp	r3, #7
 80024c0:	d101      	bne.n	80024c6 <drv_led_matrix_display_alarm_setting+0x62>
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	e000      	b.n	80024c8 <drv_led_matrix_display_alarm_setting+0x64>
 80024c6:	2300      	movs	r3, #0
 80024c8:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(hours, 2, 9, red, green, blue);
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	79f8      	ldrb	r0, [r7, #7]
 80024ce:	7b7b      	ldrb	r3, [r7, #13]
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	2209      	movs	r2, #9
 80024da:	2102      	movs	r1, #2
 80024dc:	f7ff fe76 	bl	80021cc <drv_led_matrix_draw_number>

    // Display minutes
    red = ((set_alarm == D_LED_MATRIX_ALARM_MIN || set_alarm == D_LED_MATRIX_ALARM_MIN_PLUS_ONE) && blink_state) ? 0 : 255;
 80024e0:	793b      	ldrb	r3, [r7, #4]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d002      	beq.n	80024ec <drv_led_matrix_display_alarm_setting+0x88>
 80024e6:	793b      	ldrb	r3, [r7, #4]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d105      	bne.n	80024f8 <drv_led_matrix_display_alarm_setting+0x94>
 80024ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <drv_led_matrix_display_alarm_setting+0x94>
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <drv_led_matrix_display_alarm_setting+0x96>
 80024f8:	23ff      	movs	r3, #255	; 0xff
 80024fa:	73fb      	strb	r3, [r7, #15]
    green = (set_alarm == D_LED_MATRIX_ALARM_MIN || set_alarm == D_LED_MATRIX_ALARM_MIN_PLUS_ONE) ? 255 : 0;
 80024fc:	793b      	ldrb	r3, [r7, #4]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d002      	beq.n	8002508 <drv_led_matrix_display_alarm_setting+0xa4>
 8002502:	793b      	ldrb	r3, [r7, #4]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d101      	bne.n	800250c <drv_led_matrix_display_alarm_setting+0xa8>
 8002508:	23ff      	movs	r3, #255	; 0xff
 800250a:	e000      	b.n	800250e <drv_led_matrix_display_alarm_setting+0xaa>
 800250c:	2300      	movs	r3, #0
 800250e:	73bb      	strb	r3, [r7, #14]
    blue = (set_alarm == D_LED_MATRIX_ALARM_MIN || set_alarm == D_LED_MATRIX_ALARM_MIN_PLUS_ONE) ? 255 : 0;
 8002510:	793b      	ldrb	r3, [r7, #4]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d002      	beq.n	800251c <drv_led_matrix_display_alarm_setting+0xb8>
 8002516:	793b      	ldrb	r3, [r7, #4]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d101      	bne.n	8002520 <drv_led_matrix_display_alarm_setting+0xbc>
 800251c:	23ff      	movs	r3, #255	; 0xff
 800251e:	e000      	b.n	8002522 <drv_led_matrix_display_alarm_setting+0xbe>
 8002520:	2300      	movs	r3, #0
 8002522:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(minutes, 2, 0, red, green, blue);
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	79b8      	ldrb	r0, [r7, #6]
 8002528:	7b7b      	ldrb	r3, [r7, #13]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	2102      	movs	r1, #2
 8002536:	f7ff fe49 	bl	80021cc <drv_led_matrix_draw_number>

    // Display seconds
    red = ((set_alarm == D_LED_MATRIX_ALARM_SEC || set_alarm == D_LED_MATRIX_ALARM_SEC_PLUS_ONE) && blink_state) ? 0 : 255;
 800253a:	793b      	ldrb	r3, [r7, #4]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d002      	beq.n	8002546 <drv_led_matrix_display_alarm_setting+0xe2>
 8002540:	793b      	ldrb	r3, [r7, #4]
 8002542:	2b09      	cmp	r3, #9
 8002544:	d105      	bne.n	8002552 <drv_led_matrix_display_alarm_setting+0xee>
 8002546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <drv_led_matrix_display_alarm_setting+0xee>
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <drv_led_matrix_display_alarm_setting+0xf0>
 8002552:	23ff      	movs	r3, #255	; 0xff
 8002554:	73fb      	strb	r3, [r7, #15]
    green = (set_alarm == D_LED_MATRIX_ALARM_SEC || set_alarm == D_LED_MATRIX_ALARM_SEC_PLUS_ONE) ? 255 : 0;
 8002556:	793b      	ldrb	r3, [r7, #4]
 8002558:	2b06      	cmp	r3, #6
 800255a:	d002      	beq.n	8002562 <drv_led_matrix_display_alarm_setting+0xfe>
 800255c:	793b      	ldrb	r3, [r7, #4]
 800255e:	2b09      	cmp	r3, #9
 8002560:	d101      	bne.n	8002566 <drv_led_matrix_display_alarm_setting+0x102>
 8002562:	23ff      	movs	r3, #255	; 0xff
 8002564:	e000      	b.n	8002568 <drv_led_matrix_display_alarm_setting+0x104>
 8002566:	2300      	movs	r3, #0
 8002568:	73bb      	strb	r3, [r7, #14]
    blue = (set_alarm == D_LED_MATRIX_ALARM_SEC || set_alarm == D_LED_MATRIX_ALARM_SEC_PLUS_ONE) ? 255 : 0;
 800256a:	793b      	ldrb	r3, [r7, #4]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d002      	beq.n	8002576 <drv_led_matrix_display_alarm_setting+0x112>
 8002570:	793b      	ldrb	r3, [r7, #4]
 8002572:	2b09      	cmp	r3, #9
 8002574:	d101      	bne.n	800257a <drv_led_matrix_display_alarm_setting+0x116>
 8002576:	23ff      	movs	r3, #255	; 0xff
 8002578:	e000      	b.n	800257c <drv_led_matrix_display_alarm_setting+0x118>
 800257a:	2300      	movs	r3, #0
 800257c:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number_sec(seconds, 9, 4, red, green, blue);
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	7978      	ldrb	r0, [r7, #5]
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	2204      	movs	r2, #4
 800258e:	2109      	movs	r1, #9
 8002590:	f7ff fe68 	bl	8002264 <drv_led_matrix_draw_number_sec>

    return D_LED_MATRIX_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}

0800259e <drv_led_matrix_display_set_time_setting>:

uint32_t drv_led_matrix_display_set_time_setting(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t set_time, uint8_t blink_state)
{
 800259e:	b590      	push	{r4, r7, lr}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af02      	add	r7, sp, #8
 80025a4:	4604      	mov	r4, r0
 80025a6:	4608      	mov	r0, r1
 80025a8:	4611      	mov	r1, r2
 80025aa:	461a      	mov	r2, r3
 80025ac:	4623      	mov	r3, r4
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4603      	mov	r3, r0
 80025b2:	71bb      	strb	r3, [r7, #6]
 80025b4:	460b      	mov	r3, r1
 80025b6:	717b      	strb	r3, [r7, #5]
 80025b8:	4613      	mov	r3, r2
 80025ba:	713b      	strb	r3, [r7, #4]
    drv_led_matrix_clear();
 80025bc:	f7ff fb40 	bl	8001c40 <drv_led_matrix_clear>

    uint8_t red, green, blue;

    // Display hours
    red = (((set_time == D_LED_MATRIX_SET_TIME_HOUR) || (set_time == D_LED_MATRIX_SET_TIME_HOUR_PLUS_ONE)) && blink_state) ? 0 : 255;
 80025c0:	793b      	ldrb	r3, [r7, #4]
 80025c2:	2b0b      	cmp	r3, #11
 80025c4:	d002      	beq.n	80025cc <drv_led_matrix_display_set_time_setting+0x2e>
 80025c6:	793b      	ldrb	r3, [r7, #4]
 80025c8:	2b0e      	cmp	r3, #14
 80025ca:	d105      	bne.n	80025d8 <drv_led_matrix_display_set_time_setting+0x3a>
 80025cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <drv_led_matrix_display_set_time_setting+0x3a>
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <drv_led_matrix_display_set_time_setting+0x3c>
 80025d8:	23ff      	movs	r3, #255	; 0xff
 80025da:	73fb      	strb	r3, [r7, #15]
    green = (set_time == D_LED_MATRIX_SET_TIME_HOUR || set_time == D_LED_MATRIX_SET_TIME_HOUR_PLUS_ONE) ? 255 : 0;
 80025dc:	793b      	ldrb	r3, [r7, #4]
 80025de:	2b0b      	cmp	r3, #11
 80025e0:	d002      	beq.n	80025e8 <drv_led_matrix_display_set_time_setting+0x4a>
 80025e2:	793b      	ldrb	r3, [r7, #4]
 80025e4:	2b0e      	cmp	r3, #14
 80025e6:	d101      	bne.n	80025ec <drv_led_matrix_display_set_time_setting+0x4e>
 80025e8:	23ff      	movs	r3, #255	; 0xff
 80025ea:	e000      	b.n	80025ee <drv_led_matrix_display_set_time_setting+0x50>
 80025ec:	2300      	movs	r3, #0
 80025ee:	73bb      	strb	r3, [r7, #14]
    blue = (set_time == D_LED_MATRIX_SET_TIME_HOUR || set_time == D_LED_MATRIX_SET_TIME_HOUR_PLUS_ONE) ? 255 : 0;
 80025f0:	793b      	ldrb	r3, [r7, #4]
 80025f2:	2b0b      	cmp	r3, #11
 80025f4:	d002      	beq.n	80025fc <drv_led_matrix_display_set_time_setting+0x5e>
 80025f6:	793b      	ldrb	r3, [r7, #4]
 80025f8:	2b0e      	cmp	r3, #14
 80025fa:	d101      	bne.n	8002600 <drv_led_matrix_display_set_time_setting+0x62>
 80025fc:	23ff      	movs	r3, #255	; 0xff
 80025fe:	e000      	b.n	8002602 <drv_led_matrix_display_set_time_setting+0x64>
 8002600:	2300      	movs	r3, #0
 8002602:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(hours, 2, 9, red, green, blue);
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	79f8      	ldrb	r0, [r7, #7]
 8002608:	7b7b      	ldrb	r3, [r7, #13]
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	2209      	movs	r2, #9
 8002614:	2102      	movs	r1, #2
 8002616:	f7ff fdd9 	bl	80021cc <drv_led_matrix_draw_number>

    // Display minutes
    red = ((set_time == D_LED_MATRIX_SET_TIME_MIN || set_time == D_LED_MATRIX_SET_TIME_MIN_PLUS_ONE) && blink_state) ? 0 : 255;
 800261a:	793b      	ldrb	r3, [r7, #4]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d002      	beq.n	8002626 <drv_led_matrix_display_set_time_setting+0x88>
 8002620:	793b      	ldrb	r3, [r7, #4]
 8002622:	2b0f      	cmp	r3, #15
 8002624:	d105      	bne.n	8002632 <drv_led_matrix_display_set_time_setting+0x94>
 8002626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <drv_led_matrix_display_set_time_setting+0x94>
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <drv_led_matrix_display_set_time_setting+0x96>
 8002632:	23ff      	movs	r3, #255	; 0xff
 8002634:	73fb      	strb	r3, [r7, #15]
    green = (set_time == D_LED_MATRIX_SET_TIME_MIN || set_time == D_LED_MATRIX_SET_TIME_MIN_PLUS_ONE) ? 255 : 0;
 8002636:	793b      	ldrb	r3, [r7, #4]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d002      	beq.n	8002642 <drv_led_matrix_display_set_time_setting+0xa4>
 800263c:	793b      	ldrb	r3, [r7, #4]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	d101      	bne.n	8002646 <drv_led_matrix_display_set_time_setting+0xa8>
 8002642:	23ff      	movs	r3, #255	; 0xff
 8002644:	e000      	b.n	8002648 <drv_led_matrix_display_set_time_setting+0xaa>
 8002646:	2300      	movs	r3, #0
 8002648:	73bb      	strb	r3, [r7, #14]
    blue = (set_time == D_LED_MATRIX_SET_TIME_MIN || set_time == D_LED_MATRIX_SET_TIME_MIN_PLUS_ONE) ? 255 : 0;
 800264a:	793b      	ldrb	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d002      	beq.n	8002656 <drv_led_matrix_display_set_time_setting+0xb8>
 8002650:	793b      	ldrb	r3, [r7, #4]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d101      	bne.n	800265a <drv_led_matrix_display_set_time_setting+0xbc>
 8002656:	23ff      	movs	r3, #255	; 0xff
 8002658:	e000      	b.n	800265c <drv_led_matrix_display_set_time_setting+0xbe>
 800265a:	2300      	movs	r3, #0
 800265c:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(minutes, 2, 0, red, green, blue);
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	79b8      	ldrb	r0, [r7, #6]
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	2200      	movs	r2, #0
 800266e:	2102      	movs	r1, #2
 8002670:	f7ff fdac 	bl	80021cc <drv_led_matrix_draw_number>

    // Display seconds
    red = ((set_time == D_LED_MATRIX_SET_TIME_SEC || set_time == D_LED_MATRIX_SET_TIME_SEC_PLUS_ONE) && blink_state) ? 0 : 255;
 8002674:	793b      	ldrb	r3, [r7, #4]
 8002676:	2b0d      	cmp	r3, #13
 8002678:	d002      	beq.n	8002680 <drv_led_matrix_display_set_time_setting+0xe2>
 800267a:	793b      	ldrb	r3, [r7, #4]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d105      	bne.n	800268c <drv_led_matrix_display_set_time_setting+0xee>
 8002680:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <drv_led_matrix_display_set_time_setting+0xee>
 8002688:	2300      	movs	r3, #0
 800268a:	e000      	b.n	800268e <drv_led_matrix_display_set_time_setting+0xf0>
 800268c:	23ff      	movs	r3, #255	; 0xff
 800268e:	73fb      	strb	r3, [r7, #15]
    green = (set_time == D_LED_MATRIX_SET_TIME_SEC || set_time == D_LED_MATRIX_SET_TIME_SEC_PLUS_ONE) ? 255 : 0;
 8002690:	793b      	ldrb	r3, [r7, #4]
 8002692:	2b0d      	cmp	r3, #13
 8002694:	d002      	beq.n	800269c <drv_led_matrix_display_set_time_setting+0xfe>
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	2b10      	cmp	r3, #16
 800269a:	d101      	bne.n	80026a0 <drv_led_matrix_display_set_time_setting+0x102>
 800269c:	23ff      	movs	r3, #255	; 0xff
 800269e:	e000      	b.n	80026a2 <drv_led_matrix_display_set_time_setting+0x104>
 80026a0:	2300      	movs	r3, #0
 80026a2:	73bb      	strb	r3, [r7, #14]
    blue = (set_time == D_LED_MATRIX_SET_TIME_SEC || set_time == D_LED_MATRIX_SET_TIME_SEC_PLUS_ONE) ? 255 : 0;
 80026a4:	793b      	ldrb	r3, [r7, #4]
 80026a6:	2b0d      	cmp	r3, #13
 80026a8:	d002      	beq.n	80026b0 <drv_led_matrix_display_set_time_setting+0x112>
 80026aa:	793b      	ldrb	r3, [r7, #4]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d101      	bne.n	80026b4 <drv_led_matrix_display_set_time_setting+0x116>
 80026b0:	23ff      	movs	r3, #255	; 0xff
 80026b2:	e000      	b.n	80026b6 <drv_led_matrix_display_set_time_setting+0x118>
 80026b4:	2300      	movs	r3, #0
 80026b6:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number_sec(seconds, 9, 4, red, green, blue);
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	7978      	ldrb	r0, [r7, #5]
 80026bc:	7b7b      	ldrb	r3, [r7, #13]
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	2204      	movs	r2, #4
 80026c8:	2109      	movs	r1, #9
 80026ca:	f7ff fdcb 	bl	8002264 <drv_led_matrix_draw_number_sec>

    return D_LED_MATRIX_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd90      	pop	{r4, r7, pc}

080026d8 <drv_led_matrix_display_set_date_setting>:

uint32_t drv_led_matrix_display_set_date_setting(uint8_t date, uint8_t month, uint8_t year, uint8_t set_date, uint8_t blink_state)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b087      	sub	sp, #28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	4604      	mov	r4, r0
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	4603      	mov	r3, r0
 80026ec:	71bb      	strb	r3, [r7, #6]
 80026ee:	460b      	mov	r3, r1
 80026f0:	717b      	strb	r3, [r7, #5]
 80026f2:	4613      	mov	r3, r2
 80026f4:	713b      	strb	r3, [r7, #4]
    drv_led_matrix_clear();
 80026f6:	f7ff faa3 	bl	8001c40 <drv_led_matrix_clear>

    uint8_t red, green, blue;

    // Display hours
    red = (((set_date == D_LED_MATRIX_SET_TIME_DATE) || (set_date == D_LED_MATRIX_SET_TIME_DATE_PLUS_ONE)) && blink_state) ? 0 : 255;
 80026fa:	793b      	ldrb	r3, [r7, #4]
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d002      	beq.n	8002706 <drv_led_matrix_display_set_date_setting+0x2e>
 8002700:	793b      	ldrb	r3, [r7, #4]
 8002702:	2b14      	cmp	r3, #20
 8002704:	d105      	bne.n	8002712 <drv_led_matrix_display_set_date_setting+0x3a>
 8002706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <drv_led_matrix_display_set_date_setting+0x3a>
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <drv_led_matrix_display_set_date_setting+0x3c>
 8002712:	23ff      	movs	r3, #255	; 0xff
 8002714:	73fb      	strb	r3, [r7, #15]
    green = (set_date == D_LED_MATRIX_SET_TIME_DATE || set_date == D_LED_MATRIX_SET_TIME_DATE_PLUS_ONE) ? 255 : 0;
 8002716:	793b      	ldrb	r3, [r7, #4]
 8002718:	2b11      	cmp	r3, #17
 800271a:	d002      	beq.n	8002722 <drv_led_matrix_display_set_date_setting+0x4a>
 800271c:	793b      	ldrb	r3, [r7, #4]
 800271e:	2b14      	cmp	r3, #20
 8002720:	d101      	bne.n	8002726 <drv_led_matrix_display_set_date_setting+0x4e>
 8002722:	23ff      	movs	r3, #255	; 0xff
 8002724:	e000      	b.n	8002728 <drv_led_matrix_display_set_date_setting+0x50>
 8002726:	2300      	movs	r3, #0
 8002728:	73bb      	strb	r3, [r7, #14]
    blue = (set_date == D_LED_MATRIX_SET_TIME_DATE || set_date == D_LED_MATRIX_SET_TIME_DATE_PLUS_ONE) ? 255 : 0;
 800272a:	793b      	ldrb	r3, [r7, #4]
 800272c:	2b11      	cmp	r3, #17
 800272e:	d002      	beq.n	8002736 <drv_led_matrix_display_set_date_setting+0x5e>
 8002730:	793b      	ldrb	r3, [r7, #4]
 8002732:	2b14      	cmp	r3, #20
 8002734:	d101      	bne.n	800273a <drv_led_matrix_display_set_date_setting+0x62>
 8002736:	23ff      	movs	r3, #255	; 0xff
 8002738:	e000      	b.n	800273c <drv_led_matrix_display_set_date_setting+0x64>
 800273a:	2300      	movs	r3, #0
 800273c:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(date, 2, 9, red, green, blue);
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	79f8      	ldrb	r0, [r7, #7]
 8002742:	7b7b      	ldrb	r3, [r7, #13]
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	7bbb      	ldrb	r3, [r7, #14]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	4613      	mov	r3, r2
 800274c:	2209      	movs	r2, #9
 800274e:	2102      	movs	r1, #2
 8002750:	f7ff fd3c 	bl	80021cc <drv_led_matrix_draw_number>

    // Display minutes
    red = ((set_date == D_LED_MATRIX_SET_TIME_MONTH || set_date == D_LED_MATRIX_SET_TIME_MONTH_PLUS_ONE) && blink_state) ? 0 : 255;
 8002754:	793b      	ldrb	r3, [r7, #4]
 8002756:	2b12      	cmp	r3, #18
 8002758:	d002      	beq.n	8002760 <drv_led_matrix_display_set_date_setting+0x88>
 800275a:	793b      	ldrb	r3, [r7, #4]
 800275c:	2b15      	cmp	r3, #21
 800275e:	d105      	bne.n	800276c <drv_led_matrix_display_set_date_setting+0x94>
 8002760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <drv_led_matrix_display_set_date_setting+0x94>
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <drv_led_matrix_display_set_date_setting+0x96>
 800276c:	23ff      	movs	r3, #255	; 0xff
 800276e:	73fb      	strb	r3, [r7, #15]
    green = (set_date == D_LED_MATRIX_SET_TIME_MONTH || set_date == D_LED_MATRIX_SET_TIME_MONTH_PLUS_ONE) ? 255 : 0;
 8002770:	793b      	ldrb	r3, [r7, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d002      	beq.n	800277c <drv_led_matrix_display_set_date_setting+0xa4>
 8002776:	793b      	ldrb	r3, [r7, #4]
 8002778:	2b15      	cmp	r3, #21
 800277a:	d101      	bne.n	8002780 <drv_led_matrix_display_set_date_setting+0xa8>
 800277c:	23ff      	movs	r3, #255	; 0xff
 800277e:	e000      	b.n	8002782 <drv_led_matrix_display_set_date_setting+0xaa>
 8002780:	2300      	movs	r3, #0
 8002782:	73bb      	strb	r3, [r7, #14]
    blue = (set_date == D_LED_MATRIX_SET_TIME_MONTH || set_date == D_LED_MATRIX_SET_TIME_MONTH_PLUS_ONE) ? 255 : 0;
 8002784:	793b      	ldrb	r3, [r7, #4]
 8002786:	2b12      	cmp	r3, #18
 8002788:	d002      	beq.n	8002790 <drv_led_matrix_display_set_date_setting+0xb8>
 800278a:	793b      	ldrb	r3, [r7, #4]
 800278c:	2b15      	cmp	r3, #21
 800278e:	d101      	bne.n	8002794 <drv_led_matrix_display_set_date_setting+0xbc>
 8002790:	23ff      	movs	r3, #255	; 0xff
 8002792:	e000      	b.n	8002796 <drv_led_matrix_display_set_date_setting+0xbe>
 8002794:	2300      	movs	r3, #0
 8002796:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(month, 2, 0, red, green, blue);
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	79b8      	ldrb	r0, [r7, #6]
 800279c:	7b7b      	ldrb	r3, [r7, #13]
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	2200      	movs	r2, #0
 80027a8:	2102      	movs	r1, #2
 80027aa:	f7ff fd0f 	bl	80021cc <drv_led_matrix_draw_number>

    // Display seconds
    red = ((set_date == D_LED_MATRIX_SET_TIME_YEAR || set_date == D_LED_MATRIX_SET_TIME_YEAR_PLUS_ONE) && blink_state) ? 0 : 255;
 80027ae:	793b      	ldrb	r3, [r7, #4]
 80027b0:	2b13      	cmp	r3, #19
 80027b2:	d002      	beq.n	80027ba <drv_led_matrix_display_set_date_setting+0xe2>
 80027b4:	793b      	ldrb	r3, [r7, #4]
 80027b6:	2b16      	cmp	r3, #22
 80027b8:	d105      	bne.n	80027c6 <drv_led_matrix_display_set_date_setting+0xee>
 80027ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <drv_led_matrix_display_set_date_setting+0xee>
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <drv_led_matrix_display_set_date_setting+0xf0>
 80027c6:	23ff      	movs	r3, #255	; 0xff
 80027c8:	73fb      	strb	r3, [r7, #15]
    green = (set_date == D_LED_MATRIX_SET_TIME_YEAR || set_date == D_LED_MATRIX_SET_TIME_YEAR_PLUS_ONE) ? 255 : 0;
 80027ca:	793b      	ldrb	r3, [r7, #4]
 80027cc:	2b13      	cmp	r3, #19
 80027ce:	d002      	beq.n	80027d6 <drv_led_matrix_display_set_date_setting+0xfe>
 80027d0:	793b      	ldrb	r3, [r7, #4]
 80027d2:	2b16      	cmp	r3, #22
 80027d4:	d101      	bne.n	80027da <drv_led_matrix_display_set_date_setting+0x102>
 80027d6:	23ff      	movs	r3, #255	; 0xff
 80027d8:	e000      	b.n	80027dc <drv_led_matrix_display_set_date_setting+0x104>
 80027da:	2300      	movs	r3, #0
 80027dc:	73bb      	strb	r3, [r7, #14]
    blue = (set_date == D_LED_MATRIX_SET_TIME_YEAR || set_date == D_LED_MATRIX_SET_TIME_YEAR_PLUS_ONE) ? 255 : 0;
 80027de:	793b      	ldrb	r3, [r7, #4]
 80027e0:	2b13      	cmp	r3, #19
 80027e2:	d002      	beq.n	80027ea <drv_led_matrix_display_set_date_setting+0x112>
 80027e4:	793b      	ldrb	r3, [r7, #4]
 80027e6:	2b16      	cmp	r3, #22
 80027e8:	d101      	bne.n	80027ee <drv_led_matrix_display_set_date_setting+0x116>
 80027ea:	23ff      	movs	r3, #255	; 0xff
 80027ec:	e000      	b.n	80027f0 <drv_led_matrix_display_set_date_setting+0x118>
 80027ee:	2300      	movs	r3, #0
 80027f0:	737b      	strb	r3, [r7, #13]
    drv_led_matrix_draw_number(20, 9, 8, red, green, blue);
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	2208      	movs	r2, #8
 8002800:	2109      	movs	r1, #9
 8002802:	2014      	movs	r0, #20
 8002804:	f7ff fce2 	bl	80021cc <drv_led_matrix_draw_number>
    drv_led_matrix_draw_number(year, 9, 0, red, green, blue);
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	7978      	ldrb	r0, [r7, #5]
 800280c:	7b7b      	ldrb	r3, [r7, #13]
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	7bbb      	ldrb	r3, [r7, #14]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	2200      	movs	r2, #0
 8002818:	2109      	movs	r1, #9
 800281a:	f7ff fcd7 	bl	80021cc <drv_led_matrix_draw_number>

    return D_LED_MATRIX_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}

08002828 <drv_led_matrix_set_alarm_interactive>:

uint32_t drv_led_matrix_set_alarm_interactive(d_led_matrix_alarm_status_t set_alarm)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af02      	add	r7, sp, #8
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
    current_time = HAL_GetTick();
 8002832:	f001 fc0f 	bl	8004054 <HAL_GetTick>
 8002836:	4603      	mov	r3, r0
 8002838:	4a71      	ldr	r2, [pc, #452]	; (8002a00 <drv_led_matrix_set_alarm_interactive+0x1d8>)
 800283a:	6013      	str	r3, [r2, #0]

    if (current_time - last_blink_time >= BLINK_INTERVAL)
 800283c:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <drv_led_matrix_set_alarm_interactive+0x1d8>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <drv_led_matrix_set_alarm_interactive+0x1dc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800284a:	4293      	cmp	r3, r2
 800284c:	d30d      	bcc.n	800286a <drv_led_matrix_set_alarm_interactive+0x42>
    {
        blink_state = !blink_state;
 800284e:	4b6e      	ldr	r3, [pc, #440]	; (8002a08 <drv_led_matrix_set_alarm_interactive+0x1e0>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <drv_led_matrix_set_alarm_interactive+0x1e0>)
 8002860:	701a      	strb	r2, [r3, #0]
        last_blink_time = current_time;
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <drv_led_matrix_set_alarm_interactive+0x1d8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <drv_led_matrix_set_alarm_interactive+0x1dc>)
 8002868:	6013      	str	r3, [r2, #0]
    }
    switch (set_alarm)
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	3b04      	subs	r3, #4
 800286e:	2b06      	cmp	r3, #6
 8002870:	f200 8097 	bhi.w	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <drv_led_matrix_set_alarm_interactive+0x54>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	08002899 	.word	0x08002899
 8002880:	080028a1 	.word	0x080028a1
 8002884:	080028a9 	.word	0x080028a9
 8002888:	080028b1 	.word	0x080028b1
 800288c:	080028f3 	.word	0x080028f3
 8002890:	0800293b 	.word	0x0800293b
 8002894:	08002983 	.word	0x08002983
    {
    case D_LED_MATRIX_ALARM_HOUR:
        current_setting = D_LED_MATRIX_ALARM_HOUR;
 8002898:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <drv_led_matrix_set_alarm_interactive+0x1e4>)
 800289a:	2204      	movs	r2, #4
 800289c:	701a      	strb	r2, [r3, #0]
        break;
 800289e:	e080      	b.n	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
    case D_LED_MATRIX_ALARM_MIN:
        current_setting = D_LED_MATRIX_ALARM_MIN;
 80028a0:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <drv_led_matrix_set_alarm_interactive+0x1e4>)
 80028a2:	2205      	movs	r2, #5
 80028a4:	701a      	strb	r2, [r3, #0]
        break;
 80028a6:	e07c      	b.n	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
    case D_LED_MATRIX_ALARM_SEC:
        current_setting = D_LED_MATRIX_ALARM_SEC;
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <drv_led_matrix_set_alarm_interactive+0x1e4>)
 80028aa:	2206      	movs	r2, #6
 80028ac:	701a      	strb	r2, [r3, #0]
        break;
 80028ae:	e078      	b.n	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
    case D_LED_MATRIX_ALARM_HOUR_PLUS_ONE:
        alarms[current_alarm_index].hour = (alarms[current_alarm_index].hour + 1) % 24;
 80028b0:	4b57      	ldr	r3, [pc, #348]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 80028b8:	460b      	mov	r3, r1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	440b      	add	r3, r1
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <drv_led_matrix_set_alarm_interactive+0x1f0>)
 80028c6:	fb83 1302 	smull	r1, r3, r3, r2
 80028ca:	1099      	asrs	r1, r3, #2
 80028cc:	17d3      	asrs	r3, r2, #31
 80028ce:	1ac9      	subs	r1, r1, r3
 80028d0:	460b      	mov	r3, r1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	440b      	add	r3, r1
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1ad1      	subs	r1, r2, r3
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	b2c9      	uxtb	r1, r1
 80028e2:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 80028e4:	4603      	mov	r3, r0
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4403      	add	r3, r0
 80028ea:	4413      	add	r3, r2
 80028ec:	460a      	mov	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
        break;
 80028f0:	e057      	b.n	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
    case D_LED_MATRIX_ALARM_MIN_PLUS_ONE:
        alarms[current_alarm_index].min = (alarms[current_alarm_index].min + 1) % 60;
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 80028fa:	460b      	mov	r3, r1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	440b      	add	r3, r1
 8002900:	4413      	add	r3, r2
 8002902:	3301      	adds	r3, #1
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <drv_led_matrix_set_alarm_interactive+0x1f4>)
 800290a:	fb83 1302 	smull	r1, r3, r3, r2
 800290e:	4413      	add	r3, r2
 8002910:	1159      	asrs	r1, r3, #5
 8002912:	17d3      	asrs	r3, r2, #31
 8002914:	1ac9      	subs	r1, r1, r3
 8002916:	460b      	mov	r3, r1
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a5b      	subs	r3, r3, r1
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	1ad1      	subs	r1, r2, r3
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	b2c9      	uxtb	r1, r1
 8002928:	4a3a      	ldr	r2, [pc, #232]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 800292a:	4603      	mov	r3, r0
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4403      	add	r3, r0
 8002930:	4413      	add	r3, r2
 8002932:	3301      	adds	r3, #1
 8002934:	460a      	mov	r2, r1
 8002936:	701a      	strb	r2, [r3, #0]
        break;
 8002938:	e033      	b.n	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
    case D_LED_MATRIX_ALARM_SEC_PLUS_ONE:
        alarms[current_alarm_index].sec = (alarms[current_alarm_index].sec + 1) % 60;
 800293a:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	4a34      	ldr	r2, [pc, #208]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 8002942:	460b      	mov	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	440b      	add	r3, r1
 8002948:	4413      	add	r3, r2
 800294a:	3302      	adds	r3, #2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <drv_led_matrix_set_alarm_interactive+0x1f4>)
 8002952:	fb83 1302 	smull	r1, r3, r3, r2
 8002956:	4413      	add	r3, r2
 8002958:	1159      	asrs	r1, r3, #5
 800295a:	17d3      	asrs	r3, r2, #31
 800295c:	1ac9      	subs	r1, r1, r3
 800295e:	460b      	mov	r3, r1
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a5b      	subs	r3, r3, r1
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	1ad1      	subs	r1, r2, r3
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	b2c9      	uxtb	r1, r1
 8002970:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 8002972:	4603      	mov	r3, r0
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4403      	add	r3, r0
 8002978:	4413      	add	r3, r2
 800297a:	3302      	adds	r3, #2
 800297c:	460a      	mov	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
        break;
 8002980:	e00f      	b.n	80029a2 <drv_led_matrix_set_alarm_interactive+0x17a>
    case D_LED_MATRIX_ALARM_NEXT:
        current_alarm_index = (current_alarm_index + 1) % MAX_ALARMS;
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <drv_led_matrix_set_alarm_interactive+0x1f8>)
 800298a:	fb83 3102 	smull	r3, r1, r3, r2
 800298e:	17d3      	asrs	r3, r2, #31
 8002990:	1ac9      	subs	r1, r1, r3
 8002992:	460b      	mov	r3, r1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	440b      	add	r3, r1
 8002998:	1ad1      	subs	r1, r2, r3
 800299a:	b2ca      	uxtb	r2, r1
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 800299e:	701a      	strb	r2, [r3, #0]
        break;
 80029a0:	bf00      	nop
    }
    drv_led_matrix_display_alarm_setting(
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 80029aa:	460b      	mov	r3, r1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	440b      	add	r3, r1
 80029b0:	4413      	add	r3, r2
 80029b2:	7818      	ldrb	r0, [r3, #0]
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 80029bc:	460b      	mov	r3, r1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	440b      	add	r3, r1
 80029c2:	4413      	add	r3, r2
 80029c4:	3301      	adds	r3, #1
 80029c6:	7819      	ldrb	r1, [r3, #0]
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <drv_led_matrix_set_alarm_interactive+0x1e8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461c      	mov	r4, r3
 80029ce:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <drv_led_matrix_set_alarm_interactive+0x1ec>)
 80029d0:	4623      	mov	r3, r4
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4423      	add	r3, r4
 80029d6:	4413      	add	r3, r2
 80029d8:	3302      	adds	r3, #2
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <drv_led_matrix_set_alarm_interactive+0x1e0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	79fc      	ldrb	r4, [r7, #7]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7ff fd3d 	bl	8002464 <drv_led_matrix_display_alarm_setting>
        alarms[current_alarm_index].hour,
        alarms[current_alarm_index].min,
        alarms[current_alarm_index].sec,
        set_alarm,
        blink_state);
    drv_led_matrix_set_brightness(1);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff f99c 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 80029f0:	f7ff f9e6 	bl	8001dc0 <drv_led_matrix_ws2812_send>

    return D_LED_MATRIX_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200074d8 	.word	0x200074d8
 8002a04:	200074dc 	.word	0x200074dc
 8002a08:	200074d3 	.word	0x200074d3
 8002a0c:	200074d4 	.word	0x200074d4
 8002a10:	20000007 	.word	0x20000007
 8002a14:	200074e0 	.word	0x200074e0
 8002a18:	2aaaaaab 	.word	0x2aaaaaab
 8002a1c:	88888889 	.word	0x88888889
 8002a20:	55555556 	.word	0x55555556

08002a24 <drv_led_matrix_set_rtc_interactive>:

uint32_t drv_led_matrix_set_rtc_interactive(d_led_matrix_set_time_status_t set_rtc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
    current_time = HAL_GetTick();
 8002a2e:	f001 fb11 	bl	8004054 <HAL_GetTick>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <drv_led_matrix_set_rtc_interactive+0x64>)
 8002a36:	6013      	str	r3, [r2, #0]

    if (current_time - last_blink_time >= BLINK_INTERVAL)
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <drv_led_matrix_set_rtc_interactive+0x64>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <drv_led_matrix_set_rtc_interactive+0x68>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d30d      	bcc.n	8002a66 <drv_led_matrix_set_rtc_interactive+0x42>
    {
        blink_state = !blink_state;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <drv_led_matrix_set_rtc_interactive+0x6c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <drv_led_matrix_set_rtc_interactive+0x6c>)
 8002a5c:	701a      	strb	r2, [r3, #0]
        last_blink_time = current_time;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <drv_led_matrix_set_rtc_interactive+0x64>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <drv_led_matrix_set_rtc_interactive+0x68>)
 8002a64:	6013      	str	r3, [r2, #0]
    }
    drv_led_matrix_display_rtc_setting(set_rtc, blink_state);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <drv_led_matrix_set_rtc_interactive+0x6c>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fc9e 	bl	80023b0 <drv_led_matrix_display_rtc_setting>
    drv_led_matrix_set_brightness(1);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff f957 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8002a7a:	f7ff f9a1 	bl	8001dc0 <drv_led_matrix_ws2812_send>

    return D_LED_MATRIX_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200074d8 	.word	0x200074d8
 8002a8c:	200074dc 	.word	0x200074dc
 8002a90:	200074d3 	.word	0x200074d3

08002a94 <drv_led_matrix_set_time_interactive>:

uint32_t drv_led_matrix_set_time_interactive(d_led_matrix_set_time_status_t set_time)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
    current_time = HAL_GetTick();
 8002a9e:	f001 fad9 	bl	8004054 <HAL_GetTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <drv_led_matrix_set_time_interactive+0x13c>)
 8002aa6:	6013      	str	r3, [r2, #0]

    if (current_time - last_blink_time >= BLINK_INTERVAL)
 8002aa8:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <drv_led_matrix_set_time_interactive+0x13c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <drv_led_matrix_set_time_interactive+0x140>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d30d      	bcc.n	8002ad6 <drv_led_matrix_set_time_interactive+0x42>
    {
        blink_state = !blink_state;
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <drv_led_matrix_set_time_interactive+0x144>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <drv_led_matrix_set_time_interactive+0x144>)
 8002acc:	701a      	strb	r2, [r3, #0]
        last_blink_time = current_time;
 8002ace:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <drv_led_matrix_set_time_interactive+0x13c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	; (8002bd4 <drv_led_matrix_set_time_interactive+0x140>)
 8002ad4:	6013      	str	r3, [r2, #0]
    }
    switch (set_time)
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	3b0b      	subs	r3, #11
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d860      	bhi.n	8002ba0 <drv_led_matrix_set_time_interactive+0x10c>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <drv_led_matrix_set_time_interactive+0x50>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b21 	.word	0x08002b21
 8002aec:	08002b29 	.word	0x08002b29
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b55 	.word	0x08002b55
 8002af8:	08002b7b 	.word	0x08002b7b
 8002afc:	08002ba1 	.word	0x08002ba1
 8002b00:	08002ba1 	.word	0x08002ba1
 8002b04:	08002ba1 	.word	0x08002ba1
 8002b08:	08002ba1 	.word	0x08002ba1
 8002b0c:	08002ba1 	.word	0x08002ba1
 8002b10:	08002ba1 	.word	0x08002ba1
 8002b14:	08002ba1 	.word	0x08002ba1
    {
    case D_LED_MATRIX_SET_TIME_HOUR:
        current_setting = D_LED_MATRIX_SET_TIME_HOUR;
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <drv_led_matrix_set_time_interactive+0x148>)
 8002b1a:	220b      	movs	r2, #11
 8002b1c:	701a      	strb	r2, [r3, #0]
        break;
 8002b1e:	e03f      	b.n	8002ba0 <drv_led_matrix_set_time_interactive+0x10c>
    case D_LED_MATRIX_SET_TIME_MIN:
        current_setting = D_LED_MATRIX_SET_TIME_MIN;
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <drv_led_matrix_set_time_interactive+0x148>)
 8002b22:	220c      	movs	r2, #12
 8002b24:	701a      	strb	r2, [r3, #0]
        break;
 8002b26:	e03b      	b.n	8002ba0 <drv_led_matrix_set_time_interactive+0x10c>
    case D_LED_MATRIX_SET_TIME_SEC:
        current_setting = D_LED_MATRIX_SET_TIME_SEC;
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <drv_led_matrix_set_time_interactive+0x148>)
 8002b2a:	220d      	movs	r2, #13
 8002b2c:	701a      	strb	r2, [r3, #0]
        break;
 8002b2e:	e037      	b.n	8002ba0 <drv_led_matrix_set_time_interactive+0x10c>
    case D_LED_MATRIX_SET_TIME_HOUR_PLUS_ONE:
        set_time_hours = (set_time_hours + 1) % 24;
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <drv_led_matrix_set_time_interactive+0x14c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <drv_led_matrix_set_time_interactive+0x150>)
 8002b38:	fb83 1302 	smull	r1, r3, r3, r2
 8002b3c:	1099      	asrs	r1, r3, #2
 8002b3e:	17d3      	asrs	r3, r2, #31
 8002b40:	1ac9      	subs	r1, r1, r3
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1ad1      	subs	r1, r2, r3
 8002b4c:	b2ca      	uxtb	r2, r1
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <drv_led_matrix_set_time_interactive+0x14c>)
 8002b50:	701a      	strb	r2, [r3, #0]
        break;
 8002b52:	e025      	b.n	8002ba0 <drv_led_matrix_set_time_interactive+0x10c>
    case D_LED_MATRIX_SET_TIME_MIN_PLUS_ONE:
        set_time_minutes = (set_time_minutes + 1) % 60;
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <drv_led_matrix_set_time_interactive+0x154>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <drv_led_matrix_set_time_interactive+0x158>)
 8002b5c:	fb83 1302 	smull	r1, r3, r3, r2
 8002b60:	4413      	add	r3, r2
 8002b62:	1159      	asrs	r1, r3, #5
 8002b64:	17d3      	asrs	r3, r2, #31
 8002b66:	1ac9      	subs	r1, r1, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a5b      	subs	r3, r3, r1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	1ad1      	subs	r1, r2, r3
 8002b72:	b2ca      	uxtb	r2, r1
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <drv_led_matrix_set_time_interactive+0x154>)
 8002b76:	701a      	strb	r2, [r3, #0]
        break;
 8002b78:	e012      	b.n	8002ba0 <drv_led_matrix_set_time_interactive+0x10c>
    case D_LED_MATRIX_SET_TIME_SEC_PLUS_ONE:
        set_time_seconds = (set_time_seconds + 1) % 60;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <drv_led_matrix_set_time_interactive+0x15c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <drv_led_matrix_set_time_interactive+0x158>)
 8002b82:	fb83 1302 	smull	r1, r3, r3, r2
 8002b86:	4413      	add	r3, r2
 8002b88:	1159      	asrs	r1, r3, #5
 8002b8a:	17d3      	asrs	r3, r2, #31
 8002b8c:	1ac9      	subs	r1, r1, r3
 8002b8e:	460b      	mov	r3, r1
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	1ad1      	subs	r1, r2, r3
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <drv_led_matrix_set_time_interactive+0x15c>)
 8002b9c:	701a      	strb	r2, [r3, #0]
        break;
 8002b9e:	bf00      	nop
    case D_LED_MATRIX_SET_TIME:
        break;
    }
    drv_led_matrix_display_set_time_setting(set_time_hours, set_time_minutes, set_time_seconds, set_time, blink_state);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <drv_led_matrix_set_time_interactive+0x14c>)
 8002ba2:	7818      	ldrb	r0, [r3, #0]
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <drv_led_matrix_set_time_interactive+0x154>)
 8002ba6:	7819      	ldrb	r1, [r3, #0]
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <drv_led_matrix_set_time_interactive+0x15c>)
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <drv_led_matrix_set_time_interactive+0x144>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	79fc      	ldrb	r4, [r7, #7]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	f7ff fcf2 	bl	800259e <drv_led_matrix_display_set_time_setting>
    drv_led_matrix_set_brightness(1);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7ff f8b4 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8002bc0:	f7ff f8fe 	bl	8001dc0 <drv_led_matrix_ws2812_send>

    return D_LED_MATRIX_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200074d8 	.word	0x200074d8
 8002bd4:	200074dc 	.word	0x200074dc
 8002bd8:	200074d3 	.word	0x200074d3
 8002bdc:	200074d4 	.word	0x200074d4
 8002be0:	200074d0 	.word	0x200074d0
 8002be4:	2aaaaaab 	.word	0x2aaaaaab
 8002be8:	200074d1 	.word	0x200074d1
 8002bec:	88888889 	.word	0x88888889
 8002bf0:	200074d2 	.word	0x200074d2

08002bf4 <days_in_month>:

int days_in_month(int month, int year)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    switch (month)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	bf8c      	ite	hi
 8002c04:	2201      	movhi	r2, #1
 8002c06:	2200      	movls	r2, #0
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	d147      	bne.n	8002c9e <days_in_month+0xaa>
 8002c0e:	2201      	movs	r2, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	f241 52aa 	movw	r2, #5546	; 0x15aa
 8002c18:	401a      	ands	r2, r3
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2201      	movne	r2, #1
 8002c20:	2200      	moveq	r2, #0
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d112      	bne.n	8002c4e <days_in_month+0x5a>
 8002c28:	f403 6225 	and.w	r2, r3, #2640	; 0xa50
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2201      	movne	r2, #1
 8002c32:	2200      	moveq	r2, #0
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d10b      	bne.n	8002c52 <days_in_month+0x5e>
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <days_in_month+0x62>
 8002c4c:	e027      	b.n	8002c9e <days_in_month+0xaa>
    case 5:
    case 7:
    case 8:
    case 10:
    case 12:
        return 31;
 8002c4e:	231f      	movs	r3, #31
 8002c50:	e026      	b.n	8002ca0 <days_in_month+0xac>
    case 4:
    case 6:
    case 9:
    case 11:
        return 30;
 8002c52:	231e      	movs	r3, #30
 8002c54:	e024      	b.n	8002ca0 <days_in_month+0xac>
    case 2:
        // Leap year check
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <days_in_month+0x86>
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <days_in_month+0xb8>)
 8002c64:	fb83 1302 	smull	r1, r3, r3, r2
 8002c68:	1159      	asrs	r1, r3, #5
 8002c6a:	17d3      	asrs	r3, r2, #31
 8002c6c:	1acb      	subs	r3, r1, r3
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <days_in_month+0xa2>
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <days_in_month+0xb8>)
 8002c7e:	fb83 1302 	smull	r1, r3, r3, r2
 8002c82:	11d9      	asrs	r1, r3, #7
 8002c84:	17d3      	asrs	r3, r2, #31
 8002c86:	1acb      	subs	r3, r1, r3
 8002c88:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <days_in_month+0xa6>
        {
            return 29;
 8002c96:	231d      	movs	r3, #29
 8002c98:	e002      	b.n	8002ca0 <days_in_month+0xac>
        }
        else
        {
            return 28;
 8002c9a:	231c      	movs	r3, #28
 8002c9c:	e000      	b.n	8002ca0 <days_in_month+0xac>
        }
    default:
        return 30; // Default case (should not happen)
 8002c9e:	231e      	movs	r3, #30
    }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	51eb851f 	.word	0x51eb851f

08002cb0 <drv_led_matrix_set_date_interactive>:

uint32_t drv_led_matrix_set_date_interactive(d_led_matrix_set_date_status_t set_date)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
    current_time = HAL_GetTick();
 8002cba:	f001 f9cb 	bl	8004054 <HAL_GetTick>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4a46      	ldr	r2, [pc, #280]	; (8002ddc <drv_led_matrix_set_date_interactive+0x12c>)
 8002cc2:	6013      	str	r3, [r2, #0]

    if (current_time - last_blink_time >= BLINK_INTERVAL)
 8002cc4:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <drv_led_matrix_set_date_interactive+0x12c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b45      	ldr	r3, [pc, #276]	; (8002de0 <drv_led_matrix_set_date_interactive+0x130>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d30d      	bcc.n	8002cf2 <drv_led_matrix_set_date_interactive+0x42>
    {
        blink_state = !blink_state;
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <drv_led_matrix_set_date_interactive+0x134>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <drv_led_matrix_set_date_interactive+0x134>)
 8002ce8:	701a      	strb	r2, [r3, #0]
        last_blink_time = current_time;
 8002cea:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <drv_led_matrix_set_date_interactive+0x12c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <drv_led_matrix_set_date_interactive+0x130>)
 8002cf0:	6013      	str	r3, [r2, #0]
    }
    switch (set_date)
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	3b11      	subs	r3, #17
 8002cf6:	2b07      	cmp	r3, #7
 8002cf8:	d858      	bhi.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <drv_led_matrix_set_date_interactive+0x50>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d21 	.word	0x08002d21
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d6d 	.word	0x08002d6d
 8002d14:	08002d89 	.word	0x08002d89
 8002d18:	08002dad 	.word	0x08002dad
 8002d1c:	08002dad 	.word	0x08002dad
    {
    case D_LED_MATRIX_SET_TIME_DATE:
        current_setting = D_LED_MATRIX_SET_TIME_DATE;
 8002d20:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <drv_led_matrix_set_date_interactive+0x138>)
 8002d22:	2211      	movs	r2, #17
 8002d24:	701a      	strb	r2, [r3, #0]
        break;
 8002d26:	e041      	b.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
    case D_LED_MATRIX_SET_TIME_MONTH:
        current_setting = D_LED_MATRIX_SET_TIME_MONTH;
 8002d28:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <drv_led_matrix_set_date_interactive+0x138>)
 8002d2a:	2212      	movs	r2, #18
 8002d2c:	701a      	strb	r2, [r3, #0]
        break;
 8002d2e:	e03d      	b.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
    case D_LED_MATRIX_SET_TIME_YEAR:
        current_setting = D_LED_MATRIX_SET_TIME_YEAR;
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <drv_led_matrix_set_date_interactive+0x138>)
 8002d32:	2213      	movs	r2, #19
 8002d34:	701a      	strb	r2, [r3, #0]
        break;
 8002d36:	e039      	b.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
    case D_LED_MATRIX_SET_TIME_DATE_PLUS_ONE:
        if (set_time_date == days_in_month(set_time_month, set_time_year))
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <drv_led_matrix_set_date_interactive+0x13c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <drv_led_matrix_set_date_interactive+0x140>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <drv_led_matrix_set_date_interactive+0x144>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f7ff ff52 	bl	8002bf4 <days_in_month>
 8002d50:	4603      	mov	r3, r0
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d103      	bne.n	8002d5e <drv_led_matrix_set_date_interactive+0xae>
        {
            set_time_date = 1;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <drv_led_matrix_set_date_interactive+0x13c>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            set_time_date++;
        }
        break;
 8002d5c:	e026      	b.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
            set_time_date++;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <drv_led_matrix_set_date_interactive+0x13c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <drv_led_matrix_set_date_interactive+0x13c>)
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	e01f      	b.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
    case D_LED_MATRIX_SET_TIME_MONTH_PLUS_ONE:
        set_time_month++;
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <drv_led_matrix_set_date_interactive+0x140>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <drv_led_matrix_set_date_interactive+0x140>)
 8002d76:	701a      	strb	r2, [r3, #0]
        if (set_time_month > 12)
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <drv_led_matrix_set_date_interactive+0x140>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d914      	bls.n	8002daa <drv_led_matrix_set_date_interactive+0xfa>
        {
            set_time_month = 1;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <drv_led_matrix_set_date_interactive+0x140>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002d86:	e010      	b.n	8002daa <drv_led_matrix_set_date_interactive+0xfa>
    case D_LED_MATRIX_SET_TIME_YEAR_PLUS_ONE:
        set_time_year = (set_time_year + 1) % 100;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <drv_led_matrix_set_date_interactive+0x144>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <drv_led_matrix_set_date_interactive+0x148>)
 8002d90:	fb82 1203 	smull	r1, r2, r2, r3
 8002d94:	1151      	asrs	r1, r2, #5
 8002d96:	17da      	asrs	r2, r3, #31
 8002d98:	1a8a      	subs	r2, r1, r2
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	fb01 f202 	mul.w	r2, r1, r2
 8002da0:	1a9a      	subs	r2, r3, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <drv_led_matrix_set_date_interactive+0x144>)
 8002da6:	701a      	strb	r2, [r3, #0]
        break;
 8002da8:	e000      	b.n	8002dac <drv_led_matrix_set_date_interactive+0xfc>
        break;
 8002daa:	bf00      	nop
    case D_LED_MATRIX_SET_DATE:
        break;
    }
    drv_led_matrix_display_set_date_setting(set_time_date, set_time_month, set_time_year, set_date, blink_state);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <drv_led_matrix_set_date_interactive+0x13c>)
 8002dae:	7818      	ldrb	r0, [r3, #0]
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <drv_led_matrix_set_date_interactive+0x140>)
 8002db2:	7819      	ldrb	r1, [r3, #0]
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <drv_led_matrix_set_date_interactive+0x144>)
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <drv_led_matrix_set_date_interactive+0x134>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	79fc      	ldrb	r4, [r7, #7]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	f7ff fc89 	bl	80026d8 <drv_led_matrix_display_set_date_setting>
    drv_led_matrix_set_brightness(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7fe ffae 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8002dcc:	f7fe fff8 	bl	8001dc0 <drv_led_matrix_ws2812_send>

    return D_LED_MATRIX_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200074d8 	.word	0x200074d8
 8002de0:	200074dc 	.word	0x200074dc
 8002de4:	200074d3 	.word	0x200074d3
 8002de8:	200074d4 	.word	0x200074d4
 8002dec:	20000004 	.word	0x20000004
 8002df0:	20000005 	.word	0x20000005
 8002df4:	20000006 	.word	0x20000006
 8002df8:	51eb851f 	.word	0x51eb851f

08002dfc <drv_led_matrix_update_rgb_effect>:

void drv_led_matrix_update_rgb_effect(uint32_t time)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
    uint8_t red, green, blue;

    // Tạo màu sắc RGB thay đổi theo thời gian
    red = (time % 256);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	73bb      	strb	r3, [r7, #14]
    green = ((time + 85) % 256);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3355      	adds	r3, #85	; 0x55
 8002e0e:	737b      	strb	r3, [r7, #13]
    blue = ((time + 170) % 256);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3b56      	subs	r3, #86	; 0x56
 8002e16:	733b      	strb	r3, [r7, #12]

    for (uint8_t col = 0; col < MATRIX_WIDTH; col++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e026      	b.n	8002e6c <drv_led_matrix_update_rgb_effect+0x70>
    {
        // Cập nhật hàng 0
        drv_led_matrix_set_led(0, col, red, green, blue);
 8002e1e:	7b78      	ldrb	r0, [r7, #13]
 8002e20:	7bba      	ldrb	r2, [r7, #14]
 8002e22:	7bf9      	ldrb	r1, [r7, #15]
 8002e24:	7b3b      	ldrb	r3, [r7, #12]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe ff30 	bl	8001c90 <drv_led_matrix_set_led>
        // Cập nhật hàng 1
        drv_led_matrix_set_led(1, col, red, green, blue);
 8002e30:	7b78      	ldrb	r0, [r7, #13]
 8002e32:	7bba      	ldrb	r2, [r7, #14]
 8002e34:	7bf9      	ldrb	r1, [r7, #15]
 8002e36:	7b3b      	ldrb	r3, [r7, #12]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	f7fe ff27 	bl	8001c90 <drv_led_matrix_set_led>
        // Cập nhật hàng 14
        drv_led_matrix_set_led(14, col, red, green, blue);
 8002e42:	7b78      	ldrb	r0, [r7, #13]
 8002e44:	7bba      	ldrb	r2, [r7, #14]
 8002e46:	7bf9      	ldrb	r1, [r7, #15]
 8002e48:	7b3b      	ldrb	r3, [r7, #12]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	200e      	movs	r0, #14
 8002e50:	f7fe ff1e 	bl	8001c90 <drv_led_matrix_set_led>
        // Cập nhật hàng 15
        drv_led_matrix_set_led(15, col, red, green, blue);
 8002e54:	7b78      	ldrb	r0, [r7, #13]
 8002e56:	7bba      	ldrb	r2, [r7, #14]
 8002e58:	7bf9      	ldrb	r1, [r7, #15]
 8002e5a:	7b3b      	ldrb	r3, [r7, #12]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4603      	mov	r3, r0
 8002e60:	200f      	movs	r0, #15
 8002e62:	f7fe ff15 	bl	8001c90 <drv_led_matrix_set_led>
    for (uint8_t col = 0; col < MATRIX_WIDTH; col++)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	d9d5      	bls.n	8002e1e <drv_led_matrix_update_rgb_effect+0x22>
    }
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <drv_matrix_led_digital_clock>:

void drv_matrix_led_digital_clock(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af02      	add	r7, sp, #8
    drv_rtc_get_time();
 8002e82:	f000 f96d 	bl	8003160 <drv_rtc_get_time>

    d_rtc_t *rtc = drv_rtc_get_rtc_ds1307();
 8002e86:	f000 fa87 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 8002e8a:	6078      	str	r0, [r7, #4]

    drv_led_matrix_draw_time(rtc->hour, rtc->min, rtc->sec, 0, 255, 0);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7898      	ldrb	r0, [r3, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7859      	ldrb	r1, [r3, #1]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	23ff      	movs	r3, #255	; 0xff
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f7ff fa2b 	bl	80022fc <drv_led_matrix_draw_time>
    drv_led_matrix_update_rgb_effect(count);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <drv_matrix_led_digital_clock+0x50>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ffa6 	bl	8002dfc <drv_led_matrix_update_rgb_effect>
    count += 10;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <drv_matrix_led_digital_clock+0x50>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330a      	adds	r3, #10
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <drv_matrix_led_digital_clock+0x50>)
 8002eb8:	6013      	str	r3, [r2, #0]
    drv_led_matrix_set_brightness(1);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7fe ff34 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8002ec0:	f7fe ff7e 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200074ec 	.word	0x200074ec

08002ed0 <drv_matrix_led_date_time>:

void drv_matrix_led_date_time(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af02      	add	r7, sp, #8
    drv_led_matrix_clear();
 8002ed6:	f7fe feb3 	bl	8001c40 <drv_led_matrix_clear>
    drv_rtc_get_time();
 8002eda:	f000 f941 	bl	8003160 <drv_rtc_get_time>

    d_rtc_t *rtc = drv_rtc_get_rtc_ds1307();
 8002ede:	f000 fa5b 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 8002ee2:	6078      	str	r0, [r7, #4]

    drv_led_matrix_draw_number(rtc->date, 2, 9, 255, 0, 0);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7918      	ldrb	r0, [r3, #4]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2300      	movs	r3, #0
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	23ff      	movs	r3, #255	; 0xff
 8002ef2:	2209      	movs	r2, #9
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	f7ff f969 	bl	80021cc <drv_led_matrix_draw_number>
    drv_led_matrix_draw_number(rtc->month, 2, 0, 0, 255, 0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7958      	ldrb	r0, [r3, #5]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	23ff      	movs	r3, #255	; 0xff
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	f7ff f95e 	bl	80021cc <drv_led_matrix_draw_number>
    drv_led_matrix_draw_number(20, 9, 8, 0, 0, 255);
 8002f10:	23ff      	movs	r3, #255	; 0xff
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	2109      	movs	r1, #9
 8002f1e:	2014      	movs	r0, #20
 8002f20:	f7ff f954 	bl	80021cc <drv_led_matrix_draw_number>
    drv_led_matrix_draw_number(rtc->year, 9, 0, 255, 255, 255);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7998      	ldrb	r0, [r3, #6]
 8002f28:	23ff      	movs	r3, #255	; 0xff
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	23ff      	movs	r3, #255	; 0xff
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	23ff      	movs	r3, #255	; 0xff
 8002f32:	2200      	movs	r2, #0
 8002f34:	2109      	movs	r1, #9
 8002f36:	f7ff f949 	bl	80021cc <drv_led_matrix_draw_number>
    drv_led_matrix_update_rgb_effect(count);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <drv_matrix_led_date_time+0x90>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff5c 	bl	8002dfc <drv_led_matrix_update_rgb_effect>
    count += 10;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <drv_matrix_led_date_time+0x90>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330a      	adds	r3, #10
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <drv_matrix_led_date_time+0x90>)
 8002f4c:	6013      	str	r3, [r2, #0]
    drv_led_matrix_set_brightness(1);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fe feea 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8002f54:	f7fe ff34 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200074ec 	.word	0x200074ec

08002f64 <drv_matrix_led_trigger_alarm>:

void drv_matrix_led_trigger_alarm(uint8_t alarm_index)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
    drv_led_matrix_clear();
 8002f6e:	f7fe fe67 	bl	8001c40 <drv_led_matrix_clear>
    drv_led_matrix_draw_string("GMO", 1, 4, 255, 0, 0);
 8002f72:	2300      	movs	r3, #0
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2300      	movs	r3, #0
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	23ff      	movs	r3, #255	; 0xff
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	2101      	movs	r1, #1
 8002f80:	480f      	ldr	r0, [pc, #60]	; (8002fc0 <drv_matrix_led_trigger_alarm+0x5c>)
 8002f82:	f7ff f83d 	bl	8002000 <drv_led_matrix_draw_string>
    drv_led_matrix_draw_string("MRALA", 4, 0, 0, 0, 255);
 8002f86:	23ff      	movs	r3, #255	; 0xff
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2200      	movs	r2, #0
 8002f92:	2104      	movs	r1, #4
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <drv_matrix_led_trigger_alarm+0x60>)
 8002f96:	f7ff f833 	bl	8002000 <drv_led_matrix_draw_string>
    drv_led_matrix_draw_digit(alarm_index, 9, 9, 255, 255, 0);
 8002f9a:	79f8      	ldrb	r0, [r7, #7]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	23ff      	movs	r3, #255	; 0xff
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	23ff      	movs	r3, #255	; 0xff
 8002fa6:	2209      	movs	r2, #9
 8002fa8:	2109      	movs	r1, #9
 8002faa:	f7fe ff7b 	bl	8001ea4 <drv_led_matrix_draw_digit>
    drv_led_matrix_set_brightness(10);
 8002fae:	200a      	movs	r0, #10
 8002fb0:	f7fe feba 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8002fb4:	f7fe ff04 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	0800dbe4 	.word	0x0800dbe4
 8002fc4:	0800dbe8 	.word	0x0800dbe8

08002fc8 <drv_matrix_led_check_alarms>:

uint8_t drv_matrix_led_check_alarms(uint8_t current_hour, uint8_t current_minute, uint8_t current_second)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	71bb      	strb	r3, [r7, #6]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = 1; i < MAX_ALARMS; i++)
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e024      	b.n	800302a <drv_matrix_led_check_alarms+0x62>
    {
        if (alarms[i].hour == current_hour &&
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	4917      	ldr	r1, [pc, #92]	; (8003040 <drv_matrix_led_check_alarms+0x78>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d117      	bne.n	8003024 <drv_matrix_led_check_alarms+0x5c>
            alarms[i].min == current_minute &&
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	4912      	ldr	r1, [pc, #72]	; (8003040 <drv_matrix_led_check_alarms+0x78>)
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	440b      	add	r3, r1
 8003000:	3301      	adds	r3, #1
 8003002:	781b      	ldrb	r3, [r3, #0]
        if (alarms[i].hour == current_hour &&
 8003004:	79ba      	ldrb	r2, [r7, #6]
 8003006:	429a      	cmp	r2, r3
 8003008:	d10c      	bne.n	8003024 <drv_matrix_led_check_alarms+0x5c>
            alarms[i].sec == current_second)
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <drv_matrix_led_check_alarms+0x78>)
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	440b      	add	r3, r1
 8003016:	3302      	adds	r3, #2
 8003018:	781b      	ldrb	r3, [r3, #0]
            alarms[i].min == current_minute &&
 800301a:	797a      	ldrb	r2, [r7, #5]
 800301c:	429a      	cmp	r2, r3
 800301e:	d101      	bne.n	8003024 <drv_matrix_led_check_alarms+0x5c>
        {
            return i;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	e006      	b.n	8003032 <drv_matrix_led_check_alarms+0x6a>
    for (uint8_t i = 1; i < MAX_ALARMS; i++)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	3301      	adds	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d9d7      	bls.n	8002fe0 <drv_matrix_led_check_alarms+0x18>
        }
    }
    return 0;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200074e0 	.word	0x200074e0

08003044 <drv_led_matrix_draw_icon>:
uint32_t drv_led_matrix_draw_icon(arr icon_struct)
{
 8003044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003046:	b087      	sub	sp, #28
 8003048:	af02      	add	r7, sp, #8
 800304a:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < ROWS; row++)
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e041      	b.n	80030d6 <drv_led_matrix_draw_icon+0x92>
    {
        for (int col = 0; col < COLS; col++)
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	e038      	b.n	80030ca <drv_led_matrix_draw_icon+0x86>
        {
            drv_led_matrix_set_led(row, col, icon_struct[row][col][0], icon_struct[row][col][1], icon_struct[row][col][2]);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	b2d8      	uxtb	r0, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	b2dc      	uxtb	r4, r3
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1899      	adds	r1, r3, r2
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	440b      	add	r3, r1
 800307a:	781d      	ldrb	r5, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1899      	adds	r1, r3, r2
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	440b      	add	r3, r1
 8003096:	3301      	adds	r3, #1
 8003098:	781e      	ldrb	r6, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1899      	adds	r1, r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	3302      	adds	r3, #2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	4633      	mov	r3, r6
 80030bc:	462a      	mov	r2, r5
 80030be:	4621      	mov	r1, r4
 80030c0:	f7fe fde6 	bl	8001c90 <drv_led_matrix_set_led>
        for (int col = 0; col < COLS; col++)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b0f      	cmp	r3, #15
 80030ce:	ddc3      	ble.n	8003058 <drv_led_matrix_draw_icon+0x14>
    for (int row = 0; row < ROWS; row++)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	ddba      	ble.n	8003052 <drv_led_matrix_draw_icon+0xe>
        }
    }
    return D_LED_MATRIX_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e6 <drv_rtc_bcd_to_dec>:

/* Function definitions ----------------------------------------------- */


uint8_t drv_rtc_bcd_to_dec(uint8_t d_rtc_bcd)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	71fb      	strb	r3, [r7, #7]
  return (d_rtc_bcd >> 4) * 10 + (d_rtc_bcd & 0x0f);
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4413      	add	r3, r2
 800310a:	b2db      	uxtb	r3, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <drv_rtc_dec_to_bcd>:

uint8_t drv_rtc_dec_to_bcd(uint8_t d_rtc_decimal)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  return (d_rtc_decimal / 10) << 4 | (d_rtc_decimal % 10);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <drv_rtc_dec_to_bcd+0x44>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	08db      	lsrs	r3, r3, #3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	b258      	sxtb	r0, r3
 8003132:	79fa      	ldrb	r2, [r7, #7]
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <drv_rtc_dec_to_bcd+0x44>)
 8003136:	fba3 1302 	umull	r1, r3, r3, r2
 800313a:	08d9      	lsrs	r1, r3, #3
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	b25b      	sxtb	r3, r3
 800314a:	4303      	orrs	r3, r0
 800314c:	b25b      	sxtb	r3, r3
 800314e:	b2db      	uxtb	r3, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	cccccccd 	.word	0xcccccccd

08003160 <drv_rtc_get_time>:


uint32_t drv_rtc_get_time(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
  rtc_ds1307.i2c_buf[0] = 0x00;
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <drv_rtc_get_time+0xd4>)
 8003168:	2200      	movs	r2, #0
 800316a:	71da      	strb	r2, [r3, #7]


  bsp_i2c_status_t write_status = bsp_i2c_write_buffer(RTC_ADDRESS, 1);
 800316c:	2101      	movs	r1, #1
 800316e:	20d0      	movs	r0, #208	; 0xd0
 8003170:	f7fd fbe2 	bl	8000938 <bsp_i2c_write_buffer>
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  if (write_status != BSP_I2C_OK)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <drv_rtc_get_time+0x2c>
  {
      if (write_status == BSP_I2C_ERROR_ACK_FAILURE)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d101      	bne.n	8003188 <drv_rtc_get_time+0x28>
      {
          return D_RTC_ERROR_I2C_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e051      	b.n	800322c <drv_rtc_get_time+0xcc>
      }
      else
      {
          return D_RTC_ERROR_I2C_WRITE;
 8003188:	2301      	movs	r3, #1
 800318a:	e04f      	b.n	800322c <drv_rtc_get_time+0xcc>
      }
  }

  bsp_i2c_status_t read_status = bsp_i2c_read_buffer(RTC_ADDRESS, 7);
 800318c:	2107      	movs	r1, #7
 800318e:	20d0      	movs	r0, #208	; 0xd0
 8003190:	f7fd fc10 	bl	80009b4 <bsp_i2c_read_buffer>
 8003194:	4603      	mov	r3, r0
 8003196:	71bb      	strb	r3, [r7, #6]
  if (read_status != BSP_I2C_OK)
 8003198:	79bb      	ldrb	r3, [r7, #6]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <drv_rtc_get_time+0x4c>
  {
      if (read_status == BSP_I2C_ERROR_ACK_FAILURE)
 800319e:	79bb      	ldrb	r3, [r7, #6]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d101      	bne.n	80031a8 <drv_rtc_get_time+0x48>
      {
          return D_RTC_ERROR_I2C_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e041      	b.n	800322c <drv_rtc_get_time+0xcc>
      }
      else
      {
          return D_RTC_ERROR_I2C_READ;
 80031a8:	2302      	movs	r3, #2
 80031aa:	e03f      	b.n	800322c <drv_rtc_get_time+0xcc>
      }
  }

  rtc_ds1307.day = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[3]);
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031ae:	7a9b      	ldrb	r3, [r3, #10]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff98 	bl	80030e6 <drv_rtc_bcd_to_dec>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031bc:	70da      	strb	r2, [r3, #3]

  rtc_ds1307.date = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[4]);
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031c0:	7adb      	ldrb	r3, [r3, #11]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff8f 	bl	80030e6 <drv_rtc_bcd_to_dec>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031ce:	711a      	strb	r2, [r3, #4]
  rtc_ds1307.month = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[5]);
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff86 	bl	80030e6 <drv_rtc_bcd_to_dec>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031e0:	715a      	strb	r2, [r3, #5]
  rtc_ds1307.year = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[6]);
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031e4:	7b5b      	ldrb	r3, [r3, #13]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff7d 	bl	80030e6 <drv_rtc_bcd_to_dec>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031f2:	719a      	strb	r2, [r3, #6]

  rtc_ds1307.sec = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[0]);
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <drv_rtc_get_time+0xd4>)
 80031f6:	79db      	ldrb	r3, [r3, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff74 	bl	80030e6 <drv_rtc_bcd_to_dec>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <drv_rtc_get_time+0xd4>)
 8003204:	701a      	strb	r2, [r3, #0]
  rtc_ds1307.min = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[1]);
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <drv_rtc_get_time+0xd4>)
 8003208:	7a1b      	ldrb	r3, [r3, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff6b 	bl	80030e6 <drv_rtc_bcd_to_dec>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <drv_rtc_get_time+0xd4>)
 8003216:	705a      	strb	r2, [r3, #1]
  rtc_ds1307.hour = drv_rtc_bcd_to_dec(rtc_ds1307.i2c_buf[2]);
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <drv_rtc_get_time+0xd4>)
 800321a:	7a5b      	ldrb	r3, [r3, #9]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff62 	bl	80030e6 <drv_rtc_bcd_to_dec>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b03      	ldr	r3, [pc, #12]	; (8003234 <drv_rtc_get_time+0xd4>)
 8003228:	709a      	strb	r2, [r3, #2]

  return D_RTC_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200074f0 	.word	0x200074f0

08003238 <drv_rtc_set_time>:

uint32_t drv_rtc_set_time(d_rtc_t *set_time, d_rtc_time_format_t time_format)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]

  if (set_time->hour > 23 || set_time->min > 59 || set_time->sec > 59 || set_time->date > 31 || set_time->month > 12)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	789b      	ldrb	r3, [r3, #2]
 8003248:	2b17      	cmp	r3, #23
 800324a:	d80f      	bhi.n	800326c <drv_rtc_set_time+0x34>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	2b3b      	cmp	r3, #59	; 0x3b
 8003252:	d80b      	bhi.n	800326c <drv_rtc_set_time+0x34>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b3b      	cmp	r3, #59	; 0x3b
 800325a:	d807      	bhi.n	800326c <drv_rtc_set_time+0x34>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	791b      	ldrb	r3, [r3, #4]
 8003260:	2b1f      	cmp	r3, #31
 8003262:	d803      	bhi.n	800326c <drv_rtc_set_time+0x34>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	795b      	ldrb	r3, [r3, #5]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	d901      	bls.n	8003270 <drv_rtc_set_time+0x38>
  {
      return D_RTC_ERROR_INVALID_PARAM;
 800326c:	2304      	movs	r3, #4
 800326e:	e08a      	b.n	8003386 <drv_rtc_set_time+0x14e>
  }

  rtc_ds1307.i2c_buf[0] = 0x00;
 8003270:	4b47      	ldr	r3, [pc, #284]	; (8003390 <drv_rtc_set_time+0x158>)
 8003272:	2200      	movs	r2, #0
 8003274:	71da      	strb	r2, [r3, #7]
  rtc_ds1307.i2c_buf[1] = drv_rtc_dec_to_bcd(set_time->sec);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff4c 	bl	8003118 <drv_rtc_dec_to_bcd>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <drv_rtc_set_time+0x158>)
 8003286:	721a      	strb	r2, [r3, #8]
  rtc_ds1307.i2c_buf[2] = drv_rtc_dec_to_bcd(set_time->min);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff43 	bl	8003118 <drv_rtc_dec_to_bcd>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <drv_rtc_set_time+0x158>)
 8003298:	725a      	strb	r2, [r3, #9]

  if (time_format == D_RTC_12_FORMAT)
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d130      	bne.n	8003302 <drv_rtc_set_time+0xca>
  {
      set_time->hour %= 12;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	789a      	ldrb	r2, [r3, #2]
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <drv_rtc_set_time+0x15c>)
 80032a6:	fba3 1302 	umull	r1, r3, r3, r2
 80032aa:	08d9      	lsrs	r1, r3, #3
 80032ac:	460b      	mov	r3, r1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	440b      	add	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	709a      	strb	r2, [r3, #2]
      if (set_time->hour == 0)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	789b      	ldrb	r3, [r3, #2]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <drv_rtc_set_time+0x92>
      {
	  set_time->hour = 12; // ~12 AM
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	220c      	movs	r2, #12
 80032c8:	709a      	strb	r2, [r3, #2]
      }
      rtc_ds1307.i2c_buf[3] = drv_rtc_dec_to_bcd(set_time->hour);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	789b      	ldrb	r3, [r3, #2]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff22 	bl	8003118 <drv_rtc_dec_to_bcd>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <drv_rtc_set_time+0x158>)
 80032da:	729a      	strb	r2, [r3, #10]
      rtc_ds1307.i2c_buf[3] |= 0x40; // set bit 6 = 1 to convert to 12 format
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <drv_rtc_set_time+0x158>)
 80032de:	7a9b      	ldrb	r3, [r3, #10]
 80032e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <drv_rtc_set_time+0x158>)
 80032e8:	729a      	strb	r2, [r3, #10]
      if (set_time->hour >= 12)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	2b0b      	cmp	r3, #11
 80032f0:	d91d      	bls.n	800332e <drv_rtc_set_time+0xf6>
      {
        rtc_ds1307.i2c_buf[3] |= 0x20; // set bit 5 = 1 to show PM
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <drv_rtc_set_time+0x158>)
 80032f4:	7a9b      	ldrb	r3, [r3, #10]
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <drv_rtc_set_time+0x158>)
 80032fe:	729a      	strb	r2, [r3, #10]
 8003300:	e015      	b.n	800332e <drv_rtc_set_time+0xf6>
      }
  }
  else if(time_format == D_RTC_24_FORMAT)
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d109      	bne.n	800331c <drv_rtc_set_time+0xe4>
  {
      rtc_ds1307.i2c_buf[3] = drv_rtc_dec_to_bcd(set_time->hour);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	789b      	ldrb	r3, [r3, #2]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff03 	bl	8003118 <drv_rtc_dec_to_bcd>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <drv_rtc_set_time+0x158>)
 8003318:	729a      	strb	r2, [r3, #10]
 800331a:	e008      	b.n	800332e <drv_rtc_set_time+0xf6>
  }
  else
  {
      rtc_ds1307.i2c_buf[3] = drv_rtc_dec_to_bcd(set_time->hour);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	789b      	ldrb	r3, [r3, #2]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fef9 	bl	8003118 <drv_rtc_dec_to_bcd>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <drv_rtc_set_time+0x158>)
 800332c:	729a      	strb	r2, [r3, #10]
  }

  rtc_ds1307.i2c_buf[5] = drv_rtc_dec_to_bcd(set_time->date);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	791b      	ldrb	r3, [r3, #4]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fef0 	bl	8003118 <drv_rtc_dec_to_bcd>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <drv_rtc_set_time+0x158>)
 800333e:	731a      	strb	r2, [r3, #12]
  rtc_ds1307.i2c_buf[6] = drv_rtc_dec_to_bcd(set_time->month);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	795b      	ldrb	r3, [r3, #5]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fee7 	bl	8003118 <drv_rtc_dec_to_bcd>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <drv_rtc_set_time+0x158>)
 8003350:	735a      	strb	r2, [r3, #13]
  rtc_ds1307.i2c_buf[7] = drv_rtc_dec_to_bcd(set_time->year);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	799b      	ldrb	r3, [r3, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fede 	bl	8003118 <drv_rtc_dec_to_bcd>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <drv_rtc_set_time+0x158>)
 8003362:	739a      	strb	r2, [r3, #14]

  bsp_i2c_status_t write_status = bsp_i2c_write_buffer(RTC_ADDRESS, 8);
 8003364:	2108      	movs	r1, #8
 8003366:	20d0      	movs	r0, #208	; 0xd0
 8003368:	f7fd fae6 	bl	8000938 <bsp_i2c_write_buffer>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
  if (write_status != BSP_I2C_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <drv_rtc_set_time+0x14c>
  {
      if (write_status == BSP_I2C_ERROR_ACK_FAILURE)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d101      	bne.n	8003380 <drv_rtc_set_time+0x148>
      {
          return D_RTC_ERROR_I2C_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e002      	b.n	8003386 <drv_rtc_set_time+0x14e>
      }
      else
      {
          return D_RTC_ERROR_I2C_WRITE;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <drv_rtc_set_time+0x14e>
      }
  }

  return D_RTC_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200074f0 	.word	0x200074f0
 8003394:	aaaaaaab 	.word	0xaaaaaaab

08003398 <drv_rtc_get_rtc_ds1307>:

d_rtc_t* drv_rtc_get_rtc_ds1307(void) {
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return &rtc_ds1307;
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <drv_rtc_get_rtc_ds1307+0x10>)
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	200074f0 	.word	0x200074f0

080033ac <drv_rtc_set_alarm>:
    return D_RTC_OK;
}
#endif

uint32_t drv_rtc_set_alarm(uint8_t alarm_index, d_rtc_alarm_t *set_alarm)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
    if (alarm_index >= MAX_ALARMS || set_alarm->hour >= 24 || set_alarm->min >= 60 || set_alarm->sec >= 60)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d80b      	bhi.n	80033d6 <drv_rtc_set_alarm+0x2a>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b17      	cmp	r3, #23
 80033c4:	d807      	bhi.n	80033d6 <drv_rtc_set_alarm+0x2a>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	2b3b      	cmp	r3, #59	; 0x3b
 80033cc:	d803      	bhi.n	80033d6 <drv_rtc_set_alarm+0x2a>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	789b      	ldrb	r3, [r3, #2]
 80033d2:	2b3b      	cmp	r3, #59	; 0x3b
 80033d4:	d901      	bls.n	80033da <drv_rtc_set_alarm+0x2e>
    {
        return D_RTC_ERROR_INVALID_PARAM;
 80033d6:	2304      	movs	r3, #4
 80033d8:	e01c      	b.n	8003414 <drv_rtc_set_alarm+0x68>
    }

    rtc_alarms[alarm_index].hour = set_alarm->hour;
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	7811      	ldrb	r1, [r2, #0]
 80033e0:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <drv_rtc_set_alarm+0x74>)
 80033e2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    rtc_alarms[alarm_index].min = set_alarm->min;
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	7851      	ldrb	r1, [r2, #1]
 80033ec:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <drv_rtc_set_alarm+0x74>)
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	460a      	mov	r2, r1
 80033f4:	705a      	strb	r2, [r3, #1]
    rtc_alarms[alarm_index].sec = set_alarm->sec;
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	7891      	ldrb	r1, [r2, #2]
 80033fc:	4a08      	ldr	r2, [pc, #32]	; (8003420 <drv_rtc_set_alarm+0x74>)
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	460a      	mov	r2, r1
 8003404:	709a      	strb	r2, [r3, #2]
    rtc_alarms[alarm_index].enabled = D_RTC_ALARM_ENABLED;
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <drv_rtc_set_alarm+0x74>)
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	2206      	movs	r2, #6
 8003410:	70da      	strb	r2, [r3, #3]

    return D_RTC_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	20007500 	.word	0x20007500

08003424 <uart_process_received_data_config_time>:
    }
}
#endif

void uart_process_received_data_config_time(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
    if (size != 25 || data[5] != '-' || data[10] != '-' || data[13] != '-' || data[16] != '-' || data[19] != '-' || data[22] != '-')
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b19      	cmp	r3, #25
 8003436:	d11d      	bne.n	8003474 <uart_process_received_data_config_time+0x50>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3305      	adds	r3, #5
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b2d      	cmp	r3, #45	; 0x2d
 8003440:	d118      	bne.n	8003474 <uart_process_received_data_config_time+0x50>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	330a      	adds	r3, #10
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b2d      	cmp	r3, #45	; 0x2d
 800344a:	d113      	bne.n	8003474 <uart_process_received_data_config_time+0x50>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	330d      	adds	r3, #13
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b2d      	cmp	r3, #45	; 0x2d
 8003454:	d10e      	bne.n	8003474 <uart_process_received_data_config_time+0x50>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3310      	adds	r3, #16
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b2d      	cmp	r3, #45	; 0x2d
 800345e:	d109      	bne.n	8003474 <uart_process_received_data_config_time+0x50>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3313      	adds	r3, #19
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b2d      	cmp	r3, #45	; 0x2d
 8003468:	d104      	bne.n	8003474 <uart_process_received_data_config_time+0x50>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3316      	adds	r3, #22
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b2d      	cmp	r3, #45	; 0x2d
 8003472:	d00d      	beq.n	8003490 <uart_process_received_data_config_time+0x6c>
    {
        const char *error_msg = "Wrong format\r\n";
 8003474:	4b42      	ldr	r3, [pc, #264]	; (8003580 <uart_process_received_data_config_time+0x15c>)
 8003476:	623b      	str	r3, [r7, #32]
        HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8003478:	6a38      	ldr	r0, [r7, #32]
 800347a:	f7fc feb1 	bl	80001e0 <strlen>
 800347e:	4603      	mov	r3, r0
 8003480:	b29a      	uxth	r2, r3
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	6a39      	ldr	r1, [r7, #32]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f006 fd13 	bl	8009eb4 <HAL_UART_Transmit>
 800348e:	e074      	b.n	800357a <uart_process_received_data_config_time+0x156>
        return; // Incorrect format
    }

    d_rtc_t time;
    // time.year = (data[6] - '0') * 1000 + (data[7] - '0') * 100 + (data[8] - '0') * 10 + (data[9] - '0');
    time.year = (data[8] - '0') * 10 + (data[9] - '0');
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3308      	adds	r3, #8
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	4413      	add	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3309      	adds	r3, #9
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75bb      	strb	r3, [r7, #22]
    time.date = (data[11] - '0') * 10 + (data[12] - '0');
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	330b      	adds	r3, #11
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	330c      	adds	r3, #12
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3b10      	subs	r3, #16
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	753b      	strb	r3, [r7, #20]
    time.day = 1;
 80034d0:	2301      	movs	r3, #1
 80034d2:	74fb      	strb	r3, [r7, #19]
    time.hour = (data[17] - '0') * 10 + (data[18] - '0');
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3311      	adds	r3, #17
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	4413      	add	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3312      	adds	r3, #18
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3b10      	subs	r3, #16
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	74bb      	strb	r3, [r7, #18]
    time.min = (data[20] - '0') * 10 + (data[21] - '0');
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	3314      	adds	r3, #20
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	4413      	add	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3315      	adds	r3, #21
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4413      	add	r3, r2
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3b10      	subs	r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	747b      	strb	r3, [r7, #17]
    time.sec = (data[23] - '0') * 10 + (data[24] - '0');
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3317      	adds	r3, #23
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	4413      	add	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3318      	adds	r3, #24
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	4413      	add	r3, r2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3b10      	subs	r3, #16
 8003530:	b2db      	uxtb	r3, r3
 8003532:	743b      	strb	r3, [r7, #16]
    time.month = (data[14] - '0') * 10 + (data[15] - '0');
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	330e      	adds	r3, #14
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	330f      	adds	r3, #15
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	4413      	add	r3, r2
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3b10      	subs	r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	757b      	strb	r3, [r7, #21]
    //    time.min = 10;
    //    time.sec = 10;
    //    time.date = 7; // Default to Monday or adjust if needed
    // drv_rtc_get_rtc_ds1307();
    // Set the time on the DS1307 RTC
    drv_rtc_set_time(&time, D_RTC_24_FORMAT);
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fe6c 	bl	8003238 <drv_rtc_set_time>

    // Send success message
    const char *success_msg = "Config time success\r\n";
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <uart_process_received_data_config_time+0x160>)
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_UART_Transmit(huart, (uint8_t *)success_msg, strlen(success_msg), HAL_MAX_DELAY);
 8003564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003566:	f7fc fe3b 	bl	80001e0 <strlen>
 800356a:	4603      	mov	r3, r0
 800356c:	b29a      	uxth	r2, r3
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f006 fc9d 	bl	8009eb4 <HAL_UART_Transmit>
}
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800dbf0 	.word	0x0800dbf0
 8003584:	0800dc00 	.word	0x0800dc00

08003588 <uart_process_received_data_config_alarm>:
    HAL_UART_Transmit(huart, (uint8_t *)success_msg, strlen(success_msg), HAL_MAX_DELAY);
}
#endif

void uart_process_received_data_config_alarm(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b09a      	sub	sp, #104	; 0x68
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
    if (size != 25 || data[5] != '-' || data[10] != '-' || data[13] != '-' || data[16] != '-' || data[19] != '-' || data[22] != '-')
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b19      	cmp	r3, #25
 800359a:	d11d      	bne.n	80035d8 <uart_process_received_data_config_alarm+0x50>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3305      	adds	r3, #5
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b2d      	cmp	r3, #45	; 0x2d
 80035a4:	d118      	bne.n	80035d8 <uart_process_received_data_config_alarm+0x50>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	330a      	adds	r3, #10
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b2d      	cmp	r3, #45	; 0x2d
 80035ae:	d113      	bne.n	80035d8 <uart_process_received_data_config_alarm+0x50>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	330d      	adds	r3, #13
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b2d      	cmp	r3, #45	; 0x2d
 80035b8:	d10e      	bne.n	80035d8 <uart_process_received_data_config_alarm+0x50>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3310      	adds	r3, #16
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b2d      	cmp	r3, #45	; 0x2d
 80035c2:	d109      	bne.n	80035d8 <uart_process_received_data_config_alarm+0x50>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3313      	adds	r3, #19
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b2d      	cmp	r3, #45	; 0x2d
 80035cc:	d104      	bne.n	80035d8 <uart_process_received_data_config_alarm+0x50>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3316      	adds	r3, #22
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b2d      	cmp	r3, #45	; 0x2d
 80035d6:	d00d      	beq.n	80035f4 <uart_process_received_data_config_alarm+0x6c>
    {
        const char *error_msg = "Wrong format\r\n";
 80035d8:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <uart_process_received_data_config_alarm+0x1c0>)
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
        // memset(error_msg, 0, sizeof(error_msg));
        HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80035dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035de:	f7fc fdff 	bl	80001e0 <strlen>
 80035e2:	4603      	mov	r3, r0
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f006 fc61 	bl	8009eb4 <HAL_UART_Transmit>
        return;
 80035f2:	e0a5      	b.n	8003740 <uart_process_received_data_config_alarm+0x1b8>
    }

    if (alarm_count >= MAX_ALARMS)
 80035f4:	4b55      	ldr	r3, [pc, #340]	; (800374c <uart_process_received_data_config_alarm+0x1c4>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d90d      	bls.n	8003618 <uart_process_received_data_config_alarm+0x90>
    {
        const char *error_msg = "Alarm list full\r\n";
 80035fc:	4b54      	ldr	r3, [pc, #336]	; (8003750 <uart_process_received_data_config_alarm+0x1c8>)
 80035fe:	653b      	str	r3, [r7, #80]	; 0x50
        HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8003600:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003602:	f7fc fded 	bl	80001e0 <strlen>
 8003606:	4603      	mov	r3, r0
 8003608:	b29a      	uxth	r2, r3
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f006 fc4f 	bl	8009eb4 <HAL_UART_Transmit>
        return;
 8003616:	e093      	b.n	8003740 <uart_process_received_data_config_alarm+0x1b8>
    }

    uint8_t alarm_index = alarm_count; // Use the current count as the index
 8003618:	4b4c      	ldr	r3, [pc, #304]	; (800374c <uart_process_received_data_config_alarm+0x1c4>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    d_rtc_alarm_t new_alarm;
    new_alarm.hour = (data[17] - '0') * 10 + (data[18] - '0');
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3311      	adds	r3, #17
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	0092      	lsls	r2, r2, #2
 800362a:	4413      	add	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3312      	adds	r3, #18
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	4413      	add	r3, r2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3b10      	subs	r3, #16
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    new_alarm.min = (data[20] - '0') * 10 + (data[21] - '0');
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3314      	adds	r3, #20
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	4413      	add	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3315      	adds	r3, #21
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4413      	add	r3, r2
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3b10      	subs	r3, #16
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    new_alarm.sec = (data[23] - '0') * 10 + (data[24] - '0');
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3317      	adds	r3, #23
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	0092      	lsls	r2, r2, #2
 800366e:	4413      	add	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3318      	adds	r3, #24
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	4413      	add	r3, r2
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3b10      	subs	r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

    // Set the alarm on the RTC
    uint32_t result = drv_rtc_set_alarm(alarm_index, &new_alarm);
 8003686:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800368a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fe8b 	bl	80033ac <drv_rtc_set_alarm>
 8003696:	6638      	str	r0, [r7, #96]	; 0x60

    if (result != D_RTC_OK)
 8003698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <uart_process_received_data_config_alarm+0x132>
    {
        const char *error_msg = "Failed to set alarm\r\n";
 800369e:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <uart_process_received_data_config_alarm+0x1cc>)
 80036a0:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80036a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80036a4:	f7fc fd9c 	bl	80001e0 <strlen>
 80036a8:	4603      	mov	r3, r0
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f006 fbfe 	bl	8009eb4 <HAL_UART_Transmit>
        return;
 80036b8:	e042      	b.n	8003740 <uart_process_received_data_config_alarm+0x1b8>
    }

    // Save the alarm in the list
    alarms[alarm_index].alarm_time = new_alarm;
 80036ba:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80036be:	4926      	ldr	r1, [pc, #152]	; (8003758 <uart_process_received_data_config_alarm+0x1d0>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	440b      	add	r3, r1
 80036c8:	461a      	mov	r2, r3
 80036ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	6010      	str	r0, [r2, #0]
    alarms[alarm_index].is_set = 1;
 80036d2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80036d6:	4920      	ldr	r1, [pc, #128]	; (8003758 <uart_process_received_data_config_alarm+0x1d0>)
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	440b      	add	r3, r1
 80036e0:	3304      	adds	r3, #4
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
    alarm_count++;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <uart_process_received_data_config_alarm+0x1c4>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <uart_process_received_data_config_alarm+0x1c4>)
 80036f0:	701a      	strb	r2, [r3, #0]

    // Send a success message indicating which alarm was configured
    char success_msg[50];
    int len = snprintf(success_msg, sizeof(success_msg),
 80036f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036f6:	3301      	adds	r3, #1
 80036f8:	f107 0014 	add.w	r0, r7, #20
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <uart_process_received_data_config_alarm+0x1d4>)
 80036fe:	2132      	movs	r1, #50	; 0x32
 8003700:	f009 fd42 	bl	800d188 <sniprintf>
 8003704:	65f8      	str	r0, [r7, #92]	; 0x5c
                       "Config alarm %d success\r\n", alarm_index + 1); // +1 to make it 1-based index

    if (len < 0 || len >= sizeof(success_msg))
 8003706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003708:	2b00      	cmp	r3, #0
 800370a:	db02      	blt.n	8003712 <uart_process_received_data_config_alarm+0x18a>
 800370c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370e:	2b31      	cmp	r3, #49	; 0x31
 8003710:	d90d      	bls.n	800372e <uart_process_received_data_config_alarm+0x1a6>
    {
        // Handle error: message was truncated or formatting failed
        const char *error_msg = "Message format error\r\n";
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <uart_process_received_data_config_alarm+0x1d8>)
 8003714:	65bb      	str	r3, [r7, #88]	; 0x58
        HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8003716:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003718:	f7fc fd62 	bl	80001e0 <strlen>
 800371c:	4603      	mov	r3, r0
 800371e:	b29a      	uxth	r2, r3
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f006 fbc4 	bl	8009eb4 <HAL_UART_Transmit>
    {
 800372c:	e008      	b.n	8003740 <uart_process_received_data_config_alarm+0x1b8>
    }
    else
    {
        // Send the success message
        HAL_UART_Transmit(huart, (uint8_t *)success_msg, len, HAL_MAX_DELAY);
 800372e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003730:	b29a      	uxth	r2, r3
 8003732:	f107 0114 	add.w	r1, r7, #20
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f006 fbba 	bl	8009eb4 <HAL_UART_Transmit>
    }
}
 8003740:	3768      	adds	r7, #104	; 0x68
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	0800dbf0 	.word	0x0800dbf0
 800374c:	20000008 	.word	0x20000008
 8003750:	0800dc18 	.word	0x0800dc18
 8003754:	0800dc2c 	.word	0x0800dc2c
 8003758:	2000750c 	.word	0x2000750c
 800375c:	0800dc44 	.word	0x0800dc44
 8003760:	0800dc60 	.word	0x0800dc60

08003764 <uart_process_transmit_data_get_time>:

void uart_process_transmit_data_get_time(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	b095      	sub	sp, #84	; 0x54
 8003768:	af06      	add	r7, sp, #24
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
    d_rtc_t *rtc = drv_rtc_get_rtc_ds1307();
 8003772:	f7ff fe11 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 8003776:	6378      	str	r0, [r7, #52]	; 0x34
    drv_rtc_get_time();
 8003778:	f7ff fcf2 	bl	8003160 <drv_rtc_get_time>
    char buffer[27];
    int len = snprintf(buffer, sizeof(buffer),
                       "Time: %04d-%02d-%02d %02d:%02d:%02d\r\n",
                       rtc->year,
 800377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377e:	799b      	ldrb	r3, [r3, #6]
    int len = snprintf(buffer, sizeof(buffer),
 8003780:	461e      	mov	r6, r3
                       rtc->month,
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	795b      	ldrb	r3, [r3, #5]
    int len = snprintf(buffer, sizeof(buffer),
 8003786:	461a      	mov	r2, r3
                       rtc->date,
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	791b      	ldrb	r3, [r3, #4]
    int len = snprintf(buffer, sizeof(buffer),
 800378c:	4619      	mov	r1, r3
                       rtc->hour,
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	789b      	ldrb	r3, [r3, #2]
    int len = snprintf(buffer, sizeof(buffer),
 8003792:	461c      	mov	r4, r3
                       rtc->min,
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	785b      	ldrb	r3, [r3, #1]
    int len = snprintf(buffer, sizeof(buffer),
 8003798:	461d      	mov	r5, r3
                       rtc->sec);
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379c:	781b      	ldrb	r3, [r3, #0]
    int len = snprintf(buffer, sizeof(buffer),
 800379e:	f107 0014 	add.w	r0, r7, #20
 80037a2:	9304      	str	r3, [sp, #16]
 80037a4:	9503      	str	r5, [sp, #12]
 80037a6:	9402      	str	r4, [sp, #8]
 80037a8:	9101      	str	r1, [sp, #4]
 80037aa:	9200      	str	r2, [sp, #0]
 80037ac:	4633      	mov	r3, r6
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <uart_process_transmit_data_get_time+0x70>)
 80037b0:	211b      	movs	r1, #27
 80037b2:	f009 fce9 	bl	800d188 <sniprintf>
 80037b6:	6338      	str	r0, [r7, #48]	; 0x30
    HAL_UART_Transmit(huart, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	f107 0114 	add.w	r1, r7, #20
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f006 fb75 	bl	8009eb4 <HAL_UART_Transmit>
}
 80037ca:	bf00      	nop
 80037cc:	373c      	adds	r7, #60	; 0x3c
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d2:	bf00      	nop
 80037d4:	0800dc78 	.word	0x0800dc78

080037d8 <ds1307_notify_alarm>:
    }
}
#endif

uint8_t ds1307_notify_alarm()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	; 0x40
 80037dc:	af00      	add	r7, sp, #0
    d_rtc_t *current_time = drv_rtc_get_rtc_ds1307();
 80037de:	f7ff fddb 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 80037e2:	63b8      	str	r0, [r7, #56]	; 0x38

    for (uint8_t i = 1; i < alarm_count; i++)
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80037ea:	e055      	b.n	8003898 <ds1307_notify_alarm+0xc0>
    {
        if (alarms[i].is_set &&
 80037ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80037f0:	492f      	ldr	r1, [pc, #188]	; (80038b0 <ds1307_notify_alarm+0xd8>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	3304      	adds	r3, #4
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d045      	beq.n	800388e <ds1307_notify_alarm+0xb6>
            current_time->hour == alarms[i].alarm_time.hour &&
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	7899      	ldrb	r1, [r3, #2]
 8003806:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800380a:	4829      	ldr	r0, [pc, #164]	; (80038b0 <ds1307_notify_alarm+0xd8>)
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	4403      	add	r3, r0
 8003814:	781b      	ldrb	r3, [r3, #0]
        if (alarms[i].is_set &&
 8003816:	4299      	cmp	r1, r3
 8003818:	d139      	bne.n	800388e <ds1307_notify_alarm+0xb6>
            current_time->min == alarms[i].alarm_time.min &&
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	7859      	ldrb	r1, [r3, #1]
 800381e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003822:	4823      	ldr	r0, [pc, #140]	; (80038b0 <ds1307_notify_alarm+0xd8>)
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	4403      	add	r3, r0
 800382c:	3301      	adds	r3, #1
 800382e:	781b      	ldrb	r3, [r3, #0]
            current_time->hour == alarms[i].alarm_time.hour &&
 8003830:	4299      	cmp	r1, r3
 8003832:	d12c      	bne.n	800388e <ds1307_notify_alarm+0xb6>
            current_time->sec == alarms[i].alarm_time.sec)
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	7819      	ldrb	r1, [r3, #0]
 8003838:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800383c:	481c      	ldr	r0, [pc, #112]	; (80038b0 <ds1307_notify_alarm+0xd8>)
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	4403      	add	r3, r0
 8003846:	3302      	adds	r3, #2
 8003848:	781b      	ldrb	r3, [r3, #0]
            current_time->min == alarms[i].alarm_time.min &&
 800384a:	4299      	cmp	r1, r3
 800384c:	d11f      	bne.n	800388e <ds1307_notify_alarm+0xb6>
        {

            char alarm_msg[50]; // Adjust the size as needed
            sprintf(alarm_msg, "Alarm %d triggered!\r\n", i + 1);
 800384e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	4917      	ldr	r1, [pc, #92]	; (80038b4 <ds1307_notify_alarm+0xdc>)
 8003858:	4618      	mov	r0, r3
 800385a:	f009 fcc9 	bl	800d1f0 <siprintf>
            // HAL_UART_Transmit(huart, (uint8_t *)alarm_msg, strlen(alarm_msg), HAL_MAX_DELAY);
            bsp_uart_pc_control_send((uint8_t *)alarm_msg, strlen(alarm_msg));
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fcbd 	bl	80001e0 <strlen>
 8003866:	4603      	mov	r3, r0
 8003868:	b29a      	uxth	r2, r3
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f93e 	bl	8000af0 <bsp_uart_pc_control_send>
            alarms[i].is_set = 0; // Clear the alarm after it rings
 8003874:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003878:	490d      	ldr	r1, [pc, #52]	; (80038b0 <ds1307_notify_alarm+0xd8>)
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	440b      	add	r3, r1
 8003882:	3304      	adds	r3, #4
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
            return i;
 8003888:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800388c:	e00b      	b.n	80038a6 <ds1307_notify_alarm+0xce>
    for (uint8_t i = 1; i < alarm_count; i++)
 800388e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003892:	3301      	adds	r3, #1
 8003894:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <ds1307_notify_alarm+0xe0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d3a3      	bcc.n	80037ec <ds1307_notify_alarm+0x14>
        }
    }
    return 0;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3740      	adds	r7, #64	; 0x40
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000750c 	.word	0x2000750c
 80038b4:	0800dca0 	.word	0x0800dca0
 80038b8:	20000008 	.word	0x20000008

080038bc <fft_process>:
 * @brief Processes the FFT from the ADC buffer
 * @param doConvert Flag to indicate whether conversion is needed
 * @param adc_buffer Pointer to ADC buffer containing sampled data
 */
void fft_process(uint32_t *doConvert, uint16_t *adc_buffer)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    if (*doConvert == 0)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 81c3 	bne.w	8003c56 <fft_process+0x39a>
    {
        *doConvert = SAMPLE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d6:	601a      	str	r2, [r3, #0]

        // Copy ADC buffer to input FFT array and initialize output FFT array
        for (int i = 0; i < SAMPLE; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e018      	b.n	8003910 <fft_process+0x54>
        {
            input_fft[i] = (float32_t)adc_buffer[i];
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f0:	4a9a      	ldr	r2, [pc, #616]	; (8003b5c <fft_process+0x2a0>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	edc3 7a00 	vstr	s15, [r3]
            output_fft[i] = 0;
 80038fc:	4a98      	ldr	r2, [pc, #608]	; (8003b60 <fft_process+0x2a4>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < SAMPLE; i++)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3301      	adds	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003916:	dbe2      	blt.n	80038de <fft_process+0x22>
        }

        // Initialize FFT instance
        arm_rfft_fast_init_f32(&fftInstance, SAMPLE);
 8003918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800391c:	4891      	ldr	r0, [pc, #580]	; (8003b64 <fft_process+0x2a8>)
 800391e:	f008 fb2b 	bl	800bf78 <arm_rfft_fast_init_f32>

        // Perform FFT
        arm_rfft_fast_f32(&fftInstance, input_fft, output_fft, 0);
 8003922:	2300      	movs	r3, #0
 8003924:	4a8e      	ldr	r2, [pc, #568]	; (8003b60 <fft_process+0x2a4>)
 8003926:	498d      	ldr	r1, [pc, #564]	; (8003b5c <fft_process+0x2a0>)
 8003928:	488e      	ldr	r0, [pc, #568]	; (8003b64 <fft_process+0x2a8>)
 800392a:	f008 fc0f 	bl	800c14c <arm_rfft_fast_f32>

        // Calculate magnitude of complex numbers
        arm_cmplx_mag_f32(output_fft, input_fft, SAMPLE / 2);
 800392e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003932:	498a      	ldr	r1, [pc, #552]	; (8003b5c <fft_process+0x2a0>)
 8003934:	488a      	ldr	r0, [pc, #552]	; (8003b60 <fft_process+0x2a4>)
 8003936:	f008 ffe5 	bl	800c904 <arm_cmplx_mag_f32>

        // Initialize band values to zero
        for (int i = 0; i < NUM_BANDS; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e007      	b.n	8003950 <fft_process+0x94>
        {
            band_values[i] = 0;
 8003940:	4a89      	ldr	r2, [pc, #548]	; (8003b68 <fft_process+0x2ac>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2100      	movs	r1, #0
 8003946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < NUM_BANDS; i++)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3301      	adds	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	ddf4      	ble.n	8003940 <fft_process+0x84>
        }

        // Sum FFT values into frequency bands
        for (int i = 2; i < (SAMPLE / 2); i++)
 8003956:	2302      	movs	r3, #2
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e177      	b.n	8003c4c <fft_process+0x390>
        {
            if (input_fft[i] > NOISE_THRESHOLD)
 800395c:	4a7f      	ldr	r2, [pc, #508]	; (8003b5c <fft_process+0x2a0>)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800396c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	f340 8167 	ble.w	8003c46 <fft_process+0x38a>
            {
                if (i > 2 && i <= 5)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b02      	cmp	r3, #2
 800397c:	dd12      	ble.n	80039a4 <fft_process+0xe8>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b05      	cmp	r3, #5
 8003982:	dc0f      	bgt.n	80039a4 <fft_process+0xe8>
                    band_values[0] += (int)input_fft[i];
 8003984:	4b78      	ldr	r3, [pc, #480]	; (8003b68 <fft_process+0x2ac>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4974      	ldr	r1, [pc, #464]	; (8003b5c <fft_process+0x2a0>)
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	440a      	add	r2, r1
 8003990:	edd2 7a00 	vldr	s15, [r2]
 8003994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003998:	ee17 2a90 	vmov	r2, s15
 800399c:	4413      	add	r3, r2
 800399e:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <fft_process+0x2ac>)
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e150      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 5 && i <= 8)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	dd12      	ble.n	80039d0 <fft_process+0x114>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	dc0f      	bgt.n	80039d0 <fft_process+0x114>
                    band_values[1] += (int)input_fft[i];
 80039b0:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <fft_process+0x2ac>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4969      	ldr	r1, [pc, #420]	; (8003b5c <fft_process+0x2a0>)
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	440a      	add	r2, r1
 80039bc:	edd2 7a00 	vldr	s15, [r2]
 80039c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c4:	ee17 2a90 	vmov	r2, s15
 80039c8:	4413      	add	r3, r2
 80039ca:	4a67      	ldr	r2, [pc, #412]	; (8003b68 <fft_process+0x2ac>)
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	e13a      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 8 && i <= 12)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	dd12      	ble.n	80039fc <fft_process+0x140>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	dc0f      	bgt.n	80039fc <fft_process+0x140>
                    band_values[2] += (int)input_fft[i];
 80039dc:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <fft_process+0x2ac>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	495e      	ldr	r1, [pc, #376]	; (8003b5c <fft_process+0x2a0>)
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	440a      	add	r2, r1
 80039e8:	edd2 7a00 	vldr	s15, [r2]
 80039ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f0:	ee17 2a90 	vmov	r2, s15
 80039f4:	4413      	add	r3, r2
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <fft_process+0x2ac>)
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	e124      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 12 && i <= 16)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	dd12      	ble.n	8003a28 <fft_process+0x16c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	dc0f      	bgt.n	8003a28 <fft_process+0x16c>
                    band_values[3] += (int)input_fft[i];
 8003a08:	4b57      	ldr	r3, [pc, #348]	; (8003b68 <fft_process+0x2ac>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4953      	ldr	r1, [pc, #332]	; (8003b5c <fft_process+0x2a0>)
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	440a      	add	r2, r1
 8003a14:	edd2 7a00 	vldr	s15, [r2]
 8003a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1c:	ee17 2a90 	vmov	r2, s15
 8003a20:	4413      	add	r3, r2
 8003a22:	4a51      	ldr	r2, [pc, #324]	; (8003b68 <fft_process+0x2ac>)
 8003a24:	60d3      	str	r3, [r2, #12]
 8003a26:	e10e      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 16 && i <= 22)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	dd12      	ble.n	8003a54 <fft_process+0x198>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b16      	cmp	r3, #22
 8003a32:	dc0f      	bgt.n	8003a54 <fft_process+0x198>
                    band_values[4] += (int)input_fft[i];
 8003a34:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <fft_process+0x2ac>)
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	4948      	ldr	r1, [pc, #288]	; (8003b5c <fft_process+0x2a0>)
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	0092      	lsls	r2, r2, #2
 8003a3e:	440a      	add	r2, r1
 8003a40:	edd2 7a00 	vldr	s15, [r2]
 8003a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a48:	ee17 2a90 	vmov	r2, s15
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <fft_process+0x2ac>)
 8003a50:	6113      	str	r3, [r2, #16]
 8003a52:	e0f8      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 22 && i <= 30)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b16      	cmp	r3, #22
 8003a58:	dd12      	ble.n	8003a80 <fft_process+0x1c4>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b1e      	cmp	r3, #30
 8003a5e:	dc0f      	bgt.n	8003a80 <fft_process+0x1c4>
                    band_values[5] += (int)input_fft[i];
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <fft_process+0x2ac>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	493d      	ldr	r1, [pc, #244]	; (8003b5c <fft_process+0x2a0>)
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	0092      	lsls	r2, r2, #2
 8003a6a:	440a      	add	r2, r1
 8003a6c:	edd2 7a00 	vldr	s15, [r2]
 8003a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a74:	ee17 2a90 	vmov	r2, s15
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <fft_process+0x2ac>)
 8003a7c:	6153      	str	r3, [r2, #20]
 8003a7e:	e0e2      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 30 && i <= 40)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b1e      	cmp	r3, #30
 8003a84:	dd12      	ble.n	8003aac <fft_process+0x1f0>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b28      	cmp	r3, #40	; 0x28
 8003a8a:	dc0f      	bgt.n	8003aac <fft_process+0x1f0>
                    band_values[6] += (int)input_fft[i];
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <fft_process+0x2ac>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4932      	ldr	r1, [pc, #200]	; (8003b5c <fft_process+0x2a0>)
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	440a      	add	r2, r1
 8003a98:	edd2 7a00 	vldr	s15, [r2]
 8003a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa0:	ee17 2a90 	vmov	r2, s15
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <fft_process+0x2ac>)
 8003aa8:	6193      	str	r3, [r2, #24]
 8003aaa:	e0cc      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 40 && i <= 52)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b28      	cmp	r3, #40	; 0x28
 8003ab0:	dd12      	ble.n	8003ad8 <fft_process+0x21c>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b34      	cmp	r3, #52	; 0x34
 8003ab6:	dc0f      	bgt.n	8003ad8 <fft_process+0x21c>
                    band_values[7] += (int)input_fft[i];
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <fft_process+0x2ac>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4927      	ldr	r1, [pc, #156]	; (8003b5c <fft_process+0x2a0>)
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	440a      	add	r2, r1
 8003ac4:	edd2 7a00 	vldr	s15, [r2]
 8003ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003acc:	ee17 2a90 	vmov	r2, s15
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <fft_process+0x2ac>)
 8003ad4:	61d3      	str	r3, [r2, #28]
 8003ad6:	e0b6      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 52 && i <= 65)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b34      	cmp	r3, #52	; 0x34
 8003adc:	dd12      	ble.n	8003b04 <fft_process+0x248>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b41      	cmp	r3, #65	; 0x41
 8003ae2:	dc0f      	bgt.n	8003b04 <fft_process+0x248>
                    band_values[8] += (int)input_fft[i];
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <fft_process+0x2ac>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	491c      	ldr	r1, [pc, #112]	; (8003b5c <fft_process+0x2a0>)
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	440a      	add	r2, r1
 8003af0:	edd2 7a00 	vldr	s15, [r2]
 8003af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af8:	ee17 2a90 	vmov	r2, s15
 8003afc:	4413      	add	r3, r2
 8003afe:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <fft_process+0x2ac>)
 8003b00:	6213      	str	r3, [r2, #32]
 8003b02:	e0a0      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 65 && i <= 80)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b41      	cmp	r3, #65	; 0x41
 8003b08:	dd12      	ble.n	8003b30 <fft_process+0x274>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b50      	cmp	r3, #80	; 0x50
 8003b0e:	dc0f      	bgt.n	8003b30 <fft_process+0x274>
                    band_values[9] += (int)input_fft[i];
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <fft_process+0x2ac>)
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	4911      	ldr	r1, [pc, #68]	; (8003b5c <fft_process+0x2a0>)
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	440a      	add	r2, r1
 8003b1c:	edd2 7a00 	vldr	s15, [r2]
 8003b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b24:	ee17 2a90 	vmov	r2, s15
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <fft_process+0x2ac>)
 8003b2c:	6253      	str	r3, [r2, #36]	; 0x24
 8003b2e:	e08a      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 80 && i <= 98)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b50      	cmp	r3, #80	; 0x50
 8003b34:	dd1a      	ble.n	8003b6c <fft_process+0x2b0>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b62      	cmp	r3, #98	; 0x62
 8003b3a:	dc17      	bgt.n	8003b6c <fft_process+0x2b0>
                    band_values[10] += (int)input_fft[i];
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <fft_process+0x2ac>)
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <fft_process+0x2a0>)
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	440a      	add	r2, r1
 8003b48:	edd2 7a00 	vldr	s15, [r2]
 8003b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b50:	ee17 2a90 	vmov	r2, s15
 8003b54:	4413      	add	r3, r2
 8003b56:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <fft_process+0x2ac>)
 8003b58:	6293      	str	r3, [r2, #40]	; 0x28
 8003b5a:	e074      	b.n	8003c46 <fft_process+0x38a>
 8003b5c:	2000751c 	.word	0x2000751c
 8003b60:	2000951c 	.word	0x2000951c
 8003b64:	2000b5dc 	.word	0x2000b5dc
 8003b68:	2000b51c 	.word	0x2000b51c
                else if (i > 98 && i <= 118)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b62      	cmp	r3, #98	; 0x62
 8003b70:	dd12      	ble.n	8003b98 <fft_process+0x2dc>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b76      	cmp	r3, #118	; 0x76
 8003b76:	dc0f      	bgt.n	8003b98 <fft_process+0x2dc>
                    band_values[11] += (int)input_fft[i];
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <fft_process+0x3a4>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4939      	ldr	r1, [pc, #228]	; (8003c64 <fft_process+0x3a8>)
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	0092      	lsls	r2, r2, #2
 8003b82:	440a      	add	r2, r1
 8003b84:	edd2 7a00 	vldr	s15, [r2]
 8003b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b8c:	ee17 2a90 	vmov	r2, s15
 8003b90:	4413      	add	r3, r2
 8003b92:	4a33      	ldr	r2, [pc, #204]	; (8003c60 <fft_process+0x3a4>)
 8003b94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b96:	e056      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 118 && i <= 140)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b76      	cmp	r3, #118	; 0x76
 8003b9c:	dd12      	ble.n	8003bc4 <fft_process+0x308>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b8c      	cmp	r3, #140	; 0x8c
 8003ba2:	dc0f      	bgt.n	8003bc4 <fft_process+0x308>
                    band_values[12] += (int)input_fft[i];
 8003ba4:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <fft_process+0x3a4>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	492e      	ldr	r1, [pc, #184]	; (8003c64 <fft_process+0x3a8>)
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	0092      	lsls	r2, r2, #2
 8003bae:	440a      	add	r2, r1
 8003bb0:	edd2 7a00 	vldr	s15, [r2]
 8003bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <fft_process+0x3a4>)
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	e040      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 140 && i <= 165)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b8c      	cmp	r3, #140	; 0x8c
 8003bc8:	dd12      	ble.n	8003bf0 <fft_process+0x334>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2ba5      	cmp	r3, #165	; 0xa5
 8003bce:	dc0f      	bgt.n	8003bf0 <fft_process+0x334>
                    band_values[13] += (int)input_fft[i];
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <fft_process+0x3a4>)
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	4923      	ldr	r1, [pc, #140]	; (8003c64 <fft_process+0x3a8>)
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	440a      	add	r2, r1
 8003bdc:	edd2 7a00 	vldr	s15, [r2]
 8003be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be4:	ee17 2a90 	vmov	r2, s15
 8003be8:	4413      	add	r3, r2
 8003bea:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <fft_process+0x3a4>)
 8003bec:	6353      	str	r3, [r2, #52]	; 0x34
 8003bee:	e02a      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 165 && i <= 195)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2ba5      	cmp	r3, #165	; 0xa5
 8003bf4:	dd12      	ble.n	8003c1c <fft_process+0x360>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2bc3      	cmp	r3, #195	; 0xc3
 8003bfa:	dc0f      	bgt.n	8003c1c <fft_process+0x360>
                    band_values[14] += (int)input_fft[i];
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <fft_process+0x3a4>)
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	4918      	ldr	r1, [pc, #96]	; (8003c64 <fft_process+0x3a8>)
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	0092      	lsls	r2, r2, #2
 8003c06:	440a      	add	r2, r1
 8003c08:	edd2 7a00 	vldr	s15, [r2]
 8003c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c10:	ee17 2a90 	vmov	r2, s15
 8003c14:	4413      	add	r3, r2
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <fft_process+0x3a4>)
 8003c18:	6393      	str	r3, [r2, #56]	; 0x38
 8003c1a:	e014      	b.n	8003c46 <fft_process+0x38a>
                else if (i > 195 && i <= 255)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2bc3      	cmp	r3, #195	; 0xc3
 8003c20:	dd11      	ble.n	8003c46 <fft_process+0x38a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2bff      	cmp	r3, #255	; 0xff
 8003c26:	dc0e      	bgt.n	8003c46 <fft_process+0x38a>
                    band_values[15] += (int)input_fft[i];
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <fft_process+0x3a4>)
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	490d      	ldr	r1, [pc, #52]	; (8003c64 <fft_process+0x3a8>)
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	0092      	lsls	r2, r2, #2
 8003c32:	440a      	add	r2, r1
 8003c34:	edd2 7a00 	vldr	s15, [r2]
 8003c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c3c:	ee17 2a90 	vmov	r2, s15
 8003c40:	4413      	add	r3, r2
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <fft_process+0x3a4>)
 8003c44:	63d3      	str	r3, [r2, #60]	; 0x3c
        for (int i = 2; i < (SAMPLE / 2); i++)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	f6ff ae83 	blt.w	800395c <fft_process+0xa0>
            }
        }
    }
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000b51c 	.word	0x2000b51c
 8003c64:	2000751c 	.word	0x2000751c

08003c68 <fft_display>:

/**
 * @brief Displays the FFT results on the LED matrix
 */
void fft_display(void)
{
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af02      	add	r7, sp, #8
    for (int band = 0; band < NUM_BANDS; band++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e07f      	b.n	8003d74 <fft_display+0x10c>
    {
        int bar_height = band_values[band] / AMPLITUDE;
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <fft_display+0x158>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	4a51      	ldr	r2, [pc, #324]	; (8003dc4 <fft_display+0x15c>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	613b      	str	r3, [r7, #16]
        if (bar_height > 16)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	dd01      	ble.n	8003c90 <fft_display+0x28>
            bar_height = 16;
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	613b      	str	r3, [r7, #16]

        // Smooth the bar height changes
        bar_height = ((old_bar_heights[band] * 1) + bar_height) / 2;
 8003c90:	4a4d      	ldr	r2, [pc, #308]	; (8003dc8 <fft_display+0x160>)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]

        // Update peak values
        if (bar_height > peak[band])
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <fft_display+0x164>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d208      	bcs.n	8003cc0 <fft_display+0x58>
        {
            peak[band] = min(16, bar_height);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	bfa8      	it	ge
 8003cb4:	2310      	movge	r3, #16
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4a44      	ldr	r2, [pc, #272]	; (8003dcc <fft_display+0x164>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        // Set the LEDs for the current bar height
        for (int y = 0; y < bar_height; y++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e022      	b.n	8003d0c <fft_display+0xa4>
        {
            drv_led_matrix_set_led(y, band, colors[band][0], colors[band][1], colors[band][2]);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	b2d9      	uxtb	r1, r3
 8003cce:	4c40      	ldr	r4, [pc, #256]	; (8003dd0 <fft_display+0x168>)
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4423      	add	r3, r4
 8003cda:	781c      	ldrb	r4, [r3, #0]
 8003cdc:	4d3c      	ldr	r5, [pc, #240]	; (8003dd0 <fft_display+0x168>)
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	442b      	add	r3, r5
 8003ce8:	3301      	adds	r3, #1
 8003cea:	781d      	ldrb	r5, [r3, #0]
 8003cec:	4e38      	ldr	r6, [pc, #224]	; (8003dd0 <fft_display+0x168>)
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4433      	add	r3, r6
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	462b      	mov	r3, r5
 8003d00:	4622      	mov	r2, r4
 8003d02:	f7fd ffc5 	bl	8001c90 <drv_led_matrix_set_led>
        for (int y = 0; y < bar_height; y++)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dbd8      	blt.n	8003cc6 <fft_display+0x5e>
        }

        // Turn off LEDs above the bar height
        for (int y = bar_height; y < 16; y++)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	e00c      	b.n	8003d34 <fft_display+0xcc>
        {
            drv_led_matrix_set_led(y, band, 0, 0, 0);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	b2d8      	uxtb	r0, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	b2d9      	uxtb	r1, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2300      	movs	r3, #0
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f7fd ffb1 	bl	8001c90 <drv_led_matrix_set_led>
        for (int y = bar_height; y < 16; y++)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	ddef      	ble.n	8003d1a <fft_display+0xb2>
        }

        // Highlight the peak value
        if (peak[band] > 0)
 8003d3a:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <fft_display+0x164>)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <fft_display+0xfc>
        {
            drv_led_matrix_set_led(peak[band] - 1, band, 255, 255, 255);
 8003d46:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <fft_display+0x164>)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b2d8      	uxtb	r0, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	b2d9      	uxtb	r1, r3
 8003d58:	23ff      	movs	r3, #255	; 0xff
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	23ff      	movs	r3, #255	; 0xff
 8003d5e:	22ff      	movs	r2, #255	; 0xff
 8003d60:	f7fd ff96 	bl	8001c90 <drv_led_matrix_set_led>
        }

        // Store the current bar height for smoothing in the next iteration
        old_bar_heights[band] = bar_height;
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4918      	ldr	r1, [pc, #96]	; (8003dc8 <fft_display+0x160>)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int band = 0; band < NUM_BANDS; band++)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	3301      	adds	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	f77f af7c 	ble.w	8003c74 <fft_display+0xc>
    }

    // Decrease peak values over time
    for (int band = 0; band < NUM_BANDS; band++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e011      	b.n	8003da6 <fft_display+0x13e>
    {
        if (peak[band] > 0)
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <fft_display+0x164>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <fft_display+0x138>
            peak[band] -= 1;
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <fft_display+0x164>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	1e5a      	subs	r2, r3, #1
 8003d98:	490c      	ldr	r1, [pc, #48]	; (8003dcc <fft_display+0x164>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int band = 0; band < NUM_BANDS; band++)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3301      	adds	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	ddea      	ble.n	8003d82 <fft_display+0x11a>
    }

    // Set brightness and send data to the LED matrix
    drv_led_matrix_set_brightness(2);
 8003dac:	2002      	movs	r0, #2
 8003dae:	f7fd ffbb 	bl	8001d28 <drv_led_matrix_set_brightness>
    drv_led_matrix_ws2812_send();
 8003db2:	f7fe f805 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000b51c 	.word	0x2000b51c
 8003dc4:	10624dd3 	.word	0x10624dd3
 8003dc8:	2000b55c 	.word	0x2000b55c
 8003dcc:	2000b59c 	.word	0x2000b59c
 8003dd0:	0800dd4c 	.word	0x0800dd4c

08003dd4 <fsm_process_received_data>:
#include "drv_uart_mn_rec_data.h"
#include "drv_rtc.h"
#include "drv_dfplayer.h"

void fsm_process_received_data(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
#endif

  rtc_fsm_time_t fsm_state;

  // Determine the FSM state based on the mode
  if (strncmp((char *)data, "stime", 5) == 0)
 8003de2:	2205      	movs	r2, #5
 8003de4:	495d      	ldr	r1, [pc, #372]	; (8003f5c <fsm_process_received_data+0x188>)
 8003de6:	68b8      	ldr	r0, [r7, #8]
 8003de8:	f009 fa2a 	bl	800d240 <strncmp>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <fsm_process_received_data+0x24>
  {
    fsm_state = FSM_SET_TIME;
 8003df2:	2300      	movs	r3, #0
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e065      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "alarm", 5) == 0)
 8003df8:	2205      	movs	r2, #5
 8003dfa:	4959      	ldr	r1, [pc, #356]	; (8003f60 <fsm_process_received_data+0x18c>)
 8003dfc:	68b8      	ldr	r0, [r7, #8]
 8003dfe:	f009 fa1f 	bl	800d240 <strncmp>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <fsm_process_received_data+0x3a>
  {
    fsm_state = FSM_ALARM_TIME;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e05a      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "gtime", 5) == 0)
 8003e0e:	2205      	movs	r2, #5
 8003e10:	4954      	ldr	r1, [pc, #336]	; (8003f64 <fsm_process_received_data+0x190>)
 8003e12:	68b8      	ldr	r0, [r7, #8]
 8003e14:	f009 fa14 	bl	800d240 <strncmp>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <fsm_process_received_data+0x50>
  {
    fsm_state = FSM_GET_TIME;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e04f      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "start", 5) == 0)
 8003e24:	2205      	movs	r2, #5
 8003e26:	4950      	ldr	r1, [pc, #320]	; (8003f68 <fsm_process_received_data+0x194>)
 8003e28:	68b8      	ldr	r0, [r7, #8]
 8003e2a:	f009 fa09 	bl	800d240 <strncmp>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <fsm_process_received_data+0x66>
  {
    fsm_state = FSM_START_SONG;
 8003e34:	2303      	movs	r3, #3
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e044      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "sstop", 5) == 0)
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	494b      	ldr	r1, [pc, #300]	; (8003f6c <fsm_process_received_data+0x198>)
 8003e3e:	68b8      	ldr	r0, [r7, #8]
 8003e40:	f009 f9fe 	bl	800d240 <strncmp>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <fsm_process_received_data+0x7c>
  {
    fsm_state = FSM_STOP_SONG;
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e039      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "snext", 5) == 0)
 8003e50:	2205      	movs	r2, #5
 8003e52:	4947      	ldr	r1, [pc, #284]	; (8003f70 <fsm_process_received_data+0x19c>)
 8003e54:	68b8      	ldr	r0, [r7, #8]
 8003e56:	f009 f9f3 	bl	800d240 <strncmp>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <fsm_process_received_data+0x92>
  {
    fsm_state = FSM_NEXT_SONG;
 8003e60:	2305      	movs	r3, #5
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e02e      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "sprev", 5) == 0)
 8003e66:	2205      	movs	r2, #5
 8003e68:	4942      	ldr	r1, [pc, #264]	; (8003f74 <fsm_process_received_data+0x1a0>)
 8003e6a:	68b8      	ldr	r0, [r7, #8]
 8003e6c:	f009 f9e8 	bl	800d240 <strncmp>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <fsm_process_received_data+0xa8>
  {
    fsm_state = FSM_PREVIOUS_SONG;
 8003e76:	2306      	movs	r3, #6
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e023      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "volup", 5) == 0)
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	493e      	ldr	r1, [pc, #248]	; (8003f78 <fsm_process_received_data+0x1a4>)
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f009 f9dd 	bl	800d240 <strncmp>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <fsm_process_received_data+0xbe>
  {
    fsm_state = FSM_VOLUME_UP;
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e018      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else if (strncmp((char *)data, "voldw", 5) == 0)
 8003e92:	2205      	movs	r2, #5
 8003e94:	4939      	ldr	r1, [pc, #228]	; (8003f7c <fsm_process_received_data+0x1a8>)
 8003e96:	68b8      	ldr	r0, [r7, #8]
 8003e98:	f009 f9d2 	bl	800d240 <strncmp>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <fsm_process_received_data+0xd4>
  {
    fsm_state = FSM_VOLUME_DOWN;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e00d      	b.n	8003ec4 <fsm_process_received_data+0xf0>
  }
  else
  {
    const char *error_msg = "Unknown mode\r\n";
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <fsm_process_received_data+0x1ac>)
 8003eaa:	61bb      	str	r3, [r7, #24]
    HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8003eac:	69b8      	ldr	r0, [r7, #24]
 8003eae:	f7fc f997 	bl	80001e0 <strlen>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	69b9      	ldr	r1, [r7, #24]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f005 fff9 	bl	8009eb4 <HAL_UART_Transmit>
    return;
 8003ec2:	e047      	b.n	8003f54 <fsm_process_received_data+0x180>
  time.ds1307_minute = (data[20] - '0') * 10 + (data[21] - '0');
  time.ds1307_second = (data[23] - '0') * 10 + (data[24] - '0');
  time.ds1307_day = 1; // Default to Monday or adjust if needed
#endif

  switch (fsm_state)
 8003ec4:	7ffb      	ldrb	r3, [r7, #31]
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d835      	bhi.n	8003f36 <fsm_process_received_data+0x162>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <fsm_process_received_data+0xfc>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003f03 	.word	0x08003f03
 8003ed8:	08003f11 	.word	0x08003f11
 8003edc:	08003f1f 	.word	0x08003f1f
 8003ee0:	08003f25 	.word	0x08003f25
 8003ee4:	08003f2b 	.word	0x08003f2b
 8003ee8:	08003f31 	.word	0x08003f31
 8003eec:	08003f53 	.word	0x08003f53
 8003ef0:	08003f53 	.word	0x08003f53
  {
  case FSM_SET_TIME:
    uart_process_received_data_config_time(huart, (uint8_t *)data, size);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fa92 	bl	8003424 <uart_process_received_data_config_time>
    break;
 8003f00:	e028      	b.n	8003f54 <fsm_process_received_data+0x180>

  case FSM_ALARM_TIME:
    uart_process_received_data_config_alarm(huart, (uint8_t *)data, size);
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	461a      	mov	r2, r3
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fb3d 	bl	8003588 <uart_process_received_data_config_alarm>
    break;
 8003f0e:	e021      	b.n	8003f54 <fsm_process_received_data+0x180>

  case FSM_GET_TIME:
    uart_process_transmit_data_get_time(huart, (uint8_t *)data, size);
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fc24 	bl	8003764 <uart_process_transmit_data_get_time>
    break;
 8003f1c:	e01a      	b.n	8003f54 <fsm_process_received_data+0x180>

  case FSM_START_SONG:
    // Handle start song
    drv_df_playfromstart();
 8003f1e:	f7fd fd65 	bl	80019ec <drv_df_playfromstart>
    break;
 8003f22:	e017      	b.n	8003f54 <fsm_process_received_data+0x180>

  case FSM_STOP_SONG:
    // Handle stop song
    drv_df_pause();
 8003f24:	f7fd fda7 	bl	8001a76 <drv_df_pause>
    break;
 8003f28:	e014      	b.n	8003f54 <fsm_process_received_data+0x180>

  case FSM_NEXT_SONG:
    // Handle next song
    drv_df_next();
 8003f2a:	f7fd fd97 	bl	8001a5c <drv_df_next>
    break;
 8003f2e:	e011      	b.n	8003f54 <fsm_process_received_data+0x180>

  case FSM_PREVIOUS_SONG:
    // Handle previous song
    drv_df_previous();
 8003f30:	f7fd fdae 	bl	8001a90 <drv_df_previous>
    break;
 8003f34:	e00e      	b.n	8003f54 <fsm_process_received_data+0x180>
  case FSM_VOLUME_DOWN:
    // Handle volume down
    break;

  default:
    const char *error_msg_default = "Unhandled FSM state\r\n";
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <fsm_process_received_data+0x1b0>)
 8003f38:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(huart, (uint8_t *)error_msg_default, strlen(error_msg_default), HAL_MAX_DELAY);
 8003f3a:	6978      	ldr	r0, [r7, #20]
 8003f3c:	f7fc f950 	bl	80001e0 <strlen>
 8003f40:	4603      	mov	r3, r0
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	6979      	ldr	r1, [r7, #20]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f005 ffb2 	bl	8009eb4 <HAL_UART_Transmit>
    break;
 8003f50:	e000      	b.n	8003f54 <fsm_process_received_data+0x180>
    break;
 8003f52:	bf00      	nop
  }
}
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	0800dcb8 	.word	0x0800dcb8
 8003f60:	0800dcc0 	.word	0x0800dcc0
 8003f64:	0800dcc8 	.word	0x0800dcc8
 8003f68:	0800dcd0 	.word	0x0800dcd0
 8003f6c:	0800dcd8 	.word	0x0800dcd8
 8003f70:	0800dce0 	.word	0x0800dce0
 8003f74:	0800dce8 	.word	0x0800dce8
 8003f78:	0800dcf0 	.word	0x0800dcf0
 8003f7c:	0800dcf8 	.word	0x0800dcf8
 8003f80:	0800dd00 	.word	0x0800dd00
 8003f84:	0800dd10 	.word	0x0800dd10

08003f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_Init+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0d      	ldr	r2, [pc, #52]	; (8003fc8 <HAL_Init+0x40>)
 8003f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_Init+0x40>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <HAL_Init+0x40>)
 8003f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fa4:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_Init+0x40>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <HAL_Init+0x40>)
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	f000 fd51 	bl	8004a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fb6:	200f      	movs	r0, #15
 8003fb8:	f000 f808 	bl	8003fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fbc:	f7fd f8f8 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023c00 	.word	0x40023c00

08003fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_InitTick+0x54>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_InitTick+0x58>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fd69 	bl	8004ac2 <HAL_SYSTICK_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00e      	b.n	8004018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b0f      	cmp	r3, #15
 8003ffe:	d80a      	bhi.n	8004016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004000:	2200      	movs	r2, #0
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	f000 fd31 	bl	8004a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800400c:	4a06      	ldr	r2, [pc, #24]	; (8004028 <HAL_InitTick+0x5c>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000000 	.word	0x20000000
 8004024:	20000010 	.word	0x20000010
 8004028:	2000000c 	.word	0x2000000c

0800402c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_IncTick+0x20>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_IncTick+0x24>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4413      	add	r3, r2
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_IncTick+0x24>)
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000010 	.word	0x20000010
 8004050:	2000b5f4 	.word	0x2000b5f4

08004054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return uwTick;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_GetTick+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	2000b5f4 	.word	0x2000b5f4

0800406c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004074:	f7ff ffee 	bl	8004054 <HAL_GetTick>
 8004078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d005      	beq.n	8004092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_Delay+0x44>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004092:	bf00      	nop
 8004094:	f7ff ffde 	bl	8004054 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d8f7      	bhi.n	8004094 <HAL_Delay+0x28>
  {
  }
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000010 	.word	0x20000010

080040b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e033      	b.n	8004132 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd f894 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040fa:	f023 0302 	bic.w	r3, r3, #2
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa58 	bl	80045bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
 8004122:	e001      	b.n	8004128 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_ADC_Start_DMA+0x1e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ce      	b.n	80042f8 <HAL_ADC_Start_DMA+0x1bc>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d018      	beq.n	80041a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004180:	4b5f      	ldr	r3, [pc, #380]	; (8004300 <HAL_ADC_Start_DMA+0x1c4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5f      	ldr	r2, [pc, #380]	; (8004304 <HAL_ADC_Start_DMA+0x1c8>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9a      	lsrs	r2, r3, #18
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004194:	e002      	b.n	800419c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3b01      	subs	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f9      	bne.n	8004196 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b0:	d107      	bne.n	80041c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f040 8086 	bne.w	80042de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004210:	d106      	bne.n	8004220 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f023 0206 	bic.w	r2, r3, #6
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
 800421e:	e002      	b.n	8004226 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800422e:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_ADC_Start_DMA+0x1cc>)
 8004230:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	4a35      	ldr	r2, [pc, #212]	; (800430c <HAL_ADC_Start_DMA+0x1d0>)
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	4a34      	ldr	r2, [pc, #208]	; (8004310 <HAL_ADC_Start_DMA+0x1d4>)
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4a33      	ldr	r2, [pc, #204]	; (8004314 <HAL_ADC_Start_DMA+0x1d8>)
 8004248:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004252:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004262:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004272:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	334c      	adds	r3, #76	; 0x4c
 800427e:	4619      	mov	r1, r3
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f000 fcd8 	bl	8004c38 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d129      	bne.n	80042f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	e020      	b.n	80042f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_ADC_Start_DMA+0x1dc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d11b      	bne.n	80042f6 <HAL_ADC_Start_DMA+0x1ba>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d114      	bne.n	80042f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	e00b      	b.n	80042f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0210 	orr.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000000 	.word	0x20000000
 8004304:	431bde83 	.word	0x431bde83
 8004308:	40012300 	.word	0x40012300
 800430c:	080047b5 	.word	0x080047b5
 8004310:	0800486f 	.word	0x0800486f
 8004314:	0800488b 	.word	0x0800488b
 8004318:	40012000 	.word	0x40012000

0800431c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x1c>
 8004370:	2302      	movs	r3, #2
 8004372:	e113      	b.n	800459c <HAL_ADC_ConfigChannel+0x244>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b09      	cmp	r3, #9
 8004382:	d925      	bls.n	80043d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	3b1e      	subs	r3, #30
 800439a:	2207      	movs	r2, #7
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43da      	mvns	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	400a      	ands	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68d9      	ldr	r1, [r3, #12]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	4603      	mov	r3, r0
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4403      	add	r3, r0
 80043c2:	3b1e      	subs	r3, #30
 80043c4:	409a      	lsls	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	e022      	b.n	8004416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	2207      	movs	r2, #7
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43da      	mvns	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	400a      	ands	r2, r1
 80043f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6919      	ldr	r1, [r3, #16]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4618      	mov	r0, r3
 8004406:	4603      	mov	r3, r0
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4403      	add	r3, r0
 800440c:	409a      	lsls	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b06      	cmp	r3, #6
 800441c:	d824      	bhi.n	8004468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b05      	subs	r3, #5
 8004430:	221f      	movs	r2, #31
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43da      	mvns	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	400a      	ands	r2, r1
 800443e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	4618      	mov	r0, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	3b05      	subs	r3, #5
 800445a:	fa00 f203 	lsl.w	r2, r0, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	635a      	str	r2, [r3, #52]	; 0x34
 8004466:	e04c      	b.n	8004502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d824      	bhi.n	80044ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	3b23      	subs	r3, #35	; 0x23
 8004482:	221f      	movs	r2, #31
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43da      	mvns	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	400a      	ands	r2, r1
 8004490:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	4618      	mov	r0, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	3b23      	subs	r3, #35	; 0x23
 80044ac:	fa00 f203 	lsl.w	r2, r0, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
 80044b8:	e023      	b.n	8004502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3b41      	subs	r3, #65	; 0x41
 80044cc:	221f      	movs	r2, #31
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43da      	mvns	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	400a      	ands	r2, r1
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4618      	mov	r0, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	3b41      	subs	r3, #65	; 0x41
 80044f6:	fa00 f203 	lsl.w	r2, r0, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004502:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_ADC_ConfigChannel+0x250>)
 8004504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a28      	ldr	r2, [pc, #160]	; (80045ac <HAL_ADC_ConfigChannel+0x254>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10f      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1d8>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b12      	cmp	r3, #18
 8004516:	d10b      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_ADC_ConfigChannel+0x254>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d12b      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x23a>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_ADC_ConfigChannel+0x258>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <HAL_ADC_ConfigChannel+0x1f4>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b11      	cmp	r3, #17
 800454a:	d122      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <HAL_ADC_ConfigChannel+0x258>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d111      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <HAL_ADC_ConfigChannel+0x260>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	0c9a      	lsrs	r2, r3, #18
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004584:	e002      	b.n	800458c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f9      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40012300 	.word	0x40012300
 80045ac:	40012000 	.word	0x40012000
 80045b0:	10000012 	.word	0x10000012
 80045b4:	20000000 	.word	0x20000000
 80045b8:	431bde83 	.word	0x431bde83

080045bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c4:	4b79      	ldr	r3, [pc, #484]	; (80047ac <ADC_Init+0x1f0>)
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	021a      	lsls	r2, r3, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6899      	ldr	r1, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	4a58      	ldr	r2, [pc, #352]	; (80047b0 <ADC_Init+0x1f4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6899      	ldr	r1, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	e00f      	b.n	80046ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0202 	bic.w	r2, r2, #2
 80046c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6899      	ldr	r1, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7e1b      	ldrb	r3, [r3, #24]
 80046d4:	005a      	lsls	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01b      	beq.n	8004720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	3b01      	subs	r3, #1
 8004714:	035a      	lsls	r2, r3, #13
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	e007      	b.n	8004730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	3b01      	subs	r3, #1
 800474c:	051a      	lsls	r2, r3, #20
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6899      	ldr	r1, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004772:	025a      	lsls	r2, r3, #9
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	029a      	lsls	r2, r3, #10
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40012300 	.word	0x40012300
 80047b0:	0f000001 	.word	0x0f000001

080047b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d13c      	bne.n	8004848 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d12b      	bne.n	8004840 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d127      	bne.n	8004840 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d006      	beq.n	800480c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004808:	2b00      	cmp	r3, #0
 800480a:	d119      	bne.n	8004840 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0220 	bic.w	r2, r2, #32
 800481a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff fd6b 	bl	800431c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004846:	e00e      	b.n	8004866 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fd75 	bl	8004344 <HAL_ADC_ErrorCallback>
}
 800485a:	e004      	b.n	8004866 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fd57 	bl	8004330 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2240      	movs	r2, #64	; 0x40
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff fd4a 	bl	8004344 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <__NVIC_SetPriorityGrouping+0x44>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048d4:	4013      	ands	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ea:	4a04      	ldr	r2, [pc, #16]	; (80048fc <__NVIC_SetPriorityGrouping+0x44>)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	60d3      	str	r3, [r2, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <__NVIC_GetPriorityGrouping+0x18>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	f003 0307 	and.w	r3, r3, #7
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	2b00      	cmp	r3, #0
 800492c:	db0b      	blt.n	8004946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	f003 021f 	and.w	r2, r3, #31
 8004934:	4907      	ldr	r1, [pc, #28]	; (8004954 <__NVIC_EnableIRQ+0x38>)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2001      	movs	r0, #1
 800493e:	fa00 f202 	lsl.w	r2, r0, r2
 8004942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000e100 	.word	0xe000e100

08004958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	2b00      	cmp	r3, #0
 800496a:	db0a      	blt.n	8004982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	490c      	ldr	r1, [pc, #48]	; (80049a4 <__NVIC_SetPriority+0x4c>)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	0112      	lsls	r2, r2, #4
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	440b      	add	r3, r1
 800497c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004980:	e00a      	b.n	8004998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4908      	ldr	r1, [pc, #32]	; (80049a8 <__NVIC_SetPriority+0x50>)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	3b04      	subs	r3, #4
 8004990:	0112      	lsls	r2, r2, #4
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	440b      	add	r3, r1
 8004996:	761a      	strb	r2, [r3, #24]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	e000e100 	.word	0xe000e100
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f1c3 0307 	rsb	r3, r3, #7
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf28      	it	cs
 80049ca:	2304      	movcs	r3, #4
 80049cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d902      	bls.n	80049dc <NVIC_EncodePriority+0x30>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3b03      	subs	r3, #3
 80049da:	e000      	b.n	80049de <NVIC_EncodePriority+0x32>
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	401a      	ands	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f4:	f04f 31ff 	mov.w	r1, #4294967295
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	43d9      	mvns	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a04:	4313      	orrs	r3, r2
         );
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a24:	d301      	bcc.n	8004a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a26:	2301      	movs	r3, #1
 8004a28:	e00f      	b.n	8004a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <SysTick_Config+0x40>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a32:	210f      	movs	r1, #15
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	f7ff ff8e 	bl	8004958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <SysTick_Config+0x40>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <SysTick_Config+0x40>)
 8004a44:	2207      	movs	r2, #7
 8004a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	e000e010 	.word	0xe000e010

08004a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff ff29 	bl	80048b8 <__NVIC_SetPriorityGrouping>
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	4603      	mov	r3, r0
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a80:	f7ff ff3e 	bl	8004900 <__NVIC_GetPriorityGrouping>
 8004a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	6978      	ldr	r0, [r7, #20]
 8004a8c:	f7ff ff8e 	bl	80049ac <NVIC_EncodePriority>
 8004a90:	4602      	mov	r2, r0
 8004a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff5d 	bl	8004958 <__NVIC_SetPriority>
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4603      	mov	r3, r0
 8004aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff31 	bl	800491c <__NVIC_EnableIRQ>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ffa2 	bl	8004a14 <SysTick_Config>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff fab4 	bl	8004054 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e099      	b.n	8004c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b18:	e00f      	b.n	8004b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b1a:	f7ff fa9b 	bl	8004054 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d908      	bls.n	8004b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2203      	movs	r2, #3
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e078      	b.n	8004c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e8      	bne.n	8004b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <HAL_DMA_Init+0x158>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d107      	bne.n	8004ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0307 	bic.w	r3, r3, #7
 8004bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d117      	bne.n	8004bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fb0f 	bl	8005204 <DMA_CheckFifoParam>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2240      	movs	r2, #64	; 0x40
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e016      	b.n	8004c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fac6 	bl	8005198 <DMA_CalcBaseAndBitshift>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	223f      	movs	r2, #63	; 0x3f
 8004c16:	409a      	lsls	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	f010803f 	.word	0xf010803f

08004c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_DMA_Start_IT+0x26>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e040      	b.n	8004ce0 <HAL_DMA_Start_IT+0xa8>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d12f      	bne.n	8004cd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa58 	bl	800513c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c90:	223f      	movs	r2, #63	; 0x3f
 8004c92:	409a      	lsls	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0216 	orr.w	r2, r2, #22
 8004ca6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e005      	b.n	8004cde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cf6:	f7ff f9ad 	bl	8004054 <HAL_GetTick>
 8004cfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d008      	beq.n	8004d1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e052      	b.n	8004dc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0216 	bic.w	r2, r2, #22
 8004d28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_DMA_Abort+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0208 	bic.w	r2, r2, #8
 8004d58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6a:	e013      	b.n	8004d94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d6c:	f7ff f972 	bl	8004054 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b05      	cmp	r3, #5
 8004d78:	d90c      	bls.n	8004d94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2203      	movs	r2, #3
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e015      	b.n	8004dc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e4      	bne.n	8004d6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	223f      	movs	r2, #63	; 0x3f
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d004      	beq.n	8004de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00c      	b.n	8004e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2205      	movs	r2, #5
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e18:	4b8e      	ldr	r3, [pc, #568]	; (8005054 <HAL_DMA_IRQHandler+0x248>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a8e      	ldr	r2, [pc, #568]	; (8005058 <HAL_DMA_IRQHandler+0x24c>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	0a9b      	lsrs	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	2208      	movs	r2, #8
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01a      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e64:	2208      	movs	r2, #8
 8004e66:	409a      	lsls	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f043 0202 	orr.w	r2, r3, #2
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d012      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	f043 0204 	orr.w	r2, r3, #4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee8:	2210      	movs	r2, #16
 8004eea:	409a      	lsls	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d043      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03c      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	2210      	movs	r2, #16
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d024      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
 8004f3a:	e01f      	b.n	8004f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
 8004f4c:	e016      	b.n	8004f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0208 	bic.w	r2, r2, #8
 8004f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	2220      	movs	r2, #32
 8004f82:	409a      	lsls	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 808f 	beq.w	80050ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8087 	beq.w	80050ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d136      	bne.n	8005024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0216 	bic.w	r2, r2, #22
 8004fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0x1da>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0208 	bic.w	r2, r2, #8
 8004ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffa:	223f      	movs	r2, #63	; 0x3f
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	2b00      	cmp	r3, #0
 8005018:	d07e      	beq.n	8005118 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
        }
        return;
 8005022:	e079      	b.n	8005118 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01d      	beq.n	800506e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10d      	bne.n	800505c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	2b00      	cmp	r3, #0
 8005046:	d031      	beq.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e02c      	b.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
 8005052:	bf00      	nop
 8005054:	20000000 	.word	0x20000000
 8005058:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
 800506c:	e01e      	b.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0210 	bic.w	r2, r2, #16
 800508a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d032      	beq.n	800511a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d022      	beq.n	8005106 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2205      	movs	r2, #5
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	3301      	adds	r3, #1
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d307      	bcc.n	80050f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f2      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x2cc>
 80050f2:	e000      	b.n	80050f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
 8005116:	e000      	b.n	800511a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005118:	bf00      	nop
    }
  }
}
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800512e:	b2db      	uxtb	r3, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005158:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d108      	bne.n	800517c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800517a:	e007      	b.n	800518c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	3b10      	subs	r3, #16
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <DMA_CalcBaseAndBitshift+0x64>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <DMA_CalcBaseAndBitshift+0x68>)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d909      	bls.n	80051da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
 80051d8:	e007      	b.n	80051ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	aaaaaaab 	.word	0xaaaaaaab
 8005200:	0800dd7c 	.word	0x0800dd7c

08005204 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11f      	bne.n	800525e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d856      	bhi.n	80052d2 <DMA_CheckFifoParam+0xce>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <DMA_CheckFifoParam+0x28>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800524f 	.word	0x0800524f
 8005234:	0800523d 	.word	0x0800523d
 8005238:	080052d3 	.word	0x080052d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d046      	beq.n	80052d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524c:	e043      	b.n	80052d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005256:	d140      	bne.n	80052da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525c:	e03d      	b.n	80052da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005266:	d121      	bne.n	80052ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d837      	bhi.n	80052de <DMA_CheckFifoParam+0xda>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <DMA_CheckFifoParam+0x70>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005285 	.word	0x08005285
 8005278:	0800528b 	.word	0x0800528b
 800527c:	08005285 	.word	0x08005285
 8005280:	0800529d 	.word	0x0800529d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e030      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d025      	beq.n	80052e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529a:	e022      	b.n	80052e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052a4:	d11f      	bne.n	80052e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052aa:	e01c      	b.n	80052e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d903      	bls.n	80052ba <DMA_CheckFifoParam+0xb6>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d003      	beq.n	80052c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052b8:	e018      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
      break;
 80052be:	e015      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e00b      	b.n	80052ea <DMA_CheckFifoParam+0xe6>
      break;
 80052d2:	bf00      	nop
 80052d4:	e00a      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      break;
 80052d6:	bf00      	nop
 80052d8:	e008      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      break;
 80052da:	bf00      	nop
 80052dc:	e006      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      break;
 80052de:	bf00      	nop
 80052e0:	e004      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      break;
 80052e2:	bf00      	nop
 80052e4:	e002      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      break;   
 80052e6:	bf00      	nop
 80052e8:	e000      	b.n	80052ec <DMA_CheckFifoParam+0xe8>
      break;
 80052ea:	bf00      	nop
    }
  } 
  
  return status; 
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop

080052fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	e159      	b.n	80055cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005318:	2201      	movs	r2, #1
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4013      	ands	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	429a      	cmp	r2, r3
 8005332:	f040 8148 	bne.w	80055c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b01      	cmp	r3, #1
 8005340:	d005      	beq.n	800534e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800534a:	2b02      	cmp	r3, #2
 800534c:	d130      	bne.n	80053b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	2203      	movs	r2, #3
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005384:	2201      	movs	r2, #1
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f003 0201 	and.w	r2, r3, #1
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d017      	beq.n	80053ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	2203      	movs	r2, #3
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d123      	bne.n	8005440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	08da      	lsrs	r2, r3, #3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3208      	adds	r2, #8
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	220f      	movs	r2, #15
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	08da      	lsrs	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3208      	adds	r2, #8
 800543a:	69b9      	ldr	r1, [r7, #24]
 800543c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	2203      	movs	r2, #3
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	4013      	ands	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0203 	and.w	r2, r3, #3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4313      	orrs	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a2 	beq.w	80055c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	4b57      	ldr	r3, [pc, #348]	; (80055e4 <HAL_GPIO_Init+0x2e8>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	4a56      	ldr	r2, [pc, #344]	; (80055e4 <HAL_GPIO_Init+0x2e8>)
 800548c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005490:	6453      	str	r3, [r2, #68]	; 0x44
 8005492:	4b54      	ldr	r3, [pc, #336]	; (80055e4 <HAL_GPIO_Init+0x2e8>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800549e:	4a52      	ldr	r2, [pc, #328]	; (80055e8 <HAL_GPIO_Init+0x2ec>)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	3302      	adds	r3, #2
 80054a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	220f      	movs	r2, #15
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a49      	ldr	r2, [pc, #292]	; (80055ec <HAL_GPIO_Init+0x2f0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d019      	beq.n	80054fe <HAL_GPIO_Init+0x202>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a48      	ldr	r2, [pc, #288]	; (80055f0 <HAL_GPIO_Init+0x2f4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_GPIO_Init+0x1fe>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a47      	ldr	r2, [pc, #284]	; (80055f4 <HAL_GPIO_Init+0x2f8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00d      	beq.n	80054f6 <HAL_GPIO_Init+0x1fa>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a46      	ldr	r2, [pc, #280]	; (80055f8 <HAL_GPIO_Init+0x2fc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <HAL_GPIO_Init+0x1f6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a45      	ldr	r2, [pc, #276]	; (80055fc <HAL_GPIO_Init+0x300>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d101      	bne.n	80054ee <HAL_GPIO_Init+0x1f2>
 80054ea:	2304      	movs	r3, #4
 80054ec:	e008      	b.n	8005500 <HAL_GPIO_Init+0x204>
 80054ee:	2307      	movs	r3, #7
 80054f0:	e006      	b.n	8005500 <HAL_GPIO_Init+0x204>
 80054f2:	2303      	movs	r3, #3
 80054f4:	e004      	b.n	8005500 <HAL_GPIO_Init+0x204>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e002      	b.n	8005500 <HAL_GPIO_Init+0x204>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_GPIO_Init+0x204>
 80054fe:	2300      	movs	r3, #0
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	f002 0203 	and.w	r2, r2, #3
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	4093      	lsls	r3, r2
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005510:	4935      	ldr	r1, [pc, #212]	; (80055e8 <HAL_GPIO_Init+0x2ec>)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	3302      	adds	r3, #2
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800551e:	4b38      	ldr	r3, [pc, #224]	; (8005600 <HAL_GPIO_Init+0x304>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005542:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <HAL_GPIO_Init+0x304>)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005548:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <HAL_GPIO_Init+0x304>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800556c:	4a24      	ldr	r2, [pc, #144]	; (8005600 <HAL_GPIO_Init+0x304>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005572:	4b23      	ldr	r3, [pc, #140]	; (8005600 <HAL_GPIO_Init+0x304>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	43db      	mvns	r3, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005596:	4a1a      	ldr	r2, [pc, #104]	; (8005600 <HAL_GPIO_Init+0x304>)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800559c:	4b18      	ldr	r3, [pc, #96]	; (8005600 <HAL_GPIO_Init+0x304>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055c0:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <HAL_GPIO_Init+0x304>)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3301      	adds	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	f67f aea2 	bls.w	8005318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3724      	adds	r7, #36	; 0x24
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40013800 	.word	0x40013800
 80055ec:	40020000 	.word	0x40020000
 80055f0:	40020400 	.word	0x40020400
 80055f4:	40020800 	.word	0x40020800
 80055f8:	40020c00 	.word	0x40020c00
 80055fc:	40021000 	.word	0x40021000
 8005600:	40013c00 	.word	0x40013c00

08005604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	887b      	ldrh	r3, [r7, #2]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e001      	b.n	8005626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
 8005640:	4613      	mov	r3, r2
 8005642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005644:	787b      	ldrb	r3, [r7, #1]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005650:	e003      	b.n	800565a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005652:	887b      	ldrh	r3, [r7, #2]
 8005654:	041a      	lsls	r2, r3, #16
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	619a      	str	r2, [r3, #24]
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e12b      	b.n	80058d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fe2e 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	; 0x24
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056cc:	f003 f92c 	bl	8008928 <HAL_RCC_GetPCLK1Freq>
 80056d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4a81      	ldr	r2, [pc, #516]	; (80058dc <HAL_I2C_Init+0x274>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d807      	bhi.n	80056ec <HAL_I2C_Init+0x84>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a80      	ldr	r2, [pc, #512]	; (80058e0 <HAL_I2C_Init+0x278>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bf94      	ite	ls
 80056e4:	2301      	movls	r3, #1
 80056e6:	2300      	movhi	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e006      	b.n	80056fa <HAL_I2C_Init+0x92>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a7d      	ldr	r2, [pc, #500]	; (80058e4 <HAL_I2C_Init+0x27c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	bf94      	ite	ls
 80056f4:	2301      	movls	r3, #1
 80056f6:	2300      	movhi	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0e7      	b.n	80058d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a78      	ldr	r2, [pc, #480]	; (80058e8 <HAL_I2C_Init+0x280>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0c9b      	lsrs	r3, r3, #18
 800570c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a6a      	ldr	r2, [pc, #424]	; (80058dc <HAL_I2C_Init+0x274>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d802      	bhi.n	800573c <HAL_I2C_Init+0xd4>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3301      	adds	r3, #1
 800573a:	e009      	b.n	8005750 <HAL_I2C_Init+0xe8>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	4a69      	ldr	r2, [pc, #420]	; (80058ec <HAL_I2C_Init+0x284>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	099b      	lsrs	r3, r3, #6
 800574e:	3301      	adds	r3, #1
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	430b      	orrs	r3, r1
 8005756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005762:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	495c      	ldr	r1, [pc, #368]	; (80058dc <HAL_I2C_Init+0x274>)
 800576c:	428b      	cmp	r3, r1
 800576e:	d819      	bhi.n	80057a4 <HAL_I2C_Init+0x13c>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1e59      	subs	r1, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	fbb1 f3f3 	udiv	r3, r1, r3
 800577e:	1c59      	adds	r1, r3, #1
 8005780:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005784:	400b      	ands	r3, r1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_I2C_Init+0x138>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1e59      	subs	r1, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	fbb1 f3f3 	udiv	r3, r1, r3
 8005798:	3301      	adds	r3, #1
 800579a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579e:	e051      	b.n	8005844 <HAL_I2C_Init+0x1dc>
 80057a0:	2304      	movs	r3, #4
 80057a2:	e04f      	b.n	8005844 <HAL_I2C_Init+0x1dc>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d111      	bne.n	80057d0 <HAL_I2C_Init+0x168>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	1e58      	subs	r0, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	440b      	add	r3, r1
 80057ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80057be:	3301      	adds	r3, #1
 80057c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	e012      	b.n	80057f6 <HAL_I2C_Init+0x18e>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1e58      	subs	r0, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	0099      	lsls	r1, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057e6:	3301      	adds	r3, #1
 80057e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_I2C_Init+0x196>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e022      	b.n	8005844 <HAL_I2C_Init+0x1dc>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10e      	bne.n	8005824 <HAL_I2C_Init+0x1bc>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1e58      	subs	r0, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6859      	ldr	r1, [r3, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	440b      	add	r3, r1
 8005814:	fbb0 f3f3 	udiv	r3, r0, r3
 8005818:	3301      	adds	r3, #1
 800581a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005822:	e00f      	b.n	8005844 <HAL_I2C_Init+0x1dc>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1e58      	subs	r0, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6859      	ldr	r1, [r3, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	0099      	lsls	r1, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	fbb0 f3f3 	udiv	r3, r0, r3
 800583a:	3301      	adds	r3, #1
 800583c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	6809      	ldr	r1, [r1, #0]
 8005848:	4313      	orrs	r3, r2
 800584a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6911      	ldr	r1, [r2, #16]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	4311      	orrs	r1, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	430b      	orrs	r3, r1
 8005886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	000186a0 	.word	0x000186a0
 80058e0:	001e847f 	.word	0x001e847f
 80058e4:	003d08ff 	.word	0x003d08ff
 80058e8:	431bde83 	.word	0x431bde83
 80058ec:	10624dd3 	.word	0x10624dd3

080058f0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d103      	bne.n	800590e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	611a      	str	r2, [r3, #16]
  }
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	461a      	mov	r2, r3
 8005928:	460b      	mov	r3, r1
 800592a:	817b      	strh	r3, [r7, #10]
 800592c:	4613      	mov	r3, r2
 800592e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005930:	f7fe fb90 	bl	8004054 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b20      	cmp	r3, #32
 8005940:	f040 80e0 	bne.w	8005b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	2319      	movs	r3, #25
 800594a:	2201      	movs	r2, #1
 800594c:	4970      	ldr	r1, [pc, #448]	; (8005b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f002 f8f6 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
 800595c:	e0d3      	b.n	8005b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_I2C_Master_Transmit+0x50>
 8005968:	2302      	movs	r3, #2
 800596a:	e0cc      	b.n	8005b06 <HAL_I2C_Master_Transmit+0x1ea>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b01      	cmp	r3, #1
 8005980:	d007      	beq.n	8005992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2221      	movs	r2, #33	; 0x21
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2210      	movs	r2, #16
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	893a      	ldrh	r2, [r7, #8]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a50      	ldr	r2, [pc, #320]	; (8005b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059d4:	8979      	ldrh	r1, [r7, #10]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 feb8 	bl	8007750 <I2C_MasterRequestWrite>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e08d      	b.n	8005b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a00:	e066      	b.n	8005ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	6a39      	ldr	r1, [r7, #32]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f002 f9b4 	bl	8007d74 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d107      	bne.n	8005a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e06b      	b.n	8005b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_I2C_Master_Transmit+0x188>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	6a39      	ldr	r1, [r7, #32]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f002 f9ab 	bl	8007e04 <I2C_WaitOnBTFFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e01a      	b.n	8005b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d194      	bne.n	8005a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	00100002 	.word	0x00100002
 8005b14:	ffff0000 	.word	0xffff0000

08005b18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	; 0x30
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	461a      	mov	r2, r3
 8005b24:	460b      	mov	r3, r1
 8005b26:	817b      	strh	r3, [r7, #10]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b2c:	f7fe fa92 	bl	8004054 <HAL_GetTick>
 8005b30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	f040 8217 	bne.w	8005f6e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2319      	movs	r3, #25
 8005b46:	2201      	movs	r2, #1
 8005b48:	497c      	ldr	r1, [pc, #496]	; (8005d3c <HAL_I2C_Master_Receive+0x224>)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 fff8 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
 8005b58:	e20a      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_I2C_Master_Receive+0x50>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e203      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d007      	beq.n	8005b8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2222      	movs	r2, #34	; 0x22
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	893a      	ldrh	r2, [r7, #8]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a5c      	ldr	r2, [pc, #368]	; (8005d40 <HAL_I2C_Master_Receive+0x228>)
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bd0:	8979      	ldrh	r1, [r7, #10]
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 fe3c 	bl	8007854 <I2C_MasterRequestRead>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e1c4      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d113      	bne.n	8005c16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e198      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d11b      	bne.n	8005c56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e178      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d11b      	bne.n	8005c96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	e158      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cbc:	e144      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	f200 80f1 	bhi.w	8005eaa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d123      	bne.n	8005d18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f002 f90f 	bl	8007ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e145      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d16:	e117      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d14e      	bne.n	8005dbe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2200      	movs	r2, #0
 8005d28:	4906      	ldr	r1, [pc, #24]	; (8005d44 <HAL_I2C_Master_Receive+0x22c>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f001 ff08 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e11a      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
 8005d3a:	bf00      	nop
 8005d3c:	00100002 	.word	0x00100002
 8005d40:	ffff0000 	.word	0xffff0000
 8005d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dbc:	e0c4      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	496c      	ldr	r1, [pc, #432]	; (8005f78 <HAL_I2C_Master_Receive+0x460>)
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f001 feb9 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0cb      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	2200      	movs	r2, #0
 8005e22:	4955      	ldr	r1, [pc, #340]	; (8005f78 <HAL_I2C_Master_Receive+0x460>)
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f001 fe8b 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e09d      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ea8:	e04e      	b.n	8005f48 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f002 f822 	bl	8007ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e058      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d124      	bne.n	8005f48 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f14:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f aeb6 	bne.w	8005cbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	; 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	00010004 	.word	0x00010004

08005f7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d003      	beq.n	8005fb4 <HAL_I2C_EV_IRQHandler+0x38>
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	f040 80b1 	bne.w	8006116 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10d      	bne.n	8005fea <HAL_I2C_EV_IRQHandler+0x6e>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005fd4:	d003      	beq.n	8005fde <HAL_I2C_EV_IRQHandler+0x62>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005fdc:	d101      	bne.n	8005fe2 <HAL_I2C_EV_IRQHandler+0x66>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <HAL_I2C_EV_IRQHandler+0x68>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f000 8114 	beq.w	8006212 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <HAL_I2C_EV_IRQHandler+0x90>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d006      	beq.n	800600c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f002 f806 	bl	8008010 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fd86 	bl	8006b16 <I2C_Master_SB>
 800600a:	e083      	b.n	8006114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_I2C_EV_IRQHandler+0xac>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fdfe 	bl	8006c22 <I2C_Master_ADD10>
 8006026:	e075      	b.n	8006114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_I2C_EV_IRQHandler+0xc8>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fe1a 	bl	8006c76 <I2C_Master_ADDR>
 8006042:	e067      	b.n	8006114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d036      	beq.n	80060bc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605c:	f000 80db 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <HAL_I2C_EV_IRQHandler+0x10a>
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_I2C_EV_IRQHandler+0x10a>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9e2 	bl	8006448 <I2C_MasterTransmit_TXE>
 8006084:	e046      	b.n	8006114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80c2 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80bc 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b21      	cmp	r3, #33	; 0x21
 80060a2:	d103      	bne.n	80060ac <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fa6b 	bl	8006580 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060aa:	e0b4      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	f040 80b1 	bne.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fad9 	bl	800666c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060ba:	e0ac      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ca:	f000 80a4 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00d      	beq.n	80060f4 <HAL_I2C_EV_IRQHandler+0x178>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_I2C_EV_IRQHandler+0x178>
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb55 	bl	800679c <I2C_MasterReceive_RXNE>
 80060f2:	e00f      	b.n	8006114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 808b 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8085 	beq.w	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc0d 	bl	800692c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006112:	e080      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
 8006114:	e07f      	b.n	8006216 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	e007      	b.n	8006138 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d011      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0x1ea>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800615c:	69b9      	ldr	r1, [r7, #24]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 ffd8 	bl	8007114 <I2C_Slave_ADDR>
 8006164:	e05a      	b.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_I2C_EV_IRQHandler+0x206>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 f812 	bl	80071a4 <I2C_Slave_STOPF>
 8006180:	e04c      	b.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	2b21      	cmp	r3, #33	; 0x21
 8006186:	d002      	beq.n	800618e <HAL_I2C_EV_IRQHandler+0x212>
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	2b29      	cmp	r3, #41	; 0x29
 800618c:	d120      	bne.n	80061d0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00d      	beq.n	80061b4 <HAL_I2C_EV_IRQHandler+0x238>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_I2C_EV_IRQHandler+0x238>
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d103      	bne.n	80061b4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fef3 	bl	8006f98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061b2:	e032      	b.n	800621a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02d      	beq.n	800621a <HAL_I2C_EV_IRQHandler+0x29e>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d028      	beq.n	800621a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 ff22 	bl	8007012 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061ce:	e024      	b.n	800621a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 ff30 	bl	8007054 <I2C_SlaveReceive_RXNE>
 80061f4:	e012      	b.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 ff60 	bl	80070d0 <I2C_SlaveReceive_BTF>
 8006210:	e004      	b.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800621a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08a      	sub	sp, #40	; 0x28
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800623a:	2300      	movs	r3, #0
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006244:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <HAL_I2C_ER_IRQHandler+0x4a>
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800626a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <HAL_I2C_ER_IRQHandler+0x70>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	f043 0302 	orr.w	r3, r3, #2
 8006286:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006290:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d03e      	beq.n	800631a <HAL_I2C_ER_IRQHandler+0xf8>
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d039      	beq.n	800631a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80062a6:	7efb      	ldrb	r3, [r7, #27]
 80062a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80062c0:	7ebb      	ldrb	r3, [r7, #26]
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d112      	bne.n	80062ec <HAL_I2C_ER_IRQHandler+0xca>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10f      	bne.n	80062ec <HAL_I2C_ER_IRQHandler+0xca>
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b21      	cmp	r3, #33	; 0x21
 80062d0:	d008      	beq.n	80062e4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80062d2:	7cfb      	ldrb	r3, [r7, #19]
 80062d4:	2b29      	cmp	r3, #41	; 0x29
 80062d6:	d005      	beq.n	80062e4 <HAL_I2C_ER_IRQHandler+0xc2>
 80062d8:	7cfb      	ldrb	r3, [r7, #19]
 80062da:	2b28      	cmp	r3, #40	; 0x28
 80062dc:	d106      	bne.n	80062ec <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b21      	cmp	r3, #33	; 0x21
 80062e2:	d103      	bne.n	80062ec <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 f88d 	bl	8007404 <I2C_Slave_AF>
 80062ea:	e016      	b.n	800631a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	f043 0304 	orr.w	r3, r3, #4
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80062fe:	7efb      	ldrb	r3, [r7, #27]
 8006300:	2b10      	cmp	r3, #16
 8006302:	d002      	beq.n	800630a <HAL_I2C_ER_IRQHandler+0xe8>
 8006304:	7efb      	ldrb	r3, [r7, #27]
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d107      	bne.n	800631a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006318:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <HAL_I2C_ER_IRQHandler+0x11e>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	f043 0308 	orr.w	r3, r3, #8
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800633e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 f8ca 	bl	80074ec <I2C_ITError>
  }
}
 8006358:	bf00      	nop
 800635a:	3728      	adds	r7, #40	; 0x28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
 80063bc:	4613      	mov	r3, r2
 80063be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d150      	bne.n	8006510 <I2C_MasterTransmit_TXE+0xc8>
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b21      	cmp	r3, #33	; 0x21
 8006472:	d14d      	bne.n	8006510 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b08      	cmp	r3, #8
 8006478:	d01d      	beq.n	80064b6 <I2C_MasterTransmit_TXE+0x6e>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b20      	cmp	r3, #32
 800647e:	d01a      	beq.n	80064b6 <I2C_MasterTransmit_TXE+0x6e>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006486:	d016      	beq.n	80064b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006496:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2211      	movs	r2, #17
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff ff56 	bl	8006360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064b4:	e060      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d107      	bne.n	8006500 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ff71 	bl	80063e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064fe:	e03b      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff ff29 	bl	8006360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800650e:	e033      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b21      	cmp	r3, #33	; 0x21
 8006514:	d005      	beq.n	8006522 <I2C_MasterTransmit_TXE+0xda>
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d12d      	bne.n	8006578 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b22      	cmp	r3, #34	; 0x22
 8006520:	d12a      	bne.n	8006578 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800653c:	e01c      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d103      	bne.n	8006552 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f88e 	bl	800666c <I2C_MemoryTransmit_TXE_BTF>
}
 8006550:	e012      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006576:	e7ff      	b.n	8006578 <I2C_MasterTransmit_TXE+0x130>
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b21      	cmp	r3, #33	; 0x21
 8006598:	d164      	bne.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d012      	beq.n	80065ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80065c8:	e04c      	b.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d01d      	beq.n	800660c <I2C_MasterTransmit_BTF+0x8c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d01a      	beq.n	800660c <I2C_MasterTransmit_BTF+0x8c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065dc:	d016      	beq.n	800660c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2211      	movs	r2, #17
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff feab 	bl	8006360 <HAL_I2C_MasterTxCpltCallback>
}
 800660a:	e02b      	b.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800661a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d107      	bne.n	8006656 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fec6 	bl	80063e0 <HAL_I2C_MemTxCpltCallback>
}
 8006654:	e006      	b.n	8006664 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fe7e 	bl	8006360 <HAL_I2C_MasterTxCpltCallback>
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11d      	bne.n	80066c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10b      	bne.n	80066a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006690:	b2da      	uxtb	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80066a2:	e077      	b.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	121b      	asrs	r3, r3, #8
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066be:	e069      	b.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10b      	bne.n	80066e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066de:	e059      	b.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d152      	bne.n	800678e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b22      	cmp	r3, #34	; 0x22
 80066ec:	d10d      	bne.n	800670a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006708:	e044      	b.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d015      	beq.n	8006740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b21      	cmp	r3, #33	; 0x21
 8006718:	d112      	bne.n	8006740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800673e:	e029      	b.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d124      	bne.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b21      	cmp	r3, #33	; 0x21
 800674e:	d121      	bne.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800675e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fe2a 	bl	80063e0 <HAL_I2C_MemTxCpltCallback>
}
 800678c:	e002      	b.n	8006794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff f8ae 	bl	80058f0 <I2C_Flush_DR>
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b22      	cmp	r3, #34	; 0x22
 80067ae:	f040 80b9 	bne.w	8006924 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d921      	bls.n	800680a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	f040 8096 	bne.w	8006924 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006806:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006808:	e08c      	b.n	8006924 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	2b02      	cmp	r3, #2
 8006810:	d07f      	beq.n	8006912 <I2C_MasterReceive_RXNE+0x176>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d002      	beq.n	800681e <I2C_MasterReceive_RXNE+0x82>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d179      	bne.n	8006912 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fb38 	bl	8007e94 <I2C_WaitOnSTOPRequestThroughIT>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d14c      	bne.n	80068c4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006838:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006848:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	d10a      	bne.n	800689a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fdae 	bl	80063f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006898:	e044      	b.n	8006924 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d002      	beq.n	80068ae <I2C_MasterReceive_RXNE+0x112>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d103      	bne.n	80068b6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	; 0x30
 80068b4:	e002      	b.n	80068bc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2212      	movs	r2, #18
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff fd59 	bl	8006374 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068c2:	e02f      	b.n	8006924 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fd7c 	bl	8006408 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006910:	e008      	b.n	8006924 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006920:	605a      	str	r2, [r3, #4]
}
 8006922:	e7ff      	b.n	8006924 <I2C_MasterReceive_RXNE+0x188>
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b04      	cmp	r3, #4
 8006942:	d11b      	bne.n	800697c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006952:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800697a:	e0c8      	b.n	8006b0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b03      	cmp	r3, #3
 8006984:	d129      	bne.n	80069da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006994:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d00a      	beq.n	80069b2 <I2C_MasterReceive_BTF+0x86>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d007      	beq.n	80069b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069d8:	e099      	b.n	8006b0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	f040 8081 	bne.w	8006ae8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d002      	beq.n	80069f2 <I2C_MasterReceive_BTF+0xc6>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d108      	bne.n	8006a04 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e019      	b.n	8006a38 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d002      	beq.n	8006a10 <I2C_MasterReceive_BTF+0xe4>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d108      	bne.n	8006a22 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e00a      	b.n	8006a38 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d007      	beq.n	8006a38 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d10a      	bne.n	8006abe <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fc9c 	bl	80063f4 <HAL_I2C_MemRxCpltCallback>
}
 8006abc:	e027      	b.n	8006b0e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d002      	beq.n	8006ad2 <I2C_MasterReceive_BTF+0x1a6>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d103      	bne.n	8006ada <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ad8:	e002      	b.n	8006ae0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2212      	movs	r2, #18
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff fc47 	bl	8006374 <HAL_I2C_MasterRxCpltCallback>
}
 8006ae6:	e012      	b.n	8006b0e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d117      	bne.n	8006b5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b44:	e067      	b.n	8006c16 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	611a      	str	r2, [r3, #16]
}
 8006b58:	e05d      	b.n	8006c16 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b62:	d133      	bne.n	8006bcc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b21      	cmp	r3, #33	; 0x21
 8006b6e:	d109      	bne.n	8006b84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b80:	611a      	str	r2, [r3, #16]
 8006b82:	e008      	b.n	8006b96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <I2C_Master_SB+0x92>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d032      	beq.n	8006c16 <I2C_Master_SB+0x100>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d02d      	beq.n	8006c16 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc8:	605a      	str	r2, [r3, #4]
}
 8006bca:	e024      	b.n	8006c16 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10e      	bne.n	8006bf2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	11db      	asrs	r3, r3, #7
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 0306 	and.w	r3, r3, #6
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f063 030f 	orn	r3, r3, #15
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	611a      	str	r2, [r3, #16]
}
 8006bf0:	e011      	b.n	8006c16 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10d      	bne.n	8006c16 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	11db      	asrs	r3, r3, #7
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f003 0306 	and.w	r3, r3, #6
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f063 030e 	orn	r3, r3, #14
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	611a      	str	r2, [r3, #16]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <I2C_Master_ADD10+0x26>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d108      	bne.n	8006c5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <I2C_Master_ADD10+0x48>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c68:	605a      	str	r2, [r3, #4]
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b091      	sub	sp, #68	; 0x44
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b22      	cmp	r3, #34	; 0x22
 8006c9e:	f040 8169 	bne.w	8006f74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10f      	bne.n	8006cca <I2C_Master_ADDR+0x54>
 8006caa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d10b      	bne.n	8006cca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	e160      	b.n	8006f8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d11d      	bne.n	8006d0e <I2C_Master_ADDR+0x98>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cda:	d118      	bne.n	8006d0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	651a      	str	r2, [r3, #80]	; 0x50
 8006d0c:	e13e      	b.n	8006f8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d113      	bne.n	8006d40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e115      	b.n	8006f6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	f040 808a 	bne.w	8006e60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d52:	d137      	bne.n	8006dc4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d72:	d113      	bne.n	8006d9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d84:	2300      	movs	r3, #0
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	e0e7      	b.n	8006f6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	623b      	str	r3, [r7, #32]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e0d3      	b.n	8006f6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d02e      	beq.n	8006e28 <I2C_Master_ADDR+0x1b2>
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d02b      	beq.n	8006e28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd2:	2b12      	cmp	r3, #18
 8006dd4:	d102      	bne.n	8006ddc <I2C_Master_ADDR+0x166>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d125      	bne.n	8006e28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00e      	beq.n	8006e00 <I2C_Master_ADDR+0x18a>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d00b      	beq.n	8006e00 <I2C_Master_ADDR+0x18a>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d008      	beq.n	8006e00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e007      	b.n	8006e10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	e0a1      	b.n	8006f6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e085      	b.n	8006f6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d14d      	bne.n	8006f06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d016      	beq.n	8006e9e <I2C_Master_ADDR+0x228>
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d013      	beq.n	8006e9e <I2C_Master_ADDR+0x228>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d010      	beq.n	8006e9e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e007      	b.n	8006eae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ebc:	d117      	bne.n	8006eee <I2C_Master_ADDR+0x278>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ec4:	d00b      	beq.n	8006ede <I2C_Master_ADDR+0x268>
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d008      	beq.n	8006ede <I2C_Master_ADDR+0x268>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d005      	beq.n	8006ede <I2C_Master_ADDR+0x268>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d002      	beq.n	8006ede <I2C_Master_ADDR+0x268>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d107      	bne.n	8006eee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	e032      	b.n	8006f6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f24:	d117      	bne.n	8006f56 <I2C_Master_ADDR+0x2e0>
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f2c:	d00b      	beq.n	8006f46 <I2C_Master_ADDR+0x2d0>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d008      	beq.n	8006f46 <I2C_Master_ADDR+0x2d0>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d005      	beq.n	8006f46 <I2C_Master_ADDR+0x2d0>
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d002      	beq.n	8006f46 <I2C_Master_ADDR+0x2d0>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d107      	bne.n	8006f56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f72:	e00b      	b.n	8006f8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
}
 8006f8a:	e7ff      	b.n	8006f8c <I2C_Master_ADDR+0x316>
 8006f8c:	bf00      	nop
 8006f8e:	3744      	adds	r7, #68	; 0x44
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02b      	beq.n	800700a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d114      	bne.n	800700a <I2C_SlaveTransmit_TXE+0x72>
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b29      	cmp	r3, #41	; 0x29
 8006fe4:	d111      	bne.n	800700a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2221      	movs	r2, #33	; 0x21
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2228      	movs	r2, #40	; 0x28
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff f9bf 	bl	8006388 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d011      	beq.n	8007048 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d02c      	beq.n	80070c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d114      	bne.n	80070c8 <I2C_SlaveReceive_RXNE+0x74>
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b2a      	cmp	r3, #42	; 0x2a
 80070a2:	d111      	bne.n	80070c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2222      	movs	r2, #34	; 0x22
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2228      	movs	r2, #40	; 0x28
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff f96a 	bl	800639c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d012      	beq.n	8007108 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800712e:	2b28      	cmp	r3, #40	; 0x28
 8007130:	d125      	bne.n	800717e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007140:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800714c:	2301      	movs	r3, #1
 800714e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	81bb      	strh	r3, [r7, #12]
 8007160:	e002      	b.n	8007168 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007170:	89ba      	ldrh	r2, [r7, #12]
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff f91a 	bl	80063b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800717c:	e00e      	b.n	800719c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800717e:	2300      	movs	r3, #0
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80071c4:	2300      	movs	r3, #0
 80071c6:	60bb      	str	r3, [r7, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007200:	d172      	bne.n	80072e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2b22      	cmp	r3, #34	; 0x22
 8007206:	d002      	beq.n	800720e <I2C_Slave_STOPF+0x6a>
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	2b2a      	cmp	r3, #42	; 0x2a
 800720c:	d135      	bne.n	800727a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f043 0204 	orr.w	r2, r3, #4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007240:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	4618      	mov	r0, r3
 8007248:	f7fd ff6a 	bl	8005120 <HAL_DMA_GetState>
 800724c:	4603      	mov	r3, r0
 800724e:	2b01      	cmp	r3, #1
 8007250:	d049      	beq.n	80072e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	4a69      	ldr	r2, [pc, #420]	; (80073fc <I2C_Slave_STOPF+0x258>)
 8007258:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	4618      	mov	r0, r3
 8007260:	f7fd fdb2 	bl	8004dc8 <HAL_DMA_Abort_IT>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d03d      	beq.n	80072e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007278:	e035      	b.n	80072e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f043 0204 	orr.w	r2, r3, #4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fd ff34 	bl	8005120 <HAL_DMA_GetState>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d014      	beq.n	80072e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	4a4e      	ldr	r2, [pc, #312]	; (80073fc <I2C_Slave_STOPF+0x258>)
 80072c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd fd7c 	bl	8004dc8 <HAL_DMA_Abort_IT>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3
 80072e4:	e000      	b.n	80072e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d03e      	beq.n	8007370 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d112      	bne.n	8007326 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d112      	bne.n	800735a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	f043 0204 	orr.w	r2, r3, #4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f8b7 	bl	80074ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800737e:	e039      	b.n	80073f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2b2a      	cmp	r3, #42	; 0x2a
 8007384:	d109      	bne.n	800739a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2228      	movs	r2, #40	; 0x28
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff f801 	bl	800639c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b28      	cmp	r3, #40	; 0x28
 80073a4:	d111      	bne.n	80073ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a15      	ldr	r2, [pc, #84]	; (8007400 <I2C_Slave_STOPF+0x25c>)
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff f802 	bl	80063cc <HAL_I2C_ListenCpltCallback>
}
 80073c8:	e014      	b.n	80073f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	2b22      	cmp	r3, #34	; 0x22
 80073d0:	d002      	beq.n	80073d8 <I2C_Slave_STOPF+0x234>
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	2b22      	cmp	r3, #34	; 0x22
 80073d6:	d10d      	bne.n	80073f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7fe ffd4 	bl	800639c <HAL_I2C_SlaveRxCpltCallback>
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	080079f1 	.word	0x080079f1
 8007400:	ffff0000 	.word	0xffff0000

08007404 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007412:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d002      	beq.n	8007426 <I2C_Slave_AF+0x22>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b20      	cmp	r3, #32
 8007424:	d129      	bne.n	800747a <I2C_Slave_AF+0x76>
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b28      	cmp	r3, #40	; 0x28
 800742a:	d126      	bne.n	800747a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a2e      	ldr	r2, [pc, #184]	; (80074e8 <I2C_Slave_AF+0xe4>)
 8007430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007440:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800744a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fe ffaa 	bl	80063cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007478:	e031      	b.n	80074de <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b21      	cmp	r3, #33	; 0x21
 800747e:	d129      	bne.n	80074d4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a19      	ldr	r2, [pc, #100]	; (80074e8 <I2C_Slave_AF+0xe4>)
 8007484:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2221      	movs	r2, #33	; 0x21
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fe fa12 	bl	80058f0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ff5b 	bl	8006388 <HAL_I2C_SlaveTxCpltCallback>
}
 80074d2:	e004      	b.n	80074de <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074dc:	615a      	str	r2, [r3, #20]
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	ffff0000 	.word	0xffff0000

080074ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007502:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b10      	cmp	r3, #16
 8007508:	d002      	beq.n	8007510 <I2C_ITError+0x24>
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d10a      	bne.n	8007526 <I2C_ITError+0x3a>
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b22      	cmp	r3, #34	; 0x22
 8007514:	d107      	bne.n	8007526 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007524:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800752c:	2b28      	cmp	r3, #40	; 0x28
 800752e:	d107      	bne.n	8007540 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2228      	movs	r2, #40	; 0x28
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800753e:	e015      	b.n	800756c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754e:	d00a      	beq.n	8007566 <I2C_ITError+0x7a>
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b60      	cmp	r3, #96	; 0x60
 8007554:	d007      	beq.n	8007566 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757a:	d162      	bne.n	8007642 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800758a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b01      	cmp	r3, #1
 8007598:	d020      	beq.n	80075dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	4a6a      	ldr	r2, [pc, #424]	; (8007748 <I2C_ITError+0x25c>)
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fc0e 	bl	8004dc8 <HAL_DMA_Abort_IT>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 8089 	beq.w	80076c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075d6:	4610      	mov	r0, r2
 80075d8:	4798      	blx	r3
 80075da:	e074      	b.n	80076c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	4a59      	ldr	r2, [pc, #356]	; (8007748 <I2C_ITError+0x25c>)
 80075e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd fbed 	bl	8004dc8 <HAL_DMA_Abort_IT>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d068      	beq.n	80076c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d10b      	bne.n	800761a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	e041      	b.n	80076c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b60      	cmp	r3, #96	; 0x60
 800764c:	d125      	bne.n	800769a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d10b      	bne.n	8007682 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fe fec2 	bl	800641c <HAL_I2C_AbortCpltCallback>
 8007698:	e015      	b.n	80076c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d10b      	bne.n	80076c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fe fea1 	bl	8006408 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10e      	bne.n	80076f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d109      	bne.n	80076f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007702:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b04      	cmp	r3, #4
 8007716:	d113      	bne.n	8007740 <I2C_ITError+0x254>
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	2b28      	cmp	r3, #40	; 0x28
 800771c:	d110      	bne.n	8007740 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a0a      	ldr	r2, [pc, #40]	; (800774c <I2C_ITError+0x260>)
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fe fe46 	bl	80063cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	080079f1 	.word	0x080079f1
 800774c:	ffff0000 	.word	0xffff0000

08007750 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	460b      	mov	r3, r1
 800775e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d006      	beq.n	800777a <I2C_MasterRequestWrite+0x2a>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d003      	beq.n	800777a <I2C_MasterRequestWrite+0x2a>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007778:	d108      	bne.n	800778c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e00b      	b.n	80077a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b12      	cmp	r3, #18
 8007792:	d107      	bne.n	80077a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f9c5 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00d      	beq.n	80077d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d103      	bne.n	80077d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e035      	b.n	8007844 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e0:	d108      	bne.n	80077f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077e2:	897b      	ldrh	r3, [r7, #10]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077f0:	611a      	str	r2, [r3, #16]
 80077f2:	e01b      	b.n	800782c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80077f4:	897b      	ldrh	r3, [r7, #10]
 80077f6:	11db      	asrs	r3, r3, #7
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f063 030f 	orn	r3, r3, #15
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	490e      	ldr	r1, [pc, #56]	; (800784c <I2C_MasterRequestWrite+0xfc>)
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fa0e 	bl	8007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e010      	b.n	8007844 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4907      	ldr	r1, [pc, #28]	; (8007850 <I2C_MasterRequestWrite+0x100>)
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f9fe 	bl	8007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	00010008 	.word	0x00010008
 8007850:	00010002 	.word	0x00010002

08007854 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	460b      	mov	r3, r1
 8007862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007878:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d006      	beq.n	800788e <I2C_MasterRequestRead+0x3a>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d003      	beq.n	800788e <I2C_MasterRequestRead+0x3a>
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800788c:	d108      	bne.n	80078a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e00b      	b.n	80078b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	2b11      	cmp	r3, #17
 80078a6:	d107      	bne.n	80078b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 f93b 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d103      	bne.n	80078e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e079      	b.n	80079e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f4:	d108      	bne.n	8007908 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078f6:	897b      	ldrh	r3, [r7, #10]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	611a      	str	r2, [r3, #16]
 8007906:	e05f      	b.n	80079c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007908:	897b      	ldrh	r3, [r7, #10]
 800790a:	11db      	asrs	r3, r3, #7
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f003 0306 	and.w	r3, r3, #6
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f063 030f 	orn	r3, r3, #15
 8007918:	b2da      	uxtb	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4930      	ldr	r1, [pc, #192]	; (80079e8 <I2C_MasterRequestRead+0x194>)
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f984 	bl	8007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e054      	b.n	80079e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	4929      	ldr	r1, [pc, #164]	; (80079ec <I2C_MasterRequestRead+0x198>)
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f974 	bl	8007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e044      	b.n	80079e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800797a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f8d9 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00d      	beq.n	80079b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a2:	d103      	bne.n	80079ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e017      	b.n	80079e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80079b0:	897b      	ldrh	r3, [r7, #10]
 80079b2:	11db      	asrs	r3, r3, #7
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f003 0306 	and.w	r3, r3, #6
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f063 030e 	orn	r3, r3, #14
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4907      	ldr	r1, [pc, #28]	; (80079ec <I2C_MasterRequestRead+0x198>)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f930 	bl	8007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	00010008 	.word	0x00010008
 80079ec:	00010002 	.word	0x00010002

080079f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a0a:	4b4b      	ldr	r3, [pc, #300]	; (8007b38 <I2C_DMAAbort+0x148>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	4a4a      	ldr	r2, [pc, #296]	; (8007b3c <I2C_DMAAbort+0x14c>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	0a1a      	lsrs	r2, r3, #8
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	00da      	lsls	r2, r3, #3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a36:	e00a      	b.n	8007a4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4c:	d0ea      	beq.n	8007a24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2200      	movs	r2, #0
 8007a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a90:	2200      	movs	r2, #0
 8007a92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b60      	cmp	r3, #96	; 0x60
 8007abe:	d10e      	bne.n	8007ade <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7fe fca0 	bl	800641c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007adc:	e027      	b.n	8007b2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ade:	7cfb      	ldrb	r3, [r7, #19]
 8007ae0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ae4:	2b28      	cmp	r3, #40	; 0x28
 8007ae6:	d117      	bne.n	8007b18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2228      	movs	r2, #40	; 0x28
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b16:	e007      	b.n	8007b28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007b28:	6978      	ldr	r0, [r7, #20]
 8007b2a:	f7fe fc6d 	bl	8006408 <HAL_I2C_ErrorCallback>
}
 8007b2e:	bf00      	nop
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000000 	.word	0x20000000
 8007b3c:	14f8b589 	.word	0x14f8b589

08007b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b50:	e048      	b.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d044      	beq.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fc fa7b 	bl	8004054 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d139      	bne.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	0c1b      	lsrs	r3, r3, #16
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10d      	bne.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	43da      	mvns	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	4013      	ands	r3, r2
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2301      	moveq	r3, #1
 8007b8e:	2300      	movne	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	e00c      	b.n	8007bb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	43da      	mvns	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d116      	bne.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd0:	f043 0220 	orr.w	r2, r3, #32
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e023      	b.n	8007c2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10d      	bne.n	8007c0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	43da      	mvns	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bf0c      	ite	eq
 8007c00:	2301      	moveq	r3, #1
 8007c02:	2300      	movne	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	461a      	mov	r2, r3
 8007c08:	e00c      	b.n	8007c24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	43da      	mvns	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4013      	ands	r3, r2
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d093      	beq.n	8007b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c42:	e071      	b.n	8007d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d123      	bne.n	8007c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c88:	f043 0204 	orr.w	r2, r3, #4
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e067      	b.n	8007d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d041      	beq.n	8007d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca4:	f7fc f9d6 	bl	8004054 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d302      	bcc.n	8007cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d136      	bne.n	8007d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	0c1b      	lsrs	r3, r3, #16
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d10c      	bne.n	8007cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	43da      	mvns	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bf14      	ite	ne
 8007cd6:	2301      	movne	r3, #1
 8007cd8:	2300      	moveq	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	e00b      	b.n	8007cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	43da      	mvns	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	2301      	movne	r3, #1
 8007cf2:	2300      	moveq	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d016      	beq.n	8007d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	f043 0220 	orr.w	r2, r3, #32
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e021      	b.n	8007d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d10c      	bne.n	8007d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	43da      	mvns	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	e00b      	b.n	8007d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	43da      	mvns	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4013      	ands	r3, r2
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f47f af6d 	bne.w	8007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d80:	e034      	b.n	8007dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f915 	bl	8007fb2 <I2C_IsAcknowledgeFailed>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e034      	b.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d028      	beq.n	8007dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9a:	f7fc f95b 	bl	8004054 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11d      	bne.n	8007dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dba:	2b80      	cmp	r3, #128	; 0x80
 8007dbc:	d016      	beq.n	8007dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	f043 0220 	orr.w	r2, r3, #32
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e007      	b.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d1c3      	bne.n	8007d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e10:	e034      	b.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f8cd 	bl	8007fb2 <I2C_IsAcknowledgeFailed>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e034      	b.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e28:	d028      	beq.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e2a:	f7fc f913 	bl	8004054 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d302      	bcc.n	8007e40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11d      	bne.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d016      	beq.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	f043 0220 	orr.w	r2, r3, #32
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e007      	b.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d1c3      	bne.n	8007e12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ea0:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	08db      	lsrs	r3, r3, #3
 8007ea6:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	0a1a      	lsrs	r2, r3, #8
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d107      	bne.n	8007ed2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e008      	b.n	8007ee4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee0:	d0e9      	beq.n	8007eb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20000000 	.word	0x20000000
 8007ef4:	14f8b589 	.word	0x14f8b589

08007ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f04:	e049      	b.n	8007f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d119      	bne.n	8007f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0210 	mvn.w	r2, #16
 8007f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e030      	b.n	8007faa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f48:	f7fc f884 	bl	8004054 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d11d      	bne.n	8007f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f68:	2b40      	cmp	r3, #64	; 0x40
 8007f6a:	d016      	beq.n	8007f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	f043 0220 	orr.w	r2, r3, #32
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e007      	b.n	8007faa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d1ae      	bne.n	8007f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc8:	d11b      	bne.n	8008002 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	f043 0204 	orr.w	r2, r3, #4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008020:	d103      	bne.n	800802a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008028:	e007      	b.n	800803a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008032:	d102      	bne.n	800803a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2208      	movs	r2, #8
 8008038:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
	...

08008048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e267      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d075      	beq.n	8008152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008066:	4b88      	ldr	r3, [pc, #544]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 030c 	and.w	r3, r3, #12
 800806e:	2b04      	cmp	r3, #4
 8008070:	d00c      	beq.n	800808c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008072:	4b85      	ldr	r3, [pc, #532]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800807a:	2b08      	cmp	r3, #8
 800807c:	d112      	bne.n	80080a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800807e:	4b82      	ldr	r3, [pc, #520]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800808a:	d10b      	bne.n	80080a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800808c:	4b7e      	ldr	r3, [pc, #504]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d05b      	beq.n	8008150 <HAL_RCC_OscConfig+0x108>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d157      	bne.n	8008150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e242      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ac:	d106      	bne.n	80080bc <HAL_RCC_OscConfig+0x74>
 80080ae:	4b76      	ldr	r3, [pc, #472]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a75      	ldr	r2, [pc, #468]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e01d      	b.n	80080f8 <HAL_RCC_OscConfig+0xb0>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080c4:	d10c      	bne.n	80080e0 <HAL_RCC_OscConfig+0x98>
 80080c6:	4b70      	ldr	r3, [pc, #448]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a6f      	ldr	r2, [pc, #444]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4b6d      	ldr	r3, [pc, #436]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a6c      	ldr	r2, [pc, #432]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	e00b      	b.n	80080f8 <HAL_RCC_OscConfig+0xb0>
 80080e0:	4b69      	ldr	r3, [pc, #420]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a68      	ldr	r2, [pc, #416]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	4b66      	ldr	r3, [pc, #408]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a65      	ldr	r2, [pc, #404]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80080f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d013      	beq.n	8008128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008100:	f7fb ffa8 	bl	8004054 <HAL_GetTick>
 8008104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008106:	e008      	b.n	800811a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008108:	f7fb ffa4 	bl	8004054 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b64      	cmp	r3, #100	; 0x64
 8008114:	d901      	bls.n	800811a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e207      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800811a:	4b5b      	ldr	r3, [pc, #364]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0f0      	beq.n	8008108 <HAL_RCC_OscConfig+0xc0>
 8008126:	e014      	b.n	8008152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008128:	f7fb ff94 	bl	8004054 <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008130:	f7fb ff90 	bl	8004054 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b64      	cmp	r3, #100	; 0x64
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e1f3      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008142:	4b51      	ldr	r3, [pc, #324]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f0      	bne.n	8008130 <HAL_RCC_OscConfig+0xe8>
 800814e:	e000      	b.n	8008152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d063      	beq.n	8008226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800815e:	4b4a      	ldr	r3, [pc, #296]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00b      	beq.n	8008182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800816a:	4b47      	ldr	r3, [pc, #284]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008172:	2b08      	cmp	r3, #8
 8008174:	d11c      	bne.n	80081b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008176:	4b44      	ldr	r3, [pc, #272]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d116      	bne.n	80081b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008182:	4b41      	ldr	r3, [pc, #260]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <HAL_RCC_OscConfig+0x152>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d001      	beq.n	800819a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e1c7      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819a:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	4937      	ldr	r1, [pc, #220]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ae:	e03a      	b.n	8008226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d020      	beq.n	80081fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081b8:	4b34      	ldr	r3, [pc, #208]	; (800828c <HAL_RCC_OscConfig+0x244>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081be:	f7fb ff49 	bl	8004054 <HAL_GetTick>
 80081c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c4:	e008      	b.n	80081d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081c6:	f7fb ff45 	bl	8004054 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e1a8      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0f0      	beq.n	80081c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e4:	4b28      	ldr	r3, [pc, #160]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	4925      	ldr	r1, [pc, #148]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	600b      	str	r3, [r1, #0]
 80081f8:	e015      	b.n	8008226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <HAL_RCC_OscConfig+0x244>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008200:	f7fb ff28 	bl	8004054 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008206:	e008      	b.n	800821a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008208:	f7fb ff24 	bl	8004054 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d901      	bls.n	800821a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e187      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1f0      	bne.n	8008208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d036      	beq.n	80082a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <HAL_RCC_OscConfig+0x248>)
 800823c:	2201      	movs	r2, #1
 800823e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008240:	f7fb ff08 	bl	8004054 <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008248:	f7fb ff04 	bl	8004054 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e167      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800825a:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <HAL_RCC_OscConfig+0x240>)
 800825c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCC_OscConfig+0x200>
 8008266:	e01b      	b.n	80082a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008268:	4b09      	ldr	r3, [pc, #36]	; (8008290 <HAL_RCC_OscConfig+0x248>)
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800826e:	f7fb fef1 	bl	8004054 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008274:	e00e      	b.n	8008294 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008276:	f7fb feed 	bl	8004054 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d907      	bls.n	8008294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e150      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
 8008288:	40023800 	.word	0x40023800
 800828c:	42470000 	.word	0x42470000
 8008290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008294:	4b88      	ldr	r3, [pc, #544]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1ea      	bne.n	8008276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8097 	beq.w	80083dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082b2:	4b81      	ldr	r3, [pc, #516]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10f      	bne.n	80082de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082be:	2300      	movs	r3, #0
 80082c0:	60bb      	str	r3, [r7, #8]
 80082c2:	4b7d      	ldr	r3, [pc, #500]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	4a7c      	ldr	r2, [pc, #496]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80082c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082cc:	6413      	str	r3, [r2, #64]	; 0x40
 80082ce:	4b7a      	ldr	r3, [pc, #488]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d6:	60bb      	str	r3, [r7, #8]
 80082d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082da:	2301      	movs	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082de:	4b77      	ldr	r3, [pc, #476]	; (80084bc <HAL_RCC_OscConfig+0x474>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d118      	bne.n	800831c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082ea:	4b74      	ldr	r3, [pc, #464]	; (80084bc <HAL_RCC_OscConfig+0x474>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a73      	ldr	r2, [pc, #460]	; (80084bc <HAL_RCC_OscConfig+0x474>)
 80082f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082f6:	f7fb fead 	bl	8004054 <HAL_GetTick>
 80082fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082fc:	e008      	b.n	8008310 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082fe:	f7fb fea9 	bl	8004054 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d901      	bls.n	8008310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e10c      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008310:	4b6a      	ldr	r3, [pc, #424]	; (80084bc <HAL_RCC_OscConfig+0x474>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0f0      	beq.n	80082fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d106      	bne.n	8008332 <HAL_RCC_OscConfig+0x2ea>
 8008324:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008328:	4a63      	ldr	r2, [pc, #396]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6713      	str	r3, [r2, #112]	; 0x70
 8008330:	e01c      	b.n	800836c <HAL_RCC_OscConfig+0x324>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b05      	cmp	r3, #5
 8008338:	d10c      	bne.n	8008354 <HAL_RCC_OscConfig+0x30c>
 800833a:	4b5f      	ldr	r3, [pc, #380]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	4a5e      	ldr	r2, [pc, #376]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008340:	f043 0304 	orr.w	r3, r3, #4
 8008344:	6713      	str	r3, [r2, #112]	; 0x70
 8008346:	4b5c      	ldr	r3, [pc, #368]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834a:	4a5b      	ldr	r2, [pc, #364]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 800834c:	f043 0301 	orr.w	r3, r3, #1
 8008350:	6713      	str	r3, [r2, #112]	; 0x70
 8008352:	e00b      	b.n	800836c <HAL_RCC_OscConfig+0x324>
 8008354:	4b58      	ldr	r3, [pc, #352]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008358:	4a57      	ldr	r2, [pc, #348]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 800835a:	f023 0301 	bic.w	r3, r3, #1
 800835e:	6713      	str	r3, [r2, #112]	; 0x70
 8008360:	4b55      	ldr	r3, [pc, #340]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	4a54      	ldr	r2, [pc, #336]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008366:	f023 0304 	bic.w	r3, r3, #4
 800836a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d015      	beq.n	80083a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008374:	f7fb fe6e 	bl	8004054 <HAL_GetTick>
 8008378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800837a:	e00a      	b.n	8008392 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800837c:	f7fb fe6a 	bl	8004054 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	f241 3288 	movw	r2, #5000	; 0x1388
 800838a:	4293      	cmp	r3, r2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e0cb      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008392:	4b49      	ldr	r3, [pc, #292]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0ee      	beq.n	800837c <HAL_RCC_OscConfig+0x334>
 800839e:	e014      	b.n	80083ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083a0:	f7fb fe58 	bl	8004054 <HAL_GetTick>
 80083a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083a6:	e00a      	b.n	80083be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083a8:	f7fb fe54 	bl	8004054 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e0b5      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083be:	4b3e      	ldr	r3, [pc, #248]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1ee      	bne.n	80083a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d105      	bne.n	80083dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d0:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80083d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d4:	4a38      	ldr	r2, [pc, #224]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80083d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80a1 	beq.w	8008528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083e6:	4b34      	ldr	r3, [pc, #208]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d05c      	beq.n	80084ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d141      	bne.n	800847e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083fa:	4b31      	ldr	r3, [pc, #196]	; (80084c0 <HAL_RCC_OscConfig+0x478>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008400:	f7fb fe28 	bl	8004054 <HAL_GetTick>
 8008404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008406:	e008      	b.n	800841a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008408:	f7fb fe24 	bl	8004054 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d901      	bls.n	800841a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e087      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800841a:	4b27      	ldr	r3, [pc, #156]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1f0      	bne.n	8008408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69da      	ldr	r2, [r3, #28]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	019b      	lsls	r3, r3, #6
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	3b01      	subs	r3, #1
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	491b      	ldr	r1, [pc, #108]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 800844c:	4313      	orrs	r3, r2
 800844e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008450:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <HAL_RCC_OscConfig+0x478>)
 8008452:	2201      	movs	r2, #1
 8008454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008456:	f7fb fdfd 	bl	8004054 <HAL_GetTick>
 800845a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800845c:	e008      	b.n	8008470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800845e:	f7fb fdf9 	bl	8004054 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e05c      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008470:	4b11      	ldr	r3, [pc, #68]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0f0      	beq.n	800845e <HAL_RCC_OscConfig+0x416>
 800847c:	e054      	b.n	8008528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <HAL_RCC_OscConfig+0x478>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008484:	f7fb fde6 	bl	8004054 <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800848c:	f7fb fde2 	bl	8004054 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e045      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <HAL_RCC_OscConfig+0x470>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f0      	bne.n	800848c <HAL_RCC_OscConfig+0x444>
 80084aa:	e03d      	b.n	8008528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d107      	bne.n	80084c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e038      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
 80084b8:	40023800 	.word	0x40023800
 80084bc:	40007000 	.word	0x40007000
 80084c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084c4:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <HAL_RCC_OscConfig+0x4ec>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d028      	beq.n	8008524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084dc:	429a      	cmp	r2, r3
 80084de:	d121      	bne.n	8008524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d11a      	bne.n	8008524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084f4:	4013      	ands	r3, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d111      	bne.n	8008524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	085b      	lsrs	r3, r3, #1
 800850c:	3b01      	subs	r3, #1
 800850e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008510:	429a      	cmp	r2, r3
 8008512:	d107      	bne.n	8008524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008520:	429a      	cmp	r2, r3
 8008522:	d001      	beq.n	8008528 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	40023800 	.word	0x40023800

08008538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e0cc      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800854c:	4b68      	ldr	r3, [pc, #416]	; (80086f0 <HAL_RCC_ClockConfig+0x1b8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d90c      	bls.n	8008574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b65      	ldr	r3, [pc, #404]	; (80086f0 <HAL_RCC_ClockConfig+0x1b8>)
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008562:	4b63      	ldr	r3, [pc, #396]	; (80086f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d001      	beq.n	8008574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e0b8      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d020      	beq.n	80085c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800858c:	4b59      	ldr	r3, [pc, #356]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4a58      	ldr	r2, [pc, #352]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085a4:	4b53      	ldr	r3, [pc, #332]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	4a52      	ldr	r2, [pc, #328]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085b0:	4b50      	ldr	r3, [pc, #320]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	494d      	ldr	r1, [pc, #308]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d044      	beq.n	8008658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d107      	bne.n	80085e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085d6:	4b47      	ldr	r3, [pc, #284]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d119      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e07f      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d003      	beq.n	80085f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d107      	bne.n	8008606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f6:	4b3f      	ldr	r3, [pc, #252]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e06f      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008606:	4b3b      	ldr	r3, [pc, #236]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e067      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008616:	4b37      	ldr	r3, [pc, #220]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f023 0203 	bic.w	r2, r3, #3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	4934      	ldr	r1, [pc, #208]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008624:	4313      	orrs	r3, r2
 8008626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008628:	f7fb fd14 	bl	8004054 <HAL_GetTick>
 800862c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862e:	e00a      	b.n	8008646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008630:	f7fb fd10 	bl	8004054 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f241 3288 	movw	r2, #5000	; 0x1388
 800863e:	4293      	cmp	r3, r2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e04f      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008646:	4b2b      	ldr	r3, [pc, #172]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 020c 	and.w	r2, r3, #12
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	429a      	cmp	r2, r3
 8008656:	d1eb      	bne.n	8008630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008658:	4b25      	ldr	r3, [pc, #148]	; (80086f0 <HAL_RCC_ClockConfig+0x1b8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d20c      	bcs.n	8008680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008666:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800866e:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	429a      	cmp	r2, r3
 800867a:	d001      	beq.n	8008680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e032      	b.n	80086e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d008      	beq.n	800869e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800868c:	4b19      	ldr	r3, [pc, #100]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	4916      	ldr	r1, [pc, #88]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 800869a:	4313      	orrs	r3, r2
 800869c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0308 	and.w	r3, r3, #8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086aa:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	490e      	ldr	r1, [pc, #56]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086be:	f000 f821 	bl	8008704 <HAL_RCC_GetSysClockFreq>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <HAL_RCC_ClockConfig+0x1bc>)
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	091b      	lsrs	r3, r3, #4
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	490a      	ldr	r1, [pc, #40]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 80086d0:	5ccb      	ldrb	r3, [r1, r3]
 80086d2:	fa22 f303 	lsr.w	r3, r2, r3
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <HAL_RCC_ClockConfig+0x1c8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fb fc74 	bl	8003fcc <HAL_InitTick>

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40023c00 	.word	0x40023c00
 80086f4:	40023800 	.word	0x40023800
 80086f8:	0800dd34 	.word	0x0800dd34
 80086fc:	20000000 	.word	0x20000000
 8008700:	2000000c 	.word	0x2000000c

08008704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008708:	b094      	sub	sp, #80	; 0x50
 800870a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	647b      	str	r3, [r7, #68]	; 0x44
 8008710:	2300      	movs	r3, #0
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008714:	2300      	movs	r3, #0
 8008716:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800871c:	4b79      	ldr	r3, [pc, #484]	; (8008904 <HAL_RCC_GetSysClockFreq+0x200>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 030c 	and.w	r3, r3, #12
 8008724:	2b08      	cmp	r3, #8
 8008726:	d00d      	beq.n	8008744 <HAL_RCC_GetSysClockFreq+0x40>
 8008728:	2b08      	cmp	r3, #8
 800872a:	f200 80e1 	bhi.w	80088f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <HAL_RCC_GetSysClockFreq+0x34>
 8008732:	2b04      	cmp	r3, #4
 8008734:	d003      	beq.n	800873e <HAL_RCC_GetSysClockFreq+0x3a>
 8008736:	e0db      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008738:	4b73      	ldr	r3, [pc, #460]	; (8008908 <HAL_RCC_GetSysClockFreq+0x204>)
 800873a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800873c:	e0db      	b.n	80088f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800873e:	4b73      	ldr	r3, [pc, #460]	; (800890c <HAL_RCC_GetSysClockFreq+0x208>)
 8008740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008742:	e0d8      	b.n	80088f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008744:	4b6f      	ldr	r3, [pc, #444]	; (8008904 <HAL_RCC_GetSysClockFreq+0x200>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800874e:	4b6d      	ldr	r3, [pc, #436]	; (8008904 <HAL_RCC_GetSysClockFreq+0x200>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d063      	beq.n	8008822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800875a:	4b6a      	ldr	r3, [pc, #424]	; (8008904 <HAL_RCC_GetSysClockFreq+0x200>)
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	099b      	lsrs	r3, r3, #6
 8008760:	2200      	movs	r2, #0
 8008762:	63bb      	str	r3, [r7, #56]	; 0x38
 8008764:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876c:	633b      	str	r3, [r7, #48]	; 0x30
 800876e:	2300      	movs	r3, #0
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
 8008772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008776:	4622      	mov	r2, r4
 8008778:	462b      	mov	r3, r5
 800877a:	f04f 0000 	mov.w	r0, #0
 800877e:	f04f 0100 	mov.w	r1, #0
 8008782:	0159      	lsls	r1, r3, #5
 8008784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008788:	0150      	lsls	r0, r2, #5
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4621      	mov	r1, r4
 8008790:	1a51      	subs	r1, r2, r1
 8008792:	6139      	str	r1, [r7, #16]
 8008794:	4629      	mov	r1, r5
 8008796:	eb63 0301 	sbc.w	r3, r3, r1
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087a8:	4659      	mov	r1, fp
 80087aa:	018b      	lsls	r3, r1, #6
 80087ac:	4651      	mov	r1, sl
 80087ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087b2:	4651      	mov	r1, sl
 80087b4:	018a      	lsls	r2, r1, #6
 80087b6:	4651      	mov	r1, sl
 80087b8:	ebb2 0801 	subs.w	r8, r2, r1
 80087bc:	4659      	mov	r1, fp
 80087be:	eb63 0901 	sbc.w	r9, r3, r1
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087d6:	4690      	mov	r8, r2
 80087d8:	4699      	mov	r9, r3
 80087da:	4623      	mov	r3, r4
 80087dc:	eb18 0303 	adds.w	r3, r8, r3
 80087e0:	60bb      	str	r3, [r7, #8]
 80087e2:	462b      	mov	r3, r5
 80087e4:	eb49 0303 	adc.w	r3, r9, r3
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087f6:	4629      	mov	r1, r5
 80087f8:	024b      	lsls	r3, r1, #9
 80087fa:	4621      	mov	r1, r4
 80087fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008800:	4621      	mov	r1, r4
 8008802:	024a      	lsls	r2, r1, #9
 8008804:	4610      	mov	r0, r2
 8008806:	4619      	mov	r1, r3
 8008808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800880a:	2200      	movs	r2, #0
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
 800880e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008814:	f7f7 fd3c 	bl	8000290 <__aeabi_uldivmod>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4613      	mov	r3, r2
 800881e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008820:	e058      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008822:	4b38      	ldr	r3, [pc, #224]	; (8008904 <HAL_RCC_GetSysClockFreq+0x200>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	099b      	lsrs	r3, r3, #6
 8008828:	2200      	movs	r2, #0
 800882a:	4618      	mov	r0, r3
 800882c:	4611      	mov	r1, r2
 800882e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008832:	623b      	str	r3, [r7, #32]
 8008834:	2300      	movs	r3, #0
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
 8008838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800883c:	4642      	mov	r2, r8
 800883e:	464b      	mov	r3, r9
 8008840:	f04f 0000 	mov.w	r0, #0
 8008844:	f04f 0100 	mov.w	r1, #0
 8008848:	0159      	lsls	r1, r3, #5
 800884a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800884e:	0150      	lsls	r0, r2, #5
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4641      	mov	r1, r8
 8008856:	ebb2 0a01 	subs.w	sl, r2, r1
 800885a:	4649      	mov	r1, r9
 800885c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800886c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008874:	ebb2 040a 	subs.w	r4, r2, sl
 8008878:	eb63 050b 	sbc.w	r5, r3, fp
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	00eb      	lsls	r3, r5, #3
 8008886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800888a:	00e2      	lsls	r2, r4, #3
 800888c:	4614      	mov	r4, r2
 800888e:	461d      	mov	r5, r3
 8008890:	4643      	mov	r3, r8
 8008892:	18e3      	adds	r3, r4, r3
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	464b      	mov	r3, r9
 8008898:	eb45 0303 	adc.w	r3, r5, r3
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	f04f 0200 	mov.w	r2, #0
 80088a2:	f04f 0300 	mov.w	r3, #0
 80088a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088aa:	4629      	mov	r1, r5
 80088ac:	028b      	lsls	r3, r1, #10
 80088ae:	4621      	mov	r1, r4
 80088b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088b4:	4621      	mov	r1, r4
 80088b6:	028a      	lsls	r2, r1, #10
 80088b8:	4610      	mov	r0, r2
 80088ba:	4619      	mov	r1, r3
 80088bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088be:	2200      	movs	r2, #0
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	61fa      	str	r2, [r7, #28]
 80088c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088c8:	f7f7 fce2 	bl	8000290 <__aeabi_uldivmod>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4613      	mov	r3, r2
 80088d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <HAL_RCC_GetSysClockFreq+0x200>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	3301      	adds	r3, #1
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80088e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088ee:	e002      	b.n	80088f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <HAL_RCC_GetSysClockFreq+0x204>)
 80088f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3750      	adds	r7, #80	; 0x50
 80088fc:	46bd      	mov	sp, r7
 80088fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008902:	bf00      	nop
 8008904:	40023800 	.word	0x40023800
 8008908:	00f42400 	.word	0x00f42400
 800890c:	007a1200 	.word	0x007a1200

08008910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008914:	4b03      	ldr	r3, [pc, #12]	; (8008924 <HAL_RCC_GetHCLKFreq+0x14>)
 8008916:	681b      	ldr	r3, [r3, #0]
}
 8008918:	4618      	mov	r0, r3
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000000 	.word	0x20000000

08008928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800892c:	f7ff fff0 	bl	8008910 <HAL_RCC_GetHCLKFreq>
 8008930:	4602      	mov	r2, r0
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	0a9b      	lsrs	r3, r3, #10
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	4903      	ldr	r1, [pc, #12]	; (800894c <HAL_RCC_GetPCLK1Freq+0x24>)
 800893e:	5ccb      	ldrb	r3, [r1, r3]
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd80      	pop	{r7, pc}
 8008948:	40023800 	.word	0x40023800
 800894c:	0800dd44 	.word	0x0800dd44

08008950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008954:	f7ff ffdc 	bl	8008910 <HAL_RCC_GetHCLKFreq>
 8008958:	4602      	mov	r2, r0
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	0b5b      	lsrs	r3, r3, #13
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	4903      	ldr	r1, [pc, #12]	; (8008974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008966:	5ccb      	ldrb	r3, [r1, r3]
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd80      	pop	{r7, pc}
 8008970:	40023800 	.word	0x40023800
 8008974:	0800dd44 	.word	0x0800dd44

08008978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e041      	b.n	8008a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d106      	bne.n	80089a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f8 fcfe 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3304      	adds	r3, #4
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f000 fed2 	bl	8009760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d001      	beq.n	8008a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e044      	b.n	8008aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a1e      	ldr	r2, [pc, #120]	; (8008ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d018      	beq.n	8008a84 <HAL_TIM_Base_Start_IT+0x6c>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5a:	d013      	beq.n	8008a84 <HAL_TIM_Base_Start_IT+0x6c>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a1a      	ldr	r2, [pc, #104]	; (8008acc <HAL_TIM_Base_Start_IT+0xb4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d00e      	beq.n	8008a84 <HAL_TIM_Base_Start_IT+0x6c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a19      	ldr	r2, [pc, #100]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d009      	beq.n	8008a84 <HAL_TIM_Base_Start_IT+0x6c>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <HAL_TIM_Base_Start_IT+0x6c>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d111      	bne.n	8008aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b06      	cmp	r3, #6
 8008a94:	d010      	beq.n	8008ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f042 0201 	orr.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa6:	e007      	b.n	8008ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0201 	orr.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	40000800 	.word	0x40000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	40014000 	.word	0x40014000

08008adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e041      	b.n	8008b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f8 fc74 	bl	80013f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f000 fe20 	bl	8009760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d109      	bne.n	8008ba8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	e022      	b.n	8008bee <HAL_TIM_PWM_Start_DMA+0x72>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d109      	bne.n	8008bc2 <HAL_TIM_PWM_Start_DMA+0x46>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	bf0c      	ite	eq
 8008bba:	2301      	moveq	r3, #1
 8008bbc:	2300      	movne	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	e015      	b.n	8008bee <HAL_TIM_PWM_Start_DMA+0x72>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	d109      	bne.n	8008bdc <HAL_TIM_PWM_Start_DMA+0x60>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	bf0c      	ite	eq
 8008bd4:	2301      	moveq	r3, #1
 8008bd6:	2300      	movne	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	e008      	b.n	8008bee <HAL_TIM_PWM_Start_DMA+0x72>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e15d      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d109      	bne.n	8008c10 <HAL_TIM_PWM_Start_DMA+0x94>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	bf0c      	ite	eq
 8008c08:	2301      	moveq	r3, #1
 8008c0a:	2300      	movne	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	e022      	b.n	8008c56 <HAL_TIM_PWM_Start_DMA+0xda>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d109      	bne.n	8008c2a <HAL_TIM_PWM_Start_DMA+0xae>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	bf0c      	ite	eq
 8008c22:	2301      	moveq	r3, #1
 8008c24:	2300      	movne	r3, #0
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	e015      	b.n	8008c56 <HAL_TIM_PWM_Start_DMA+0xda>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d109      	bne.n	8008c44 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e008      	b.n	8008c56 <HAL_TIM_PWM_Start_DMA+0xda>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	bf0c      	ite	eq
 8008c50:	2301      	moveq	r3, #1
 8008c52:	2300      	movne	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d024      	beq.n	8008ca4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <HAL_TIM_PWM_Start_DMA+0xea>
 8008c60:	887b      	ldrh	r3, [r7, #2]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e123      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c78:	e016      	b.n	8008ca8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c88:	e00e      	b.n	8008ca8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_PWM_Start_DMA+0x11e>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c98:	e006      	b.n	8008ca8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ca2:	e001      	b.n	8008ca8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e104      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b0c      	cmp	r3, #12
 8008cac:	f200 80ae 	bhi.w	8008e0c <HAL_TIM_PWM_Start_DMA+0x290>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008ced 	.word	0x08008ced
 8008cbc:	08008e0d 	.word	0x08008e0d
 8008cc0:	08008e0d 	.word	0x08008e0d
 8008cc4:	08008e0d 	.word	0x08008e0d
 8008cc8:	08008d35 	.word	0x08008d35
 8008ccc:	08008e0d 	.word	0x08008e0d
 8008cd0:	08008e0d 	.word	0x08008e0d
 8008cd4:	08008e0d 	.word	0x08008e0d
 8008cd8:	08008d7d 	.word	0x08008d7d
 8008cdc:	08008e0d 	.word	0x08008e0d
 8008ce0:	08008e0d 	.word	0x08008e0d
 8008ce4:	08008e0d 	.word	0x08008e0d
 8008ce8:	08008dc5 	.word	0x08008dc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	4a72      	ldr	r2, [pc, #456]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008cf2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	4a71      	ldr	r2, [pc, #452]	; (8008ec0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	4a70      	ldr	r2, [pc, #448]	; (8008ec4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3334      	adds	r3, #52	; 0x34
 8008d10:	461a      	mov	r2, r3
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	f7fb ff90 	bl	8004c38 <HAL_DMA_Start_IT>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e0c7      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d30:	60da      	str	r2, [r3, #12]
      break;
 8008d32:	e06e      	b.n	8008e12 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	4a60      	ldr	r2, [pc, #384]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	4a5f      	ldr	r2, [pc, #380]	; (8008ec0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	4a5e      	ldr	r2, [pc, #376]	; (8008ec4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3338      	adds	r3, #56	; 0x38
 8008d58:	461a      	mov	r2, r3
 8008d5a:	887b      	ldrh	r3, [r7, #2]
 8008d5c:	f7fb ff6c 	bl	8004c38 <HAL_DMA_Start_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e0a3      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d78:	60da      	str	r2, [r3, #12]
      break;
 8008d7a:	e04a      	b.n	8008e12 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	4a4e      	ldr	r2, [pc, #312]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008d82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4a4d      	ldr	r2, [pc, #308]	; (8008ec0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	4a4c      	ldr	r2, [pc, #304]	; (8008ec4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008d92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d98:	6879      	ldr	r1, [r7, #4]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	333c      	adds	r3, #60	; 0x3c
 8008da0:	461a      	mov	r2, r3
 8008da2:	887b      	ldrh	r3, [r7, #2]
 8008da4:	f7fb ff48 	bl	8004c38 <HAL_DMA_Start_IT>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e07f      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dc0:	60da      	str	r2, [r3, #12]
      break;
 8008dc2:	e026      	b.n	8008e12 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	4a3c      	ldr	r2, [pc, #240]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008dca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	4a3b      	ldr	r2, [pc, #236]	; (8008ec0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	4a3a      	ldr	r2, [pc, #232]	; (8008ec4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008dda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3340      	adds	r3, #64	; 0x40
 8008de8:	461a      	mov	r2, r3
 8008dea:	887b      	ldrh	r3, [r7, #2]
 8008dec:	f7fb ff24 	bl	8004c38 <HAL_DMA_Start_IT>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e05b      	b.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e08:	60da      	str	r2, [r3, #12]
      break;
 8008e0a:	e002      	b.n	8008e12 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e10:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d14b      	bne.n	8008eb0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 ff4f 	bl	8009cc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a27      	ldr	r2, [pc, #156]	; (8008ec8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d107      	bne.n	8008e40 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a20      	ldr	r2, [pc, #128]	; (8008ec8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d018      	beq.n	8008e7c <HAL_TIM_PWM_Start_DMA+0x300>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e52:	d013      	beq.n	8008e7c <HAL_TIM_PWM_Start_DMA+0x300>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <HAL_TIM_PWM_Start_DMA+0x350>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00e      	beq.n	8008e7c <HAL_TIM_PWM_Start_DMA+0x300>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d009      	beq.n	8008e7c <HAL_TIM_PWM_Start_DMA+0x300>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <HAL_TIM_PWM_Start_DMA+0x300>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d111      	bne.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b06      	cmp	r3, #6
 8008e8c:	d010      	beq.n	8008eb0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0201 	orr.w	r2, r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e9e:	e007      	b.n	8008eb0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0201 	orr.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	08009651 	.word	0x08009651
 8008ec0:	080096f9 	.word	0x080096f9
 8008ec4:	080095bf 	.word	0x080095bf
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00
 8008ed8:	40014000 	.word	0x40014000

08008edc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b0c      	cmp	r3, #12
 8008eee:	d855      	bhi.n	8008f9c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f2d 	.word	0x08008f2d
 8008efc:	08008f9d 	.word	0x08008f9d
 8008f00:	08008f9d 	.word	0x08008f9d
 8008f04:	08008f9d 	.word	0x08008f9d
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f9d 	.word	0x08008f9d
 8008f10:	08008f9d 	.word	0x08008f9d
 8008f14:	08008f9d 	.word	0x08008f9d
 8008f18:	08008f65 	.word	0x08008f65
 8008f1c:	08008f9d 	.word	0x08008f9d
 8008f20:	08008f9d 	.word	0x08008f9d
 8008f24:	08008f9d 	.word	0x08008f9d
 8008f28:	08008f81 	.word	0x08008f81
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fb ff41 	bl	8004dc8 <HAL_DMA_Abort_IT>
      break;
 8008f46:	e02c      	b.n	8008fa2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fb ff33 	bl	8004dc8 <HAL_DMA_Abort_IT>
      break;
 8008f62:	e01e      	b.n	8008fa2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fb ff25 	bl	8004dc8 <HAL_DMA_Abort_IT>
      break;
 8008f7e:	e010      	b.n	8008fa2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fb ff17 	bl	8004dc8 <HAL_DMA_Abort_IT>
      break;
 8008f9a:	e002      	b.n	8008fa2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d157      	bne.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2200      	movs	r2, #0
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fe87 	bl	8009cc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a2a      	ldr	r2, [pc, #168]	; (8009064 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d117      	bne.n	8008ff0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6a1a      	ldr	r2, [r3, #32]
 8008fc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10f      	bne.n	8008ff0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a1a      	ldr	r2, [r3, #32]
 8008fd6:	f240 4344 	movw	r3, #1092	; 0x444
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d107      	bne.n	8008ff0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6a1a      	ldr	r2, [r3, #32]
 8008ff6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10f      	bne.n	8009020 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6a1a      	ldr	r2, [r3, #32]
 8009006:	f240 4344 	movw	r3, #1092	; 0x444
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d107      	bne.n	8009020 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0201 	bic.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <HAL_TIM_PWM_Stop_DMA+0x154>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800902e:	e013      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b04      	cmp	r3, #4
 8009034:	d104      	bne.n	8009040 <HAL_TIM_PWM_Stop_DMA+0x164>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800903e:	e00b      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b08      	cmp	r3, #8
 8009044:	d104      	bne.n	8009050 <HAL_TIM_PWM_Stop_DMA+0x174>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904e:	e003      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000

08009068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d020      	beq.n	80090cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01b      	beq.n	80090cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0202 	mvn.w	r2, #2
 800909c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fa5b 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 80090b8:	e005      	b.n	80090c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa4d 	bl	800955a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7f8 fd6b 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d020      	beq.n	8009118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01b      	beq.n	8009118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0204 	mvn.w	r2, #4
 80090e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2202      	movs	r2, #2
 80090ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa35 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 8009104:	e005      	b.n	8009112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa27 	bl	800955a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7f8 fd45 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d020      	beq.n	8009164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f003 0308 	and.w	r3, r3, #8
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01b      	beq.n	8009164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0208 	mvn.w	r2, #8
 8009134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2204      	movs	r2, #4
 800913a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa0f 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 8009150:	e005      	b.n	800915e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa01 	bl	800955a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7f8 fd1f 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b00      	cmp	r3, #0
 800916c:	d020      	beq.n	80091b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01b      	beq.n	80091b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0210 	mvn.w	r2, #16
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2208      	movs	r2, #8
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f9e9 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f9db 	bl	800955a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7f8 fcf9 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00c      	beq.n	80091d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0201 	mvn.w	r2, #1
 80091cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f002 fb0c 	bl	800b7ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00c      	beq.n	80091f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fe04 	bl	8009e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00c      	beq.n	800921c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d007      	beq.n	800921c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9bd 	bl	8009596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f003 0320 	and.w	r3, r3, #32
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00c      	beq.n	8009240 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d007      	beq.n	8009240 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f06f 0220 	mvn.w	r2, #32
 8009238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fdd6 	bl	8009dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009262:	2302      	movs	r3, #2
 8009264:	e0ae      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b0c      	cmp	r3, #12
 8009272:	f200 809f 	bhi.w	80093b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009276:	a201      	add	r2, pc, #4	; (adr r2, 800927c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092b1 	.word	0x080092b1
 8009280:	080093b5 	.word	0x080093b5
 8009284:	080093b5 	.word	0x080093b5
 8009288:	080093b5 	.word	0x080093b5
 800928c:	080092f1 	.word	0x080092f1
 8009290:	080093b5 	.word	0x080093b5
 8009294:	080093b5 	.word	0x080093b5
 8009298:	080093b5 	.word	0x080093b5
 800929c:	08009333 	.word	0x08009333
 80092a0:	080093b5 	.word	0x080093b5
 80092a4:	080093b5 	.word	0x080093b5
 80092a8:	080093b5 	.word	0x080093b5
 80092ac:	08009373 	.word	0x08009373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fade 	bl	8009878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0208 	orr.w	r2, r2, #8
 80092ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0204 	bic.w	r2, r2, #4
 80092da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6999      	ldr	r1, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	619a      	str	r2, [r3, #24]
      break;
 80092ee:	e064      	b.n	80093ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fb24 	bl	8009944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800930a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6999      	ldr	r1, [r3, #24]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	021a      	lsls	r2, r3, #8
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	619a      	str	r2, [r3, #24]
      break;
 8009330:	e043      	b.n	80093ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fb6f 	bl	8009a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0208 	orr.w	r2, r2, #8
 800934c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0204 	bic.w	r2, r2, #4
 800935c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	691a      	ldr	r2, [r3, #16]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	61da      	str	r2, [r3, #28]
      break;
 8009370:	e023      	b.n	80093ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68b9      	ldr	r1, [r7, #8]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fbb9 	bl	8009af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69da      	ldr	r2, [r3, #28]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800938c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800939c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69d9      	ldr	r1, [r3, #28]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	021a      	lsls	r2, r3, #8
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	61da      	str	r2, [r3, #28]
      break;
 80093b2:	e002      	b.n	80093ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	75fb      	strb	r3, [r7, #23]
      break;
 80093b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_TIM_ConfigClockSource+0x1c>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e0b4      	b.n	8009552 <HAL_TIM_ConfigClockSource+0x186>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800940e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009420:	d03e      	beq.n	80094a0 <HAL_TIM_ConfigClockSource+0xd4>
 8009422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009426:	f200 8087 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 800942a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800942e:	f000 8086 	beq.w	800953e <HAL_TIM_ConfigClockSource+0x172>
 8009432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009436:	d87f      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009438:	2b70      	cmp	r3, #112	; 0x70
 800943a:	d01a      	beq.n	8009472 <HAL_TIM_ConfigClockSource+0xa6>
 800943c:	2b70      	cmp	r3, #112	; 0x70
 800943e:	d87b      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009440:	2b60      	cmp	r3, #96	; 0x60
 8009442:	d050      	beq.n	80094e6 <HAL_TIM_ConfigClockSource+0x11a>
 8009444:	2b60      	cmp	r3, #96	; 0x60
 8009446:	d877      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009448:	2b50      	cmp	r3, #80	; 0x50
 800944a:	d03c      	beq.n	80094c6 <HAL_TIM_ConfigClockSource+0xfa>
 800944c:	2b50      	cmp	r3, #80	; 0x50
 800944e:	d873      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009450:	2b40      	cmp	r3, #64	; 0x40
 8009452:	d058      	beq.n	8009506 <HAL_TIM_ConfigClockSource+0x13a>
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d86f      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009458:	2b30      	cmp	r3, #48	; 0x30
 800945a:	d064      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x15a>
 800945c:	2b30      	cmp	r3, #48	; 0x30
 800945e:	d86b      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009460:	2b20      	cmp	r3, #32
 8009462:	d060      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x15a>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d867      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05c      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x15a>
 800946c:	2b10      	cmp	r3, #16
 800946e:	d05a      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x15a>
 8009470:	e062      	b.n	8009538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009482:	f000 fbff 	bl	8009c84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	609a      	str	r2, [r3, #8]
      break;
 800949e:	e04f      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094b0:	f000 fbe8 	bl	8009c84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094c2:	609a      	str	r2, [r3, #8]
      break;
 80094c4:	e03c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d2:	461a      	mov	r2, r3
 80094d4:	f000 fb5c 	bl	8009b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2150      	movs	r1, #80	; 0x50
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fbb5 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 80094e4:	e02c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094f2:	461a      	mov	r2, r3
 80094f4:	f000 fb7b 	bl	8009bee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2160      	movs	r1, #96	; 0x60
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fba5 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009504:	e01c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009512:	461a      	mov	r2, r3
 8009514:	f000 fb3c 	bl	8009b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2140      	movs	r1, #64	; 0x40
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fb95 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009524:	e00c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f000 fb8c 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 8009536:	e003      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
      break;
 800953c:	e000      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800953e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d107      	bne.n	80095e6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095e4:	e02a      	b.n	800963c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d107      	bne.n	8009600 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2202      	movs	r2, #2
 80095f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095fe:	e01d      	b.n	800963c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	429a      	cmp	r2, r3
 8009608:	d107      	bne.n	800961a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2204      	movs	r2, #4
 800960e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009618:	e010      	b.n	800963c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d107      	bne.n	8009634 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2208      	movs	r2, #8
 8009628:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009632:	e003      	b.n	800963c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff ffb4 	bl	80095aa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	771a      	strb	r2, [r3, #28]
}
 8009648:	bf00      	nop
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	429a      	cmp	r2, r3
 8009666:	d10b      	bne.n	8009680 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d136      	bne.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800967e:	e031      	b.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d10b      	bne.n	80096a2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2202      	movs	r2, #2
 800968e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d125      	bne.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096a0:	e020      	b.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d10b      	bne.n	80096c4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2204      	movs	r2, #4
 80096b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d114      	bne.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096c2:	e00f      	b.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d10a      	bne.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2208      	movs	r2, #8
 80096d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7f8 fa59 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	771a      	strb	r2, [r3, #28]
}
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d103      	bne.n	8009718 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2201      	movs	r2, #1
 8009714:	771a      	strb	r2, [r3, #28]
 8009716:	e019      	b.n	800974c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	429a      	cmp	r2, r3
 8009720:	d103      	bne.n	800972a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2202      	movs	r2, #2
 8009726:	771a      	strb	r2, [r3, #28]
 8009728:	e010      	b.n	800974c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	429a      	cmp	r2, r3
 8009732:	d103      	bne.n	800973c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2204      	movs	r2, #4
 8009738:	771a      	strb	r2, [r3, #28]
 800973a:	e007      	b.n	800974c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d102      	bne.n	800974c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2208      	movs	r2, #8
 800974a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7ff ff18 	bl	8009582 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	771a      	strb	r2, [r3, #28]
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a3a      	ldr	r2, [pc, #232]	; (800985c <TIM_Base_SetConfig+0xfc>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00f      	beq.n	8009798 <TIM_Base_SetConfig+0x38>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977e:	d00b      	beq.n	8009798 <TIM_Base_SetConfig+0x38>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a37      	ldr	r2, [pc, #220]	; (8009860 <TIM_Base_SetConfig+0x100>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d007      	beq.n	8009798 <TIM_Base_SetConfig+0x38>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a36      	ldr	r2, [pc, #216]	; (8009864 <TIM_Base_SetConfig+0x104>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_Base_SetConfig+0x38>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a35      	ldr	r2, [pc, #212]	; (8009868 <TIM_Base_SetConfig+0x108>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d108      	bne.n	80097aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a2b      	ldr	r2, [pc, #172]	; (800985c <TIM_Base_SetConfig+0xfc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d01b      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b8:	d017      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a28      	ldr	r2, [pc, #160]	; (8009860 <TIM_Base_SetConfig+0x100>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d013      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a27      	ldr	r2, [pc, #156]	; (8009864 <TIM_Base_SetConfig+0x104>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00f      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a26      	ldr	r2, [pc, #152]	; (8009868 <TIM_Base_SetConfig+0x108>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d00b      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a25      	ldr	r2, [pc, #148]	; (800986c <TIM_Base_SetConfig+0x10c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d007      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a24      	ldr	r2, [pc, #144]	; (8009870 <TIM_Base_SetConfig+0x110>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d003      	beq.n	80097ea <TIM_Base_SetConfig+0x8a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a23      	ldr	r2, [pc, #140]	; (8009874 <TIM_Base_SetConfig+0x114>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d108      	bne.n	80097fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a0e      	ldr	r2, [pc, #56]	; (800985c <TIM_Base_SetConfig+0xfc>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d103      	bne.n	8009830 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b01      	cmp	r3, #1
 8009840:	d105      	bne.n	800984e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f023 0201 	bic.w	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	611a      	str	r2, [r3, #16]
  }
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40010000 	.word	0x40010000
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40000c00 	.word	0x40000c00
 800986c:	40014000 	.word	0x40014000
 8009870:	40014400 	.word	0x40014400
 8009874:	40014800 	.word	0x40014800

08009878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	f023 0201 	bic.w	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f023 0302 	bic.w	r3, r3, #2
 80098c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a1c      	ldr	r2, [pc, #112]	; (8009940 <TIM_OC1_SetConfig+0xc8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d10c      	bne.n	80098ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f023 0308 	bic.w	r3, r3, #8
 80098da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f023 0304 	bic.w	r3, r3, #4
 80098ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a13      	ldr	r2, [pc, #76]	; (8009940 <TIM_OC1_SetConfig+0xc8>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d111      	bne.n	800991a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	4313      	orrs	r3, r2
 8009918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	621a      	str	r2, [r3, #32]
}
 8009934:	bf00      	nop
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40010000 	.word	0x40010000

08009944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	f023 0210 	bic.w	r2, r3, #16
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	021b      	lsls	r3, r3, #8
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f023 0320 	bic.w	r3, r3, #32
 800998e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4313      	orrs	r3, r2
 800999a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a1e      	ldr	r2, [pc, #120]	; (8009a18 <TIM_OC2_SetConfig+0xd4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d10d      	bne.n	80099c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <TIM_OC2_SetConfig+0xd4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d113      	bne.n	80099f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	621a      	str	r2, [r3, #32]
}
 8009a0a:	bf00      	nop
 8009a0c:	371c      	adds	r7, #28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000

08009a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a1d      	ldr	r2, [pc, #116]	; (8009aec <TIM_OC3_SetConfig+0xd0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d10d      	bne.n	8009a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a14      	ldr	r2, [pc, #80]	; (8009aec <TIM_OC3_SetConfig+0xd0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d113      	bne.n	8009ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	621a      	str	r2, [r3, #32]
}
 8009ae0:	bf00      	nop
 8009ae2:	371c      	adds	r7, #28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	40010000 	.word	0x40010000

08009af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	031b      	lsls	r3, r3, #12
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a10      	ldr	r2, [pc, #64]	; (8009b8c <TIM_OC4_SetConfig+0x9c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d109      	bne.n	8009b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	019b      	lsls	r3, r3, #6
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	621a      	str	r2, [r3, #32]
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40010000 	.word	0x40010000

08009b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f023 030a 	bic.w	r3, r3, #10
 8009bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	621a      	str	r2, [r3, #32]
}
 8009be2:	bf00      	nop
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b087      	sub	sp, #28
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	f023 0210 	bic.w	r2, r3, #16
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	031b      	lsls	r3, r3, #12
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	621a      	str	r2, [r3, #32]
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f043 0307 	orr.w	r3, r3, #7
 8009c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	609a      	str	r2, [r3, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	021a      	lsls	r2, r3, #8
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	609a      	str	r2, [r3, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f003 031f 	and.w	r3, r3, #31
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a1a      	ldr	r2, [r3, #32]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	43db      	mvns	r3, r3
 8009ce6:	401a      	ands	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1a      	ldr	r2, [r3, #32]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d101      	bne.n	8009d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e050      	b.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a1c      	ldr	r2, [pc, #112]	; (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d018      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d74:	d013      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d00e      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a16      	ldr	r2, [pc, #88]	; (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d009      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d004      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a13      	ldr	r2, [pc, #76]	; (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d10c      	bne.n	8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40014000 	.word	0x40014000

08009dec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e042      	b.n	8009eac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7f7 fb6e 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2224      	movs	r2, #36	; 0x24
 8009e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 ff85 	bl	800ad68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	691a      	ldr	r2, [r3, #16]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	695a      	ldr	r2, [r3, #20]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08a      	sub	sp, #40	; 0x28
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d175      	bne.n	8009fc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <HAL_UART_Transmit+0x2c>
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e06e      	b.n	8009fc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2221      	movs	r2, #33	; 0x21
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ef2:	f7fa f8af 	bl	8004054 <HAL_GetTick>
 8009ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	88fa      	ldrh	r2, [r7, #6]
 8009efc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	88fa      	ldrh	r2, [r7, #6]
 8009f02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0c:	d108      	bne.n	8009f20 <HAL_UART_Transmit+0x6c>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d104      	bne.n	8009f20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	61bb      	str	r3, [r7, #24]
 8009f1e:	e003      	b.n	8009f28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f28:	e02e      	b.n	8009f88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2200      	movs	r2, #0
 8009f32:	2180      	movs	r1, #128	; 0x80
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fc5d 	bl	800a7f4 <UART_WaitOnFlagUntilTimeout>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e03a      	b.n	8009fc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10b      	bne.n	8009f6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	3302      	adds	r3, #2
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	e007      	b.n	8009f7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	781a      	ldrb	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	3301      	adds	r3, #1
 8009f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	3b01      	subs	r3, #1
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1cb      	bne.n	8009f2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2140      	movs	r1, #64	; 0x40
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f000 fc29 	bl	800a7f4 <UART_WaitOnFlagUntilTimeout>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e006      	b.n	8009fc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e000      	b.n	8009fc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009fc0:	2302      	movs	r3, #2
  }
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3720      	adds	r7, #32
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b08c      	sub	sp, #48	; 0x30
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d14a      	bne.n	800a07a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009fea:	88fb      	ldrh	r3, [r7, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e043      	b.n	800a07c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a000:	88fb      	ldrh	r3, [r7, #6]
 800a002:	461a      	mov	r2, r3
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fc4e 	bl	800a8a8 <UART_Start_Receive_DMA>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a016:	2b00      	cmp	r3, #0
 800a018:	d12c      	bne.n	800a074 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d125      	bne.n	800a06e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a022:	2300      	movs	r3, #0
 800a024:	613b      	str	r3, [r7, #16]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	613b      	str	r3, [r7, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	613b      	str	r3, [r7, #16]
 800a036:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	330c      	adds	r3, #12
 800a03e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	617b      	str	r3, [r7, #20]
   return(result);
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f043 0310 	orr.w	r3, r3, #16
 800a04e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a058:	627a      	str	r2, [r7, #36]	; 0x24
 800a05a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	6a39      	ldr	r1, [r7, #32]
 800a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	61fb      	str	r3, [r7, #28]
   return(result);
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e5      	bne.n	800a038 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a06c:	e002      	b.n	800a074 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a078:	e000      	b.n	800a07c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800a07a:	2302      	movs	r3, #2
  }
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3730      	adds	r7, #48	; 0x30
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b0ba      	sub	sp, #232	; 0xe8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a0c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10f      	bne.n	800a0ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d009      	beq.n	800a0ea <HAL_UART_IRQHandler+0x66>
 800a0d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fd81 	bl	800abea <UART_Receive_IT>
      return;
 800a0e8:	e25b      	b.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 80de 	beq.w	800a2b0 <HAL_UART_IRQHandler+0x22c>
 800a0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d106      	bne.n	800a10e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80d1 	beq.w	800a2b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <HAL_UART_IRQHandler+0xae>
 800a11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a122:	2b00      	cmp	r3, #0
 800a124:	d005      	beq.n	800a132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	f043 0201 	orr.w	r2, r3, #1
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a136:	f003 0304 	and.w	r3, r3, #4
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <HAL_UART_IRQHandler+0xd2>
 800a13e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14e:	f043 0202 	orr.w	r2, r3, #2
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <HAL_UART_IRQHandler+0xf6>
 800a162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a172:	f043 0204 	orr.w	r2, r3, #4
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d011      	beq.n	800a1aa <HAL_UART_IRQHandler+0x126>
 800a186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d105      	bne.n	800a19e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d005      	beq.n	800a1aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a2:	f043 0208 	orr.w	r2, r3, #8
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 81f2 	beq.w	800a598 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x14e>
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c4:	f003 0320 	and.w	r3, r3, #32
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fd0c 	bl	800abea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1dc:	2b40      	cmp	r3, #64	; 0x40
 800a1de:	bf0c      	ite	eq
 800a1e0:	2301      	moveq	r3, #1
 800a1e2:	2300      	movne	r3, #0
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d103      	bne.n	800a1fe <HAL_UART_IRQHandler+0x17a>
 800a1f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04f      	beq.n	800a29e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fc14 	bl	800aa2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20e:	2b40      	cmp	r3, #64	; 0x40
 800a210:	d141      	bne.n	800a296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3314      	adds	r3, #20
 800a218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3314      	adds	r3, #20
 800a23a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a23e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a24a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1d9      	bne.n	800a212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d013      	beq.n	800a28e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	4a7e      	ldr	r2, [pc, #504]	; (800a464 <HAL_UART_IRQHandler+0x3e0>)
 800a26c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a272:	4618      	mov	r0, r3
 800a274:	f7fa fda8 	bl	8004dc8 <HAL_DMA_Abort_IT>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d016      	beq.n	800a2ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	e00e      	b.n	800a2ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f9a8 	bl	800a5e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a294:	e00a      	b.n	800a2ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f9a4 	bl	800a5e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29c:	e006      	b.n	800a2ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f9a0 	bl	800a5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a2aa:	e175      	b.n	800a598 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ac:	bf00      	nop
    return;
 800a2ae:	e173      	b.n	800a598 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	f040 814f 	bne.w	800a558 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0310 	and.w	r3, r3, #16
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 8148 	beq.w	800a558 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 8141 	beq.w	800a558 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	60bb      	str	r3, [r7, #8]
 800a2ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f6:	2b40      	cmp	r3, #64	; 0x40
 800a2f8:	f040 80b6 	bne.w	800a468 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8145 	beq.w	800a59c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a31a:	429a      	cmp	r2, r3
 800a31c:	f080 813e 	bcs.w	800a59c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a332:	f000 8088 	beq.w	800a446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	330c      	adds	r3, #12
 800a33c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a34c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	330c      	adds	r3, #12
 800a35e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a36e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a372:	e841 2300 	strex	r3, r2, [r1]
 800a376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a37a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1d9      	bne.n	800a336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3314      	adds	r3, #20
 800a388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a394:	f023 0301 	bic.w	r3, r3, #1
 800a398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3314      	adds	r3, #20
 800a3a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1e1      	bne.n	800a382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3314      	adds	r3, #20
 800a3c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e3      	bne.n	800a3be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	330c      	adds	r3, #12
 800a40a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a416:	f023 0310 	bic.w	r3, r3, #16
 800a41a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	330c      	adds	r3, #12
 800a424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a428:	65ba      	str	r2, [r7, #88]	; 0x58
 800a42a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a42e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e3      	bne.n	800a404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a440:	4618      	mov	r0, r3
 800a442:	f7fa fc51 	bl	8004ce8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2202      	movs	r2, #2
 800a44a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a454:	b29b      	uxth	r3, r3
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	b29b      	uxth	r3, r3
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 f861 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a462:	e09b      	b.n	800a59c <HAL_UART_IRQHandler+0x518>
 800a464:	0800aaf3 	.word	0x0800aaf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a470:	b29b      	uxth	r3, r3
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 808e 	beq.w	800a5a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8089 	beq.w	800a5a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	330c      	adds	r3, #12
 800a494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4b2:	647a      	str	r2, [r7, #68]	; 0x44
 800a4b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e3      	bne.n	800a48e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4ea:	633a      	str	r2, [r7, #48]	; 0x30
 800a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e3      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	330c      	adds	r3, #12
 800a512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0310 	bic.w	r3, r3, #16
 800a522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a530:	61fa      	str	r2, [r7, #28]
 800a532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	69b9      	ldr	r1, [r7, #24]
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	617b      	str	r3, [r7, #20]
   return(result);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e3      	bne.n	800a50c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a54a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 ffe7 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a556:	e023      	b.n	800a5a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <HAL_UART_IRQHandler+0x4f4>
 800a564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fad2 	bl	800ab1a <UART_Transmit_IT>
    return;
 800a576:	e014      	b.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00e      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
 800a584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d008      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fb12 	bl	800abba <UART_EndTransmit_IT>
    return;
 800a596:	e004      	b.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
    return;
 800a598:	bf00      	nop
 800a59a:	e002      	b.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800a59c:	bf00      	nop
 800a59e:	e000      	b.n	800a5a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800a5a0:	bf00      	nop
  }
}
 800a5a2:	37e8      	adds	r7, #232	; 0xe8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b09c      	sub	sp, #112	; 0x70
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a610:	2b00      	cmp	r3, #0
 800a612:	d172      	bne.n	800a6fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a616:	2200      	movs	r2, #0
 800a618:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	330c      	adds	r3, #12
 800a620:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a624:	e853 3f00 	ldrex	r3, [r3]
 800a628:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a630:	66bb      	str	r3, [r7, #104]	; 0x68
 800a632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	330c      	adds	r3, #12
 800a638:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a63a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a63c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e5      	bne.n	800a61a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3314      	adds	r3, #20
 800a654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a660:	f023 0301 	bic.w	r3, r3, #1
 800a664:	667b      	str	r3, [r7, #100]	; 0x64
 800a666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3314      	adds	r3, #20
 800a66c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a66e:	647a      	str	r2, [r7, #68]	; 0x44
 800a670:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e5      	bne.n	800a64e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3314      	adds	r3, #20
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	e853 3f00 	ldrex	r3, [r3]
 800a690:	623b      	str	r3, [r7, #32]
   return(result);
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a698:	663b      	str	r3, [r7, #96]	; 0x60
 800a69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3314      	adds	r3, #20
 800a6a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e5      	bne.n	800a682 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d119      	bne.n	800a6fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f023 0310 	bic.w	r3, r3, #16
 800a6dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	330c      	adds	r3, #12
 800a6e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6e6:	61fa      	str	r2, [r7, #28]
 800a6e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	69b9      	ldr	r1, [r7, #24]
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e5      	bne.n	800a6c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	2b01      	cmp	r3, #1
 800a706:	d106      	bne.n	800a716 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a70c:	4619      	mov	r1, r3
 800a70e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a710:	f000 ff08 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a714:	e002      	b.n	800a71c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a718:	f7ff ff50 	bl	800a5bc <HAL_UART_RxCpltCallback>
}
 800a71c:	bf00      	nop
 800a71e:	3770      	adds	r7, #112	; 0x70
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a730:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d108      	bne.n	800a752 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a744:	085b      	lsrs	r3, r3, #1
 800a746:	b29b      	uxth	r3, r3
 800a748:	4619      	mov	r1, r3
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 feea 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a750:	e002      	b.n	800a758 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff ff3c 	bl	800a5d0 <HAL_UART_RxHalfCpltCallback>
}
 800a758:	bf00      	nop
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77c:	2b80      	cmp	r3, #128	; 0x80
 800a77e:	bf0c      	ite	eq
 800a780:	2301      	moveq	r3, #1
 800a782:	2300      	movne	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b21      	cmp	r3, #33	; 0x21
 800a792:	d108      	bne.n	800a7a6 <UART_DMAError+0x46>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2200      	movs	r2, #0
 800a79e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a7a0:	68b8      	ldr	r0, [r7, #8]
 800a7a2:	f000 f91b 	bl	800a9dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b0:	2b40      	cmp	r3, #64	; 0x40
 800a7b2:	bf0c      	ite	eq
 800a7b4:	2301      	moveq	r3, #1
 800a7b6:	2300      	movne	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b22      	cmp	r3, #34	; 0x22
 800a7c6:	d108      	bne.n	800a7da <UART_DMAError+0x7a>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d005      	beq.n	800a7da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a7d4:	68b8      	ldr	r0, [r7, #8]
 800a7d6:	f000 f929 	bl	800aa2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7de:	f043 0210 	orr.w	r2, r3, #16
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7e6:	68b8      	ldr	r0, [r7, #8]
 800a7e8:	f7ff fefc 	bl	800a5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ec:	bf00      	nop
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	4613      	mov	r3, r2
 800a802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a804:	e03b      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80c:	d037      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80e:	f7f9 fc21 	bl	8004054 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	6a3a      	ldr	r2, [r7, #32]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d302      	bcc.n	800a824 <UART_WaitOnFlagUntilTimeout+0x30>
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e03a      	b.n	800a89e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d023      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b80      	cmp	r3, #128	; 0x80
 800a83a:	d020      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b40      	cmp	r3, #64	; 0x40
 800a840:	d01d      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0308 	and.w	r3, r3, #8
 800a84c:	2b08      	cmp	r3, #8
 800a84e:	d116      	bne.n	800a87e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 f8e0 	bl	800aa2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2208      	movs	r2, #8
 800a870:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e00f      	b.n	800a89e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4013      	ands	r3, r2
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	bf0c      	ite	eq
 800a88e:	2301      	moveq	r3, #1
 800a890:	2300      	movne	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	461a      	mov	r2, r3
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d0b4      	beq.n	800a806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b098      	sub	sp, #96	; 0x60
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2222      	movs	r2, #34	; 0x22
 800a8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d4:	4a3e      	ldr	r2, [pc, #248]	; (800a9d0 <UART_Start_Receive_DMA+0x128>)
 800a8d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8dc:	4a3d      	ldr	r2, [pc, #244]	; (800a9d4 <UART_Start_Receive_DMA+0x12c>)
 800a8de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e4:	4a3c      	ldr	r2, [pc, #240]	; (800a9d8 <UART_Start_Receive_DMA+0x130>)
 800a8e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4619      	mov	r1, r3
 800a902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	88fb      	ldrh	r3, [r7, #6]
 800a908:	f7fa f996 	bl	8004c38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a90c:	2300      	movs	r3, #0
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d019      	beq.n	800a95e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	330c      	adds	r3, #12
 800a930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a940:	65bb      	str	r3, [r7, #88]	; 0x58
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	330c      	adds	r3, #12
 800a948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a94a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a94c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e5      	bne.n	800a92a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3314      	adds	r3, #20
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	e853 3f00 	ldrex	r3, [r3]
 800a96c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	f043 0301 	orr.w	r3, r3, #1
 800a974:	657b      	str	r3, [r7, #84]	; 0x54
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3314      	adds	r3, #20
 800a97c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a97e:	63ba      	str	r2, [r7, #56]	; 0x38
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a986:	e841 2300 	strex	r3, r2, [r1]
 800a98a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e5      	bne.n	800a95e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3314      	adds	r3, #20
 800a998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3314      	adds	r3, #20
 800a9b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9b2:	627a      	str	r2, [r7, #36]	; 0x24
 800a9b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	6a39      	ldr	r1, [r7, #32]
 800a9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e5      	bne.n	800a992 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3760      	adds	r7, #96	; 0x60
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	0800a5f9 	.word	0x0800a5f9
 800a9d4:	0800a725 	.word	0x0800a725
 800a9d8:	0800a761 	.word	0x0800a761

0800a9dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b089      	sub	sp, #36	; 0x24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	330c      	adds	r3, #12
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	61ba      	str	r2, [r7, #24]
 800aa06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	6979      	ldr	r1, [r7, #20]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	613b      	str	r3, [r7, #16]
   return(result);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e5      	bne.n	800a9e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800aa20:	bf00      	nop
 800aa22:	3724      	adds	r7, #36	; 0x24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b095      	sub	sp, #84	; 0x54
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	330c      	adds	r3, #12
 800aa3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3e:	e853 3f00 	ldrex	r3, [r3]
 800aa42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	330c      	adds	r3, #12
 800aa52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa54:	643a      	str	r2, [r7, #64]	; 0x40
 800aa56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa5c:	e841 2300 	strex	r3, r2, [r1]
 800aa60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1e5      	bne.n	800aa34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3314      	adds	r3, #20
 800aa6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	e853 3f00 	ldrex	r3, [r3]
 800aa76:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	f023 0301 	bic.w	r3, r3, #1
 800aa7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3314      	adds	r3, #20
 800aa86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e5      	bne.n	800aa68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d119      	bne.n	800aad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	330c      	adds	r3, #12
 800aaaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	e853 3f00 	ldrex	r3, [r3]
 800aab2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f023 0310 	bic.w	r3, r3, #16
 800aaba:	647b      	str	r3, [r7, #68]	; 0x44
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	330c      	adds	r3, #12
 800aac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aac4:	61ba      	str	r2, [r7, #24]
 800aac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac8:	6979      	ldr	r1, [r7, #20]
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	e841 2300 	strex	r3, r2, [r1]
 800aad0:	613b      	str	r3, [r7, #16]
   return(result);
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e5      	bne.n	800aaa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2220      	movs	r2, #32
 800aadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aae6:	bf00      	nop
 800aae8:	3754      	adds	r7, #84	; 0x54
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7ff fd69 	bl	800a5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b21      	cmp	r3, #33	; 0x21
 800ab2c:	d13e      	bne.n	800abac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab36:	d114      	bne.n	800ab62 <UART_Transmit_IT+0x48>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d110      	bne.n	800ab62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	1c9a      	adds	r2, r3, #2
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	621a      	str	r2, [r3, #32]
 800ab60:	e008      	b.n	800ab74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	1c59      	adds	r1, r3, #1
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6211      	str	r1, [r2, #32]
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	4619      	mov	r1, r3
 800ab82:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10f      	bne.n	800aba8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68da      	ldr	r2, [r3, #12]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aba6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	e000      	b.n	800abae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abac:	2302      	movs	r3, #2
  }
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fce4 	bl	800a5a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b08c      	sub	sp, #48	; 0x30
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b22      	cmp	r3, #34	; 0x22
 800abfc:	f040 80ae 	bne.w	800ad5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac08:	d117      	bne.n	800ac3a <UART_Receive_IT+0x50>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d113      	bne.n	800ac3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	1c9a      	adds	r2, r3, #2
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	629a      	str	r2, [r3, #40]	; 0x28
 800ac38:	e026      	b.n	800ac88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4c:	d007      	beq.n	800ac5e <UART_Receive_IT+0x74>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10a      	bne.n	800ac6c <UART_Receive_IT+0x82>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d106      	bne.n	800ac6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	701a      	strb	r2, [r3, #0]
 800ac6a:	e008      	b.n	800ac7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	4619      	mov	r1, r3
 800ac96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d15d      	bne.n	800ad58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 0220 	bic.w	r2, r2, #32
 800acaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	695a      	ldr	r2, [r3, #20]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0201 	bic.w	r2, r2, #1
 800acca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d135      	bne.n	800ad4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	330c      	adds	r3, #12
 800acee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	e853 3f00 	ldrex	r3, [r3]
 800acf6:	613b      	str	r3, [r7, #16]
   return(result);
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	f023 0310 	bic.w	r3, r3, #16
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad08:	623a      	str	r2, [r7, #32]
 800ad0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	69f9      	ldr	r1, [r7, #28]
 800ad0e:	6a3a      	ldr	r2, [r7, #32]
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e5      	bne.n	800ace8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0310 	and.w	r3, r3, #16
 800ad26:	2b10      	cmp	r3, #16
 800ad28:	d10a      	bne.n	800ad40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	60fb      	str	r3, [r7, #12]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fbec 	bl	800b524 <HAL_UARTEx_RxEventCallback>
 800ad4c:	e002      	b.n	800ad54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff fc34 	bl	800a5bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	e002      	b.n	800ad5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e000      	b.n	800ad5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ad5c:	2302      	movs	r3, #2
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3730      	adds	r7, #48	; 0x30
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad6c:	b0c0      	sub	sp, #256	; 0x100
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad84:	68d9      	ldr	r1, [r3, #12]
 800ad86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	ea40 0301 	orr.w	r3, r0, r1
 800ad90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	4313      	orrs	r3, r2
 800adb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800adb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800adc0:	f021 010c 	bic.w	r1, r1, #12
 800adc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800adce:	430b      	orrs	r3, r1
 800add0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800add2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800adde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ade2:	6999      	ldr	r1, [r3, #24]
 800ade4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	ea40 0301 	orr.w	r3, r0, r1
 800adee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	4b8f      	ldr	r3, [pc, #572]	; (800b034 <UART_SetConfig+0x2cc>)
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d005      	beq.n	800ae08 <UART_SetConfig+0xa0>
 800adfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4b8d      	ldr	r3, [pc, #564]	; (800b038 <UART_SetConfig+0x2d0>)
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d104      	bne.n	800ae12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae08:	f7fd fda2 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800ae0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ae10:	e003      	b.n	800ae1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae12:	f7fd fd89 	bl	8008928 <HAL_RCC_GetPCLK1Freq>
 800ae16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae24:	f040 810c 	bne.w	800b040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	1891      	adds	r1, r2, r2
 800ae40:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae42:	415b      	adcs	r3, r3
 800ae44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	eb12 0801 	adds.w	r8, r2, r1
 800ae50:	4629      	mov	r1, r5
 800ae52:	eb43 0901 	adc.w	r9, r3, r1
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae6a:	4690      	mov	r8, r2
 800ae6c:	4699      	mov	r9, r3
 800ae6e:	4623      	mov	r3, r4
 800ae70:	eb18 0303 	adds.w	r3, r8, r3
 800ae74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae78:	462b      	mov	r3, r5
 800ae7a:	eb49 0303 	adc.w	r3, r9, r3
 800ae7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae96:	460b      	mov	r3, r1
 800ae98:	18db      	adds	r3, r3, r3
 800ae9a:	653b      	str	r3, [r7, #80]	; 0x50
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	eb42 0303 	adc.w	r3, r2, r3
 800aea2:	657b      	str	r3, [r7, #84]	; 0x54
 800aea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aeac:	f7f5 f9f0 	bl	8000290 <__aeabi_uldivmod>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4b61      	ldr	r3, [pc, #388]	; (800b03c <UART_SetConfig+0x2d4>)
 800aeb6:	fba3 2302 	umull	r2, r3, r3, r2
 800aeba:	095b      	lsrs	r3, r3, #5
 800aebc:	011c      	lsls	r4, r3, #4
 800aebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aec8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aed0:	4642      	mov	r2, r8
 800aed2:	464b      	mov	r3, r9
 800aed4:	1891      	adds	r1, r2, r2
 800aed6:	64b9      	str	r1, [r7, #72]	; 0x48
 800aed8:	415b      	adcs	r3, r3
 800aeda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aedc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aee0:	4641      	mov	r1, r8
 800aee2:	eb12 0a01 	adds.w	sl, r2, r1
 800aee6:	4649      	mov	r1, r9
 800aee8:	eb43 0b01 	adc.w	fp, r3, r1
 800aeec:	f04f 0200 	mov.w	r2, #0
 800aef0:	f04f 0300 	mov.w	r3, #0
 800aef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aefc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af00:	4692      	mov	sl, r2
 800af02:	469b      	mov	fp, r3
 800af04:	4643      	mov	r3, r8
 800af06:	eb1a 0303 	adds.w	r3, sl, r3
 800af0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af0e:	464b      	mov	r3, r9
 800af10:	eb4b 0303 	adc.w	r3, fp, r3
 800af14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800af28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af2c:	460b      	mov	r3, r1
 800af2e:	18db      	adds	r3, r3, r3
 800af30:	643b      	str	r3, [r7, #64]	; 0x40
 800af32:	4613      	mov	r3, r2
 800af34:	eb42 0303 	adc.w	r3, r2, r3
 800af38:	647b      	str	r3, [r7, #68]	; 0x44
 800af3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800af3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800af42:	f7f5 f9a5 	bl	8000290 <__aeabi_uldivmod>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4611      	mov	r1, r2
 800af4c:	4b3b      	ldr	r3, [pc, #236]	; (800b03c <UART_SetConfig+0x2d4>)
 800af4e:	fba3 2301 	umull	r2, r3, r3, r1
 800af52:	095b      	lsrs	r3, r3, #5
 800af54:	2264      	movs	r2, #100	; 0x64
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	1acb      	subs	r3, r1, r3
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800af62:	4b36      	ldr	r3, [pc, #216]	; (800b03c <UART_SetConfig+0x2d4>)
 800af64:	fba3 2302 	umull	r2, r3, r3, r2
 800af68:	095b      	lsrs	r3, r3, #5
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af70:	441c      	add	r4, r3
 800af72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af76:	2200      	movs	r2, #0
 800af78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af84:	4642      	mov	r2, r8
 800af86:	464b      	mov	r3, r9
 800af88:	1891      	adds	r1, r2, r2
 800af8a:	63b9      	str	r1, [r7, #56]	; 0x38
 800af8c:	415b      	adcs	r3, r3
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af94:	4641      	mov	r1, r8
 800af96:	1851      	adds	r1, r2, r1
 800af98:	6339      	str	r1, [r7, #48]	; 0x30
 800af9a:	4649      	mov	r1, r9
 800af9c:	414b      	adcs	r3, r1
 800af9e:	637b      	str	r3, [r7, #52]	; 0x34
 800afa0:	f04f 0200 	mov.w	r2, #0
 800afa4:	f04f 0300 	mov.w	r3, #0
 800afa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800afac:	4659      	mov	r1, fp
 800afae:	00cb      	lsls	r3, r1, #3
 800afb0:	4651      	mov	r1, sl
 800afb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afb6:	4651      	mov	r1, sl
 800afb8:	00ca      	lsls	r2, r1, #3
 800afba:	4610      	mov	r0, r2
 800afbc:	4619      	mov	r1, r3
 800afbe:	4603      	mov	r3, r0
 800afc0:	4642      	mov	r2, r8
 800afc2:	189b      	adds	r3, r3, r2
 800afc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afc8:	464b      	mov	r3, r9
 800afca:	460a      	mov	r2, r1
 800afcc:	eb42 0303 	adc.w	r3, r2, r3
 800afd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800afe0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800afe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800afe8:	460b      	mov	r3, r1
 800afea:	18db      	adds	r3, r3, r3
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28
 800afee:	4613      	mov	r3, r2
 800aff0:	eb42 0303 	adc.w	r3, r2, r3
 800aff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800affa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800affe:	f7f5 f947 	bl	8000290 <__aeabi_uldivmod>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <UART_SetConfig+0x2d4>)
 800b008:	fba3 1302 	umull	r1, r3, r3, r2
 800b00c:	095b      	lsrs	r3, r3, #5
 800b00e:	2164      	movs	r1, #100	; 0x64
 800b010:	fb01 f303 	mul.w	r3, r1, r3
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	3332      	adds	r3, #50	; 0x32
 800b01a:	4a08      	ldr	r2, [pc, #32]	; (800b03c <UART_SetConfig+0x2d4>)
 800b01c:	fba2 2303 	umull	r2, r3, r2, r3
 800b020:	095b      	lsrs	r3, r3, #5
 800b022:	f003 0207 	and.w	r2, r3, #7
 800b026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4422      	add	r2, r4
 800b02e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b030:	e106      	b.n	800b240 <UART_SetConfig+0x4d8>
 800b032:	bf00      	nop
 800b034:	40011000 	.word	0x40011000
 800b038:	40011400 	.word	0x40011400
 800b03c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b044:	2200      	movs	r2, #0
 800b046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b04a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b04e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b052:	4642      	mov	r2, r8
 800b054:	464b      	mov	r3, r9
 800b056:	1891      	adds	r1, r2, r2
 800b058:	6239      	str	r1, [r7, #32]
 800b05a:	415b      	adcs	r3, r3
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
 800b05e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b062:	4641      	mov	r1, r8
 800b064:	1854      	adds	r4, r2, r1
 800b066:	4649      	mov	r1, r9
 800b068:	eb43 0501 	adc.w	r5, r3, r1
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	f04f 0300 	mov.w	r3, #0
 800b074:	00eb      	lsls	r3, r5, #3
 800b076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b07a:	00e2      	lsls	r2, r4, #3
 800b07c:	4614      	mov	r4, r2
 800b07e:	461d      	mov	r5, r3
 800b080:	4643      	mov	r3, r8
 800b082:	18e3      	adds	r3, r4, r3
 800b084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b088:	464b      	mov	r3, r9
 800b08a:	eb45 0303 	adc.w	r3, r5, r3
 800b08e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b09e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0a2:	f04f 0200 	mov.w	r2, #0
 800b0a6:	f04f 0300 	mov.w	r3, #0
 800b0aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	008b      	lsls	r3, r1, #2
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	008a      	lsls	r2, r1, #2
 800b0bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b0c0:	f7f5 f8e6 	bl	8000290 <__aeabi_uldivmod>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4b60      	ldr	r3, [pc, #384]	; (800b24c <UART_SetConfig+0x4e4>)
 800b0ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ce:	095b      	lsrs	r3, r3, #5
 800b0d0:	011c      	lsls	r4, r3, #4
 800b0d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b0dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b0e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b0e4:	4642      	mov	r2, r8
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	1891      	adds	r1, r2, r2
 800b0ea:	61b9      	str	r1, [r7, #24]
 800b0ec:	415b      	adcs	r3, r3
 800b0ee:	61fb      	str	r3, [r7, #28]
 800b0f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0f4:	4641      	mov	r1, r8
 800b0f6:	1851      	adds	r1, r2, r1
 800b0f8:	6139      	str	r1, [r7, #16]
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	414b      	adcs	r3, r1
 800b0fe:	617b      	str	r3, [r7, #20]
 800b100:	f04f 0200 	mov.w	r2, #0
 800b104:	f04f 0300 	mov.w	r3, #0
 800b108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b10c:	4659      	mov	r1, fp
 800b10e:	00cb      	lsls	r3, r1, #3
 800b110:	4651      	mov	r1, sl
 800b112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b116:	4651      	mov	r1, sl
 800b118:	00ca      	lsls	r2, r1, #3
 800b11a:	4610      	mov	r0, r2
 800b11c:	4619      	mov	r1, r3
 800b11e:	4603      	mov	r3, r0
 800b120:	4642      	mov	r2, r8
 800b122:	189b      	adds	r3, r3, r2
 800b124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b128:	464b      	mov	r3, r9
 800b12a:	460a      	mov	r2, r1
 800b12c:	eb42 0303 	adc.w	r3, r2, r3
 800b130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b13e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b140:	f04f 0200 	mov.w	r2, #0
 800b144:	f04f 0300 	mov.w	r3, #0
 800b148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b14c:	4649      	mov	r1, r9
 800b14e:	008b      	lsls	r3, r1, #2
 800b150:	4641      	mov	r1, r8
 800b152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b156:	4641      	mov	r1, r8
 800b158:	008a      	lsls	r2, r1, #2
 800b15a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b15e:	f7f5 f897 	bl	8000290 <__aeabi_uldivmod>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4611      	mov	r1, r2
 800b168:	4b38      	ldr	r3, [pc, #224]	; (800b24c <UART_SetConfig+0x4e4>)
 800b16a:	fba3 2301 	umull	r2, r3, r3, r1
 800b16e:	095b      	lsrs	r3, r3, #5
 800b170:	2264      	movs	r2, #100	; 0x64
 800b172:	fb02 f303 	mul.w	r3, r2, r3
 800b176:	1acb      	subs	r3, r1, r3
 800b178:	011b      	lsls	r3, r3, #4
 800b17a:	3332      	adds	r3, #50	; 0x32
 800b17c:	4a33      	ldr	r2, [pc, #204]	; (800b24c <UART_SetConfig+0x4e4>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	095b      	lsrs	r3, r3, #5
 800b184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b188:	441c      	add	r4, r3
 800b18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b18e:	2200      	movs	r2, #0
 800b190:	673b      	str	r3, [r7, #112]	; 0x70
 800b192:	677a      	str	r2, [r7, #116]	; 0x74
 800b194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b198:	4642      	mov	r2, r8
 800b19a:	464b      	mov	r3, r9
 800b19c:	1891      	adds	r1, r2, r2
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	415b      	adcs	r3, r3
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1a8:	4641      	mov	r1, r8
 800b1aa:	1851      	adds	r1, r2, r1
 800b1ac:	6039      	str	r1, [r7, #0]
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	414b      	adcs	r3, r1
 800b1b2:	607b      	str	r3, [r7, #4]
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b1c0:	4659      	mov	r1, fp
 800b1c2:	00cb      	lsls	r3, r1, #3
 800b1c4:	4651      	mov	r1, sl
 800b1c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ca:	4651      	mov	r1, sl
 800b1cc:	00ca      	lsls	r2, r1, #3
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	189b      	adds	r3, r3, r2
 800b1d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1da:	464b      	mov	r3, r9
 800b1dc:	460a      	mov	r2, r1
 800b1de:	eb42 0303 	adc.w	r3, r2, r3
 800b1e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	663b      	str	r3, [r7, #96]	; 0x60
 800b1ee:	667a      	str	r2, [r7, #100]	; 0x64
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	008b      	lsls	r3, r1, #2
 800b200:	4641      	mov	r1, r8
 800b202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b206:	4641      	mov	r1, r8
 800b208:	008a      	lsls	r2, r1, #2
 800b20a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b20e:	f7f5 f83f 	bl	8000290 <__aeabi_uldivmod>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4b0d      	ldr	r3, [pc, #52]	; (800b24c <UART_SetConfig+0x4e4>)
 800b218:	fba3 1302 	umull	r1, r3, r3, r2
 800b21c:	095b      	lsrs	r3, r3, #5
 800b21e:	2164      	movs	r1, #100	; 0x64
 800b220:	fb01 f303 	mul.w	r3, r1, r3
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	3332      	adds	r3, #50	; 0x32
 800b22a:	4a08      	ldr	r2, [pc, #32]	; (800b24c <UART_SetConfig+0x4e4>)
 800b22c:	fba2 2303 	umull	r2, r3, r2, r3
 800b230:	095b      	lsrs	r3, r3, #5
 800b232:	f003 020f 	and.w	r2, r3, #15
 800b236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4422      	add	r2, r4
 800b23e:	609a      	str	r2, [r3, #8]
}
 800b240:	bf00      	nop
 800b242:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b246:	46bd      	mov	sp, r7
 800b248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b24c:	51eb851f 	.word	0x51eb851f

0800b250 <sys_manager_update>:
/* Private function prototypes ---------------------------------------- */
static sys_state_t sys_manager_update(btn_info_t *button_state);
static void sys_checking_alarm(void);
/* Function definitions ----------------------------------------------- */
sys_state_t sys_manager_update(btn_info_t *button_state)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	drv_btn_check_event(button_state);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7f6 fb95 	bl	8001988 <drv_btn_check_event>
	sys_checking_alarm();
 800b25e:	f000 f931 	bl	800b4c4 <sys_checking_alarm>
	/* FSM */
	switch (s_system_state)
 800b262:	4b4f      	ldr	r3, [pc, #316]	; (800b3a0 <sys_manager_update+0x150>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b06      	cmp	r3, #6
 800b268:	f200 8094 	bhi.w	800b394 <sys_manager_update+0x144>
 800b26c:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <sys_manager_update+0x24>)
 800b26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b272:	bf00      	nop
 800b274:	0800b315 	.word	0x0800b315
 800b278:	0800b335 	.word	0x0800b335
 800b27c:	0800b325 	.word	0x0800b325
 800b280:	0800b34b 	.word	0x0800b34b
 800b284:	0800b291 	.word	0x0800b291
 800b288:	0800b35b 	.word	0x0800b35b
 800b28c:	0800b36b 	.word	0x0800b36b
	{
	case MENU_STATE:
	{
		if (*button_state == SINGLE_CLICK_BUTTON)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d10c      	bne.n	800b2b2 <sys_manager_update+0x62>
		{
			// 1 click -> next feature
			s_system_feature++;
 800b298:	4b42      	ldr	r3, [pc, #264]	; (800b3a4 <sys_manager_update+0x154>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	4b40      	ldr	r3, [pc, #256]	; (800b3a4 <sys_manager_update+0x154>)
 800b2a2:	701a      	strb	r2, [r3, #0]
			// overwrite handle
			if (s_system_feature > MUSIC)
 800b2a4:	4b3f      	ldr	r3, [pc, #252]	; (800b3a4 <sys_manager_update+0x154>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d902      	bls.n	800b2b2 <sys_manager_update+0x62>
			{
				s_system_feature = DIGITAL_CLOCK;
 800b2ac:	4b3d      	ldr	r3, [pc, #244]	; (800b3a4 <sys_manager_update+0x154>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	701a      	strb	r2, [r3, #0]
			}
		}

		if ((*button_state == DOUBLE_CLICK_BUTTON) && (s_system_feature == DIGITAL_CLOCK))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d107      	bne.n	800b2ca <sys_manager_update+0x7a>
 800b2ba:	4b3a      	ldr	r3, [pc, #232]	; (800b3a4 <sys_manager_update+0x154>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d103      	bne.n	800b2ca <sys_manager_update+0x7a>
		{
			s_system_state = DIGITAL_CLOCK_STATE;
 800b2c2:	4b37      	ldr	r3, [pc, #220]	; (800b3a0 <sys_manager_update+0x150>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	e023      	b.n	800b312 <sys_manager_update+0xc2>
		}

		else if ((*button_state == DOUBLE_CLICK_BUTTON) && (s_system_feature == SET_ALARM))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d107      	bne.n	800b2e2 <sys_manager_update+0x92>
 800b2d2:	4b34      	ldr	r3, [pc, #208]	; (800b3a4 <sys_manager_update+0x154>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d103      	bne.n	800b2e2 <sys_manager_update+0x92>
		{
			s_system_state = SET_ALARM_STATE;
 800b2da:	4b31      	ldr	r3, [pc, #196]	; (800b3a0 <sys_manager_update+0x150>)
 800b2dc:	2202      	movs	r2, #2
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	e017      	b.n	800b312 <sys_manager_update+0xc2>
		}

		else if ((*button_state == DOUBLE_CLICK_BUTTON) && (s_system_feature == SET_RTC))
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d107      	bne.n	800b2fa <sys_manager_update+0xaa>
 800b2ea:	4b2e      	ldr	r3, [pc, #184]	; (800b3a4 <sys_manager_update+0x154>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d103      	bne.n	800b2fa <sys_manager_update+0xaa>
		{
			s_system_state = SET_RTC_STATE;
 800b2f2:	4b2b      	ldr	r3, [pc, #172]	; (800b3a0 <sys_manager_update+0x150>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	e00b      	b.n	800b312 <sys_manager_update+0xc2>
		}
		else if ((*button_state == DOUBLE_CLICK_BUTTON) && (s_system_feature == MUSIC))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d13b      	bne.n	800b37a <sys_manager_update+0x12a>
 800b302:	4b28      	ldr	r3, [pc, #160]	; (800b3a4 <sys_manager_update+0x154>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d137      	bne.n	800b37a <sys_manager_update+0x12a>
		{
			s_system_state = MUSIC_STATE;
 800b30a:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <sys_manager_update+0x150>)
 800b30c:	2203      	movs	r2, #3
 800b30e:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b310:	e033      	b.n	800b37a <sys_manager_update+0x12a>
 800b312:	e032      	b.n	800b37a <sys_manager_update+0x12a>
	}

	case DIGITAL_CLOCK_STATE:
	{
		if (*button_state == HOLD_BUTTON)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d130      	bne.n	800b37e <sys_manager_update+0x12e>
		{
			s_system_state = MENU_STATE;
 800b31c:	4b20      	ldr	r3, [pc, #128]	; (800b3a0 <sys_manager_update+0x150>)
 800b31e:	2204      	movs	r2, #4
 800b320:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b322:	e02c      	b.n	800b37e <sys_manager_update+0x12e>
	}

	case SET_ALARM_STATE:
	{
		if (*button_state == HOLD_BUTTON)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d12a      	bne.n	800b382 <sys_manager_update+0x132>
		{
			s_system_state = MENU_STATE;
 800b32c:	4b1c      	ldr	r3, [pc, #112]	; (800b3a0 <sys_manager_update+0x150>)
 800b32e:	2204      	movs	r2, #4
 800b330:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b332:	e026      	b.n	800b382 <sys_manager_update+0x132>
	}

	case SET_RTC_STATE:
	{
		if ((*button_state == HOLD_BUTTON))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b03      	cmp	r3, #3
 800b33a:	d124      	bne.n	800b386 <sys_manager_update+0x136>
		{
			check_finish = 0;
 800b33c:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <sys_manager_update+0x158>)
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
			s_system_state = MENU_STATE;
 800b342:	4b17      	ldr	r3, [pc, #92]	; (800b3a0 <sys_manager_update+0x150>)
 800b344:	2204      	movs	r2, #4
 800b346:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b348:	e01d      	b.n	800b386 <sys_manager_update+0x136>
	}
	case MUSIC_STATE:
	{
		if (*button_state == HOLD_BUTTON)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d11b      	bne.n	800b38a <sys_manager_update+0x13a>
		{
			s_system_state = MENU_STATE;
 800b352:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <sys_manager_update+0x150>)
 800b354:	2204      	movs	r2, #4
 800b356:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b358:	e017      	b.n	800b38a <sys_manager_update+0x13a>
	}
	case ALARM_STATE:
	{
		if (*button_state == HOLD_BUTTON)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d115      	bne.n	800b38e <sys_manager_update+0x13e>
		{
			s_system_state = MENU_STATE;
 800b362:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <sys_manager_update+0x150>)
 800b364:	2204      	movs	r2, #4
 800b366:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b368:	e011      	b.n	800b38e <sys_manager_update+0x13e>
	}
	case INVALID_STATE:
	  if (*button_state == HOLD_BUTTON)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d10f      	bne.n	800b392 <sys_manager_update+0x142>
	  		{
	  			s_system_state = MENU_STATE;
 800b372:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <sys_manager_update+0x150>)
 800b374:	2204      	movs	r2, #4
 800b376:	701a      	strb	r2, [r3, #0]
	  		}
	  		break;
 800b378:	e00b      	b.n	800b392 <sys_manager_update+0x142>
		break;
 800b37a:	bf00      	nop
 800b37c:	e00a      	b.n	800b394 <sys_manager_update+0x144>
		break;
 800b37e:	bf00      	nop
 800b380:	e008      	b.n	800b394 <sys_manager_update+0x144>
		break;
 800b382:	bf00      	nop
 800b384:	e006      	b.n	800b394 <sys_manager_update+0x144>
		break;
 800b386:	bf00      	nop
 800b388:	e004      	b.n	800b394 <sys_manager_update+0x144>
		break;
 800b38a:	bf00      	nop
 800b38c:	e002      	b.n	800b394 <sys_manager_update+0x144>
		break;
 800b38e:	bf00      	nop
 800b390:	e000      	b.n	800b394 <sys_manager_update+0x144>
	  		break;
 800b392:	bf00      	nop
	}
	return s_system_state;
 800b394:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <sys_manager_update+0x150>)
 800b396:	781b      	ldrb	r3, [r3, #0]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	20000011 	.word	0x20000011
 800b3a4:	2000b5f8 	.word	0x2000b5f8
 800b3a8:	2000b5f9 	.word	0x2000b5f9

0800b3ac <sys_manager_init>:

sys_manger_error_t sys_manager_init(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
	sys_display_init();
 800b3b0:	f000 f962 	bl	800b678 <sys_display_init>
	sys_set_time_init();
 800b3b4:	f000 fb16 	bl	800b9e4 <sys_set_time_init>
	sys_set_alarm_init();
 800b3b8:	f000 fa34 	bl	800b824 <sys_set_alarm_init>
	drv_btn_init();
 800b3bc:	f7f6 fada 	bl	8001974 <drv_btn_init>
	drv_df_init(10);
 800b3c0:	200a      	movs	r0, #10
 800b3c2:	f7f6 fb21 	bl	8001a08 <drv_df_init>
	return SYS_MANAGER_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <sys_manager_run>:

sys_manger_error_t sys_manager_run(btn_info_t *button_state)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	sys_manger_error_t status = SYS_MANAGER_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73fb      	strb	r3, [r7, #15]
	sys_state_t s_state_check = MENU_STATE;
 800b3d8:	2304      	movs	r3, #4
 800b3da:	73bb      	strb	r3, [r7, #14]
	while (status == SYS_MANAGER_OK)
 800b3dc:	e061      	b.n	800b4a2 <sys_manager_run+0xd6>
	{
		/* code */
		s_state_check = sys_manager_update(button_state);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff ff36 	bl	800b250 <sys_manager_update>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73bb      	strb	r3, [r7, #14]

		if (s_state_check == MENU_STATE)
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	d11d      	bne.n	800b42a <sys_manager_run+0x5e>
		{
			switch (s_system_feature)
 800b3ee:	4b31      	ldr	r3, [pc, #196]	; (800b4b4 <sys_manager_run+0xe8>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b04      	cmp	r3, #4
 800b3f4:	d855      	bhi.n	800b4a2 <sys_manager_run+0xd6>
 800b3f6:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <sys_manager_run+0x30>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b411 	.word	0x0800b411
 800b400:	0800b417 	.word	0x0800b417
 800b404:	0800b41d 	.word	0x0800b41d
 800b408:	0800b423 	.word	0x0800b423
 800b40c:	0800b4a3 	.word	0x0800b4a3
			{
			case DIGITAL_CLOCK:
				sys_display_digital_clock_icon();
 800b410:	f000 f958 	bl	800b6c4 <sys_display_digital_clock_icon>
				break;
 800b414:	e045      	b.n	800b4a2 <sys_manager_run+0xd6>
			case SET_RTC:
				sys_display_set_rtc_icon();
 800b416:	f000 f963 	bl	800b6e0 <sys_display_set_rtc_icon>
				break;
 800b41a:	e042      	b.n	800b4a2 <sys_manager_run+0xd6>
			case SET_ALARM:
				sys_display_set_alarm_icon();
 800b41c:	f000 f99e 	bl	800b75c <sys_display_set_alarm_icon>
				break;
 800b420:	e03f      	b.n	800b4a2 <sys_manager_run+0xd6>
			case MUSIC:
				sys_display_music_icon();
 800b422:	f000 f93f 	bl	800b6a4 <sys_display_music_icon>
				break;
 800b426:	bf00      	nop
 800b428:	e03b      	b.n	800b4a2 <sys_manager_run+0xd6>
			case INVALID_FEATURE:
				break;
			}
		}
		else if (s_state_check == SET_RTC_STATE)
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d114      	bne.n	800b45a <sys_manager_run+0x8e>
		{
			// do set_rtc
			if (check_finish != 1)
 800b430:	4b21      	ldr	r3, [pc, #132]	; (800b4b8 <sys_manager_run+0xec>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d009      	beq.n	800b44c <sys_manager_run+0x80>
			{
				sys_display_set_rtc();
 800b438:	f000 f9a6 	bl	800b788 <sys_display_set_rtc>
				check_finish = sys_set_time_loop(button_state);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fce5 	bl	800be0c <sys_set_time_loop>
 800b442:	4603      	mov	r3, r0
 800b444:	b2da      	uxtb	r2, r3
 800b446:	4b1c      	ldr	r3, [pc, #112]	; (800b4b8 <sys_manager_run+0xec>)
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	e02a      	b.n	800b4a2 <sys_manager_run+0xd6>
			}
			else
			{
				s_system_state = MENU_STATE;
 800b44c:	4b1b      	ldr	r3, [pc, #108]	; (800b4bc <sys_manager_run+0xf0>)
 800b44e:	2204      	movs	r2, #4
 800b450:	701a      	strb	r2, [r3, #0]
				check_finish = 0;
 800b452:	4b19      	ldr	r3, [pc, #100]	; (800b4b8 <sys_manager_run+0xec>)
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	e023      	b.n	800b4a2 <sys_manager_run+0xd6>
			}
		}

		else if (s_state_check == SET_ALARM_STATE)
 800b45a:	7bbb      	ldrb	r3, [r7, #14]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d105      	bne.n	800b46c <sys_manager_run+0xa0>
		{
			// do set_alarm
			sys_display_set_alarm();
 800b460:	f000 f99c 	bl	800b79c <sys_display_set_alarm>
			sys_set_alarm_loop(button_state);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 faaf 	bl	800b9c8 <sys_set_alarm_loop>
 800b46a:	e01a      	b.n	800b4a2 <sys_manager_run+0xd6>
		}

		else if (s_state_check == DIGITAL_CLOCK_STATE)
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <sys_manager_run+0xb2>
		{
			// do set time
			sys_display_digital_clock();
 800b472:	f000 f980 	bl	800b776 <sys_display_digital_clock>
			sys_digital_clock_loop(button_state);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f8f0 	bl	800b65c <sys_digital_clock_loop>
 800b47c:	e011      	b.n	800b4a2 <sys_manager_run+0xd6>
		}
		else if (s_state_check == MUSIC_STATE)
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b03      	cmp	r3, #3
 800b482:	d103      	bne.n	800b48c <sys_manager_run+0xc0>
		{
		    sys_sound_loop(button_state);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f8a3 	bl	800b5d0 <sys_sound_loop>
 800b48a:	e00a      	b.n	800b4a2 <sys_manager_run+0xd6>
		}
		else if (s_state_check == ALARM_STATE)
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	2b05      	cmp	r3, #5
 800b490:	d107      	bne.n	800b4a2 <sys_manager_run+0xd6>
		{
			drv_matrix_led_trigger_alarm(s_mng_index_clock);
 800b492:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <sys_manager_run+0xf4>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f7f7 fd64 	bl	8002f64 <drv_matrix_led_trigger_alarm>
			drv_df_playfile(1);
 800b49c:	2001      	movs	r0, #1
 800b49e:	f7f6 fb59 	bl	8001b54 <drv_df_playfile>
	while (status == SYS_MANAGER_OK)
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d09a      	beq.n	800b3de <sys_manager_run+0x12>
		}
	}

	return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	2000b5f8 	.word	0x2000b5f8
 800b4b8:	2000b5f9 	.word	0x2000b5f9
 800b4bc:	20000011 	.word	0x20000011
 800b4c0:	2000b5fa 	.word	0x2000b5fa

0800b4c4 <sys_checking_alarm>:

void sys_checking_alarm(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
	d_rtc_t *s_current_time;
	drv_rtc_get_time();
 800b4ca:	f7f7 fe49 	bl	8003160 <drv_rtc_get_time>
	s_current_time = drv_rtc_get_rtc_ds1307();
 800b4ce:	f7f7 ff63 	bl	8003398 <drv_rtc_get_rtc_ds1307>
 800b4d2:	6078      	str	r0, [r7, #4]
	s_mng_index_clock = drv_matrix_led_check_alarms(s_current_time->hour, s_current_time->min, s_current_time->sec);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7898      	ldrb	r0, [r3, #2]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	7859      	ldrb	r1, [r3, #1]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	f7f7 fd71 	bl	8002fc8 <drv_matrix_led_check_alarms>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <sys_checking_alarm+0x54>)
 800b4ec:	701a      	strb	r2, [r3, #0]
	s_mng_pc_index = ds1307_notify_alarm();
 800b4ee:	f7f8 f973 	bl	80037d8 <ds1307_notify_alarm>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	4b09      	ldr	r3, [pc, #36]	; (800b51c <sys_checking_alarm+0x58>)
 800b4f8:	701a      	strb	r2, [r3, #0]
	if (s_mng_index_clock || s_mng_pc_index)
 800b4fa:	4b07      	ldr	r3, [pc, #28]	; (800b518 <sys_checking_alarm+0x54>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d103      	bne.n	800b50a <sys_checking_alarm+0x46>
 800b502:	4b06      	ldr	r3, [pc, #24]	; (800b51c <sys_checking_alarm+0x58>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <sys_checking_alarm+0x4c>
		{
			s_system_state = ALARM_STATE;
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <sys_checking_alarm+0x5c>)
 800b50c:	2205      	movs	r2, #5
 800b50e:	701a      	strb	r2, [r3, #0]
		}
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	2000b5fa 	.word	0x2000b5fa
 800b51c:	2000b5fb 	.word	0x2000b5fb
 800b520:	20000011 	.word	0x20000011

0800b524 <HAL_UARTEx_RxEventCallback>:
/* Public variables --------------------------------------------------- */
/* Public function prototypes ----------------------------------------- */
/* Private function prototypes -----------------------------------------*/
/*Function definition --------------------------------------------------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART2)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a05      	ldr	r2, [pc, #20]	; (800b54c <HAL_UARTEx_RxEventCallback+0x28>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d103      	bne.n	800b542 <HAL_UARTEx_RxEventCallback+0x1e>
  {
    bsp_uart_pc_control_handle_it(Size);
 800b53a:	887b      	ldrh	r3, [r7, #2]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f5 faed 	bl	8000b1c <bsp_uart_pc_control_handle_it>
  }
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	40004400 	.word	0x40004400

0800b550 <sys_sound_fsm>:
	s_sound_state = SYS_SOUND_IDLE_STATE;
	return SYS_SOUND_OK;
}

void sys_sound_fsm(btn_info_t *button_state)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
	switch (s_sound_state)
 800b558:	4b1c      	ldr	r3, [pc, #112]	; (800b5cc <sys_sound_fsm+0x7c>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d025      	beq.n	800b5ac <sys_sound_fsm+0x5c>
 800b560:	2b02      	cmp	r3, #2
 800b562:	dc2e      	bgt.n	800b5c2 <sys_sound_fsm+0x72>
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <sys_sound_fsm+0x1e>
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d00a      	beq.n	800b582 <sys_sound_fsm+0x32>
			s_sound_state = SYS_SOUND_PLAY_STATE;
			drv_df_playback();
		}
	}
	}
}
 800b56c:	e029      	b.n	800b5c2 <sys_sound_fsm+0x72>
		if (*button_state == SINGLE_CLICK_BUTTON)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d124      	bne.n	800b5c0 <sys_sound_fsm+0x70>
			s_sound_state = SYS_SOUND_PLAY_STATE;
 800b576:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <sys_sound_fsm+0x7c>)
 800b578:	2201      	movs	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
			drv_df_playrandom();
 800b57c:	f7f6 faa2 	bl	8001ac4 <drv_df_playrandom>
	break;
 800b580:	e01e      	b.n	800b5c0 <sys_sound_fsm+0x70>
		if (*button_state == SINGLE_CLICK_BUTTON)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d104      	bne.n	800b594 <sys_sound_fsm+0x44>
			s_sound_state = SYS_SOUND_PAUSE_STATE;
 800b58a:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <sys_sound_fsm+0x7c>)
 800b58c:	2202      	movs	r2, #2
 800b58e:	701a      	strb	r2, [r3, #0]
			drv_df_pause();
 800b590:	f7f6 fa71 	bl	8001a76 <drv_df_pause>
		if (*button_state == DOUBLE_CLICK_BUTTON)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d104      	bne.n	800b5a6 <sys_sound_fsm+0x56>
			s_sound_state = SYS_SOUND_PLAY_STATE;
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <sys_sound_fsm+0x7c>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	701a      	strb	r2, [r3, #0]
			drv_df_next();
 800b5a2:	f7f6 fa5b 	bl	8001a5c <drv_df_next>
		sys_display_fft();
 800b5a6:	f000 f90f 	bl	800b7c8 <sys_display_fft>
	break;
 800b5aa:	e00a      	b.n	800b5c2 <sys_sound_fsm+0x72>
		if (*button_state == SINGLE_CLICK_BUTTON)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d106      	bne.n	800b5c2 <sys_sound_fsm+0x72>
			s_sound_state = SYS_SOUND_PLAY_STATE;
 800b5b4:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <sys_sound_fsm+0x7c>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
			drv_df_playback();
 800b5ba:	f7f6 fa76 	bl	8001aaa <drv_df_playback>
}
 800b5be:	e000      	b.n	800b5c2 <sys_sound_fsm+0x72>
	break;
 800b5c0:	bf00      	nop
}
 800b5c2:	bf00      	nop
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	2000b5fc 	.word	0x2000b5fc

0800b5d0 <sys_sound_loop>:

sys_sound_result_t sys_sound_loop(btn_info_t *button_state)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	sys_sound_fsm(button_state);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ffb9 	bl	800b550 <sys_sound_fsm>
}
 800b5de:	bf00      	nop
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <sys_digital_clock_fsm_update>:
{
  s_state_digital_clock = SYS_STATE_DIGITAL_CLOCK;
}

void sys_digital_clock_fsm_update(btn_info_t *button_state)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  switch (s_state_digital_clock)
 800b5f0:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <sys_digital_clock_fsm_update+0x48>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <sys_digital_clock_fsm_update+0x16>
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d008      	beq.n	800b60e <sys_digital_clock_fsm_update+0x26>
    if (*button_state == SINGLE_CLICK_BUTTON)
      s_state_digital_clock = SYS_STATE_DIGITAL_CLOCK;
    break;

  default:
    break;
 800b5fc:	e012      	b.n	800b624 <sys_digital_clock_fsm_update+0x3c>
    if (*button_state == SINGLE_CLICK_BUTTON)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d10b      	bne.n	800b61e <sys_digital_clock_fsm_update+0x36>
      s_state_digital_clock = SYS_STATE_DATE_TIME;
 800b606:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <sys_digital_clock_fsm_update+0x48>)
 800b608:	2201      	movs	r2, #1
 800b60a:	701a      	strb	r2, [r3, #0]
    break;
 800b60c:	e007      	b.n	800b61e <sys_digital_clock_fsm_update+0x36>
    if (*button_state == SINGLE_CLICK_BUTTON)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d105      	bne.n	800b622 <sys_digital_clock_fsm_update+0x3a>
      s_state_digital_clock = SYS_STATE_DIGITAL_CLOCK;
 800b616:	4b06      	ldr	r3, [pc, #24]	; (800b630 <sys_digital_clock_fsm_update+0x48>)
 800b618:	2200      	movs	r2, #0
 800b61a:	701a      	strb	r2, [r3, #0]
    break;
 800b61c:	e001      	b.n	800b622 <sys_digital_clock_fsm_update+0x3a>
    break;
 800b61e:	bf00      	nop
 800b620:	e000      	b.n	800b624 <sys_digital_clock_fsm_update+0x3c>
    break;
 800b622:	bf00      	nop
  }
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	2000b5fd 	.word	0x2000b5fd

0800b634 <sys_digital_clock_fsm_action>:

uint32_t sys_digital_clock_fsm_action()
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
  switch (s_state_digital_clock)
 800b638:	4b07      	ldr	r3, [pc, #28]	; (800b658 <sys_digital_clock_fsm_action+0x24>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <sys_digital_clock_fsm_action+0x12>
 800b640:	2b01      	cmp	r3, #1
 800b642:	d003      	beq.n	800b64c <sys_digital_clock_fsm_action+0x18>
    break;
  case SYS_STATE_DATE_TIME:
    drv_matrix_led_date_time();
    break;
  default:
    break;
 800b644:	e005      	b.n	800b652 <sys_digital_clock_fsm_action+0x1e>
    drv_matrix_led_digital_clock();
 800b646:	f7f7 fc19 	bl	8002e7c <drv_matrix_led_digital_clock>
    break;
 800b64a:	e002      	b.n	800b652 <sys_digital_clock_fsm_action+0x1e>
    drv_matrix_led_date_time();
 800b64c:	f7f7 fc40 	bl	8002ed0 <drv_matrix_led_date_time>
    break;
 800b650:	bf00      	nop
  }
  return 0;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	bd80      	pop	{r7, pc}
 800b658:	2000b5fd 	.word	0x2000b5fd

0800b65c <sys_digital_clock_loop>:

void sys_digital_clock_loop(btn_info_t *button_state)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  sys_digital_clock_fsm_update(button_state);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff ffbf 	bl	800b5e8 <sys_digital_clock_fsm_update>
  sys_digital_clock_fsm_action();
 800b66a:	f7ff ffe3 	bl	800b634 <sys_digital_clock_fsm_action>
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <sys_display_init>:
static uint16_t adc_buffer[SAMPLE_FFT];
static uint8_t fft_init_flag;
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
void sys_display_init(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  s_state_display = SYS_STATE_DISPLAY_DIGITAL_CLOCK;
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <sys_display_init+0x20>)
 800b67e:	2203      	movs	r2, #3
 800b680:	701a      	strb	r2, [r3, #0]
  fft_init_flag = 0;
 800b682:	4b06      	ldr	r3, [pc, #24]	; (800b69c <sys_display_init+0x24>)
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
  bsp_adc_start(adc_buffer, SAMPLE_FFT);
 800b688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b68c:	4804      	ldr	r0, [pc, #16]	; (800b6a0 <sys_display_init+0x28>)
 800b68e:	f7f4 ff9b 	bl	80005c8 <bsp_adc_start>
}
 800b692:	bf00      	nop
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	2000b5fe 	.word	0x2000b5fe
 800b69c:	2000c604 	.word	0x2000c604
 800b6a0:	2000b604 	.word	0x2000b604

0800b6a4 <sys_display_music_icon>:
void sys_display_music_icon(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
  drv_led_matrix_clear();
 800b6a8:	f7f6 faca 	bl	8001c40 <drv_led_matrix_clear>
  drv_led_matrix_draw_icon(music_note_icon);
 800b6ac:	4804      	ldr	r0, [pc, #16]	; (800b6c0 <sys_display_music_icon+0x1c>)
 800b6ae:	f7f7 fcc9 	bl	8003044 <drv_led_matrix_draw_icon>
  drv_led_matrix_set_brightness(1);
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f7f6 fb38 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b6b8:	f7f6 fb82 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0800e5a4 	.word	0x0800e5a4

0800b6c4 <sys_display_digital_clock_icon>:

void sys_display_digital_clock_icon(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  drv_led_matrix_clear();
 800b6c8:	f7f6 faba 	bl	8001c40 <drv_led_matrix_clear>
  drv_led_matrix_draw_clock_icon();
 800b6cc:	f7f6 fcda 	bl	8002084 <drv_led_matrix_draw_clock_icon>
  drv_led_matrix_set_brightness(1);
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7f6 fb29 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b6d6:	f7f6 fb73 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b6da:	bf00      	nop
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <sys_display_set_rtc_icon>:
void sys_display_set_rtc_icon(void)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af02      	add	r7, sp, #8
  drv_led_matrix_clear();
 800b6e6:	f7f6 faab 	bl	8001c40 <drv_led_matrix_clear>
  drv_led_matrix_draw_string("TES", 2, 3, 255, 0, 0);
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	23ff      	movs	r3, #255	; 0xff
 800b6f4:	2203      	movs	r2, #3
 800b6f6:	2102      	movs	r1, #2
 800b6f8:	4814      	ldr	r0, [pc, #80]	; (800b74c <sys_display_set_rtc_icon+0x6c>)
 800b6fa:	f7f6 fc81 	bl	8002000 <drv_led_matrix_draw_string>
  drv_led_matrix_draw_string("EM", 9, 0, 0, 0, 255);
 800b6fe:	23ff      	movs	r3, #255	; 0xff
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	2300      	movs	r3, #0
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	2300      	movs	r3, #0
 800b708:	2200      	movs	r2, #0
 800b70a:	2109      	movs	r1, #9
 800b70c:	4810      	ldr	r0, [pc, #64]	; (800b750 <sys_display_set_rtc_icon+0x70>)
 800b70e:	f7f6 fc77 	bl	8002000 <drv_led_matrix_draw_string>
  drv_led_matrix_draw_string("IT", 9, 9, 255, 255, 0);
 800b712:	2300      	movs	r3, #0
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	23ff      	movs	r3, #255	; 0xff
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	23ff      	movs	r3, #255	; 0xff
 800b71c:	2209      	movs	r2, #9
 800b71e:	2109      	movs	r1, #9
 800b720:	480c      	ldr	r0, [pc, #48]	; (800b754 <sys_display_set_rtc_icon+0x74>)
 800b722:	f7f6 fc6d 	bl	8002000 <drv_led_matrix_draw_string>
  drv_led_matrix_update_rgb_effect(blink_count);
 800b726:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <sys_display_set_rtc_icon+0x78>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7f7 fb66 	bl	8002dfc <drv_led_matrix_update_rgb_effect>
  blink_count += 10;
 800b730:	4b09      	ldr	r3, [pc, #36]	; (800b758 <sys_display_set_rtc_icon+0x78>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	330a      	adds	r3, #10
 800b736:	4a08      	ldr	r2, [pc, #32]	; (800b758 <sys_display_set_rtc_icon+0x78>)
 800b738:	6013      	str	r3, [r2, #0]
  drv_led_matrix_set_brightness(1);
 800b73a:	2001      	movs	r0, #1
 800b73c:	f7f6 faf4 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b740:	f7f6 fb3e 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b744:	bf00      	nop
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0800dd28 	.word	0x0800dd28
 800b750:	0800dd2c 	.word	0x0800dd2c
 800b754:	0800dd30 	.word	0x0800dd30
 800b758:	2000b600 	.word	0x2000b600

0800b75c <sys_display_set_alarm_icon>:
void sys_display_set_alarm_icon(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	af00      	add	r7, sp, #0
  drv_led_matrix_clear();
 800b760:	f7f6 fa6e 	bl	8001c40 <drv_led_matrix_clear>
  drv_led_matrix_draw_alarm_clock_icon();
 800b764:	f7f6 fce0 	bl	8002128 <drv_led_matrix_draw_alarm_clock_icon>
  drv_led_matrix_set_brightness(1);
 800b768:	2001      	movs	r0, #1
 800b76a:	f7f6 fadd 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b76e:	f7f6 fb27 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b772:	bf00      	nop
 800b774:	bd80      	pop	{r7, pc}

0800b776 <sys_display_digital_clock>:
void sys_display_digital_clock(void)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	af00      	add	r7, sp, #0
  drv_led_matrix_set_brightness(1);
 800b77a:	2001      	movs	r0, #1
 800b77c:	f7f6 fad4 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b780:	f7f6 fb1e 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b784:	bf00      	nop
 800b786:	bd80      	pop	{r7, pc}

0800b788 <sys_display_set_rtc>:
void sys_display_set_rtc(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
  drv_led_matrix_set_brightness(1);
 800b78c:	2001      	movs	r0, #1
 800b78e:	f7f6 facb 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b792:	f7f6 fb15 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b796:	bf00      	nop
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <sys_display_set_alarm>:
void sys_display_set_alarm(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
  drv_led_matrix_update_rgb_effect(blink_count);
 800b7a0:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <sys_display_set_alarm+0x28>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7f7 fb29 	bl	8002dfc <drv_led_matrix_update_rgb_effect>
  blink_count += 10;
 800b7aa:	4b06      	ldr	r3, [pc, #24]	; (800b7c4 <sys_display_set_alarm+0x28>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	330a      	adds	r3, #10
 800b7b0:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <sys_display_set_alarm+0x28>)
 800b7b2:	6013      	str	r3, [r2, #0]
  drv_led_matrix_set_brightness(1);
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	f7f6 fab7 	bl	8001d28 <drv_led_matrix_set_brightness>
  drv_led_matrix_ws2812_send();
 800b7ba:	f7f6 fb01 	bl	8001dc0 <drv_led_matrix_ws2812_send>
}
 800b7be:	bf00      	nop
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000b600 	.word	0x2000b600

0800b7c8 <sys_display_fft>:
void sys_display_fft(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
  if (do_convert_fft_flag == 0)
 800b7cc:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <sys_display_fft+0x1c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d105      	bne.n	800b7e0 <sys_display_fft+0x18>
  {
    fft_process(&do_convert_fft_flag, adc_buffer);
 800b7d4:	4904      	ldr	r1, [pc, #16]	; (800b7e8 <sys_display_fft+0x20>)
 800b7d6:	4803      	ldr	r0, [pc, #12]	; (800b7e4 <sys_display_fft+0x1c>)
 800b7d8:	f7f8 f870 	bl	80038bc <fft_process>
    fft_display();
 800b7dc:	f7f8 fa44 	bl	8003c68 <fft_display>
  }
}
 800b7e0:	bf00      	nop
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20000014 	.word	0x20000014
 800b7e8:	2000b604 	.word	0x2000b604

0800b7ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d108      	bne.n	800b810 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    if (do_convert_fft_flag > 0)
 800b7fe:	4b08      	ldr	r3, [pc, #32]	; (800b820 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <HAL_TIM_PeriodElapsedCallback+0x24>
      do_convert_fft_flag--;
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	4a04      	ldr	r2, [pc, #16]	; (800b820 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800b80e:	6013      	str	r3, [r2, #0]
  }
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	40000400 	.word	0x40000400
 800b820:	20000014 	.word	0x20000014

0800b824 <sys_set_alarm_init>:
/* Private variables -------------------------------------------------- */
void sys_set_alarm_fsm_update(btn_info_t *button_state);
uint32_t sys_set_alarm_fsm_action();
/* Private function prototypes ---------------------------------------- */
void sys_set_alarm_init(void)
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
  s_state_set_alarm = SYS_STATE_SET_ALARM_SEC;
 800b828:	4b03      	ldr	r3, [pc, #12]	; (800b838 <sys_set_alarm_init+0x14>)
 800b82a:	2203      	movs	r2, #3
 800b82c:	701a      	strb	r2, [r3, #0]
}
 800b82e:	bf00      	nop
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	2000c605 	.word	0x2000c605

0800b83c <sys_set_alarm_fsm_update>:

void sys_set_alarm_fsm_update(btn_info_t *button_state)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  switch (s_state_set_alarm)
 800b844:	4b40      	ldr	r3, [pc, #256]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	2b07      	cmp	r3, #7
 800b84a:	d86f      	bhi.n	800b92c <sys_set_alarm_fsm_update+0xf0>
 800b84c:	a201      	add	r2, pc, #4	; (adr r2, 800b854 <sys_set_alarm_fsm_update+0x18>)
 800b84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b852:	bf00      	nop
 800b854:	0800b91d 	.word	0x0800b91d
 800b858:	0800b875 	.word	0x0800b875
 800b85c:	0800b8a5 	.word	0x0800b8a5
 800b860:	0800b8d5 	.word	0x0800b8d5
 800b864:	0800b905 	.word	0x0800b905
 800b868:	0800b90d 	.word	0x0800b90d
 800b86c:	0800b915 	.word	0x0800b915
 800b870:	0800b925 	.word	0x0800b925
  {
  case SYS_STATE_SET_ALARM_HOUR:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d103      	bne.n	800b884 <sys_set_alarm_fsm_update+0x48>
      s_state_set_alarm = SYS_STATE_SET_ALARM_MIN;
 800b87c:	4b32      	ldr	r3, [pc, #200]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b87e:	2202      	movs	r2, #2
 800b880:	701a      	strb	r2, [r3, #0]
    else if (*button_state == HOLD_BUTTON)
      s_state_set_alarm = SYS_STATE_CONFIRM_ALARM;
    else if (*button_state == SINGLE_CLICK_BUTTON)
      s_state_set_alarm = SYS_STATE_SET_ALARM_HOUR_PLUS_ONE;
    break;
 800b882:	e055      	b.n	800b930 <sys_set_alarm_fsm_update+0xf4>
    else if (*button_state == HOLD_BUTTON)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d103      	bne.n	800b894 <sys_set_alarm_fsm_update+0x58>
      s_state_set_alarm = SYS_STATE_CONFIRM_ALARM;
 800b88c:	4b2e      	ldr	r3, [pc, #184]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b88e:	2200      	movs	r2, #0
 800b890:	701a      	strb	r2, [r3, #0]
    break;
 800b892:	e04d      	b.n	800b930 <sys_set_alarm_fsm_update+0xf4>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d149      	bne.n	800b930 <sys_set_alarm_fsm_update+0xf4>
      s_state_set_alarm = SYS_STATE_SET_ALARM_HOUR_PLUS_ONE;
 800b89c:	4b2a      	ldr	r3, [pc, #168]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b89e:	2204      	movs	r2, #4
 800b8a0:	701a      	strb	r2, [r3, #0]
    break;
 800b8a2:	e045      	b.n	800b930 <sys_set_alarm_fsm_update+0xf4>
  case SYS_STATE_SET_ALARM_MIN:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d103      	bne.n	800b8b4 <sys_set_alarm_fsm_update+0x78>
      s_state_set_alarm = SYS_STATE_SET_ALARM_SEC;
 800b8ac:	4b26      	ldr	r3, [pc, #152]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b8ae:	2203      	movs	r2, #3
 800b8b0:	701a      	strb	r2, [r3, #0]
      s_state_set_alarm = SYS_STATE_CONFIRM_ALARM;
    else if (*button_state == SINGLE_CLICK_BUTTON)
    {
      s_state_set_alarm = SYS_STATE_SET_ALARM_MIN_PLUS_ONE;
    }
    break;
 800b8b2:	e03f      	b.n	800b934 <sys_set_alarm_fsm_update+0xf8>
    else if (*button_state == HOLD_BUTTON)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d103      	bne.n	800b8c4 <sys_set_alarm_fsm_update+0x88>
      s_state_set_alarm = SYS_STATE_CONFIRM_ALARM;
 800b8bc:	4b22      	ldr	r3, [pc, #136]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	701a      	strb	r2, [r3, #0]
    break;
 800b8c2:	e037      	b.n	800b934 <sys_set_alarm_fsm_update+0xf8>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d133      	bne.n	800b934 <sys_set_alarm_fsm_update+0xf8>
      s_state_set_alarm = SYS_STATE_SET_ALARM_MIN_PLUS_ONE;
 800b8cc:	4b1e      	ldr	r3, [pc, #120]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b8ce:	2205      	movs	r2, #5
 800b8d0:	701a      	strb	r2, [r3, #0]
    break;
 800b8d2:	e02f      	b.n	800b934 <sys_set_alarm_fsm_update+0xf8>
  case SYS_STATE_SET_ALARM_SEC:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d103      	bne.n	800b8e4 <sys_set_alarm_fsm_update+0xa8>
      s_state_set_alarm = SYS_STATE_SET_ALARM_HOUR;
 800b8dc:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b8de:	2201      	movs	r2, #1
 800b8e0:	701a      	strb	r2, [r3, #0]
      s_state_set_alarm = SYS_STATE_CONFIRM_ALARM;
    else if (*button_state == SINGLE_CLICK_BUTTON)
    {
      s_state_set_alarm = SYS_STATE_SET_ALARM_SEC_PLUS_ONE;
    }
    break;
 800b8e2:	e029      	b.n	800b938 <sys_set_alarm_fsm_update+0xfc>
    else if (*button_state == HOLD_BUTTON)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b03      	cmp	r3, #3
 800b8ea:	d103      	bne.n	800b8f4 <sys_set_alarm_fsm_update+0xb8>
      s_state_set_alarm = SYS_STATE_CONFIRM_ALARM;
 800b8ec:	4b16      	ldr	r3, [pc, #88]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
    break;
 800b8f2:	e021      	b.n	800b938 <sys_set_alarm_fsm_update+0xfc>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d11d      	bne.n	800b938 <sys_set_alarm_fsm_update+0xfc>
      s_state_set_alarm = SYS_STATE_SET_ALARM_SEC_PLUS_ONE;
 800b8fc:	4b12      	ldr	r3, [pc, #72]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b8fe:	2206      	movs	r2, #6
 800b900:	701a      	strb	r2, [r3, #0]
    break;
 800b902:	e019      	b.n	800b938 <sys_set_alarm_fsm_update+0xfc>
  case SYS_STATE_SET_ALARM_HOUR_PLUS_ONE:
    s_state_set_alarm = SYS_STATE_SET_ALARM_HOUR;
 800b904:	4b10      	ldr	r3, [pc, #64]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b906:	2201      	movs	r2, #1
 800b908:	701a      	strb	r2, [r3, #0]
    break;
 800b90a:	e016      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
  case SYS_STATE_SET_ALARM_MIN_PLUS_ONE:
    s_state_set_alarm = SYS_STATE_SET_ALARM_MIN;
 800b90c:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b90e:	2202      	movs	r2, #2
 800b910:	701a      	strb	r2, [r3, #0]
    break;
 800b912:	e012      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
  case SYS_STATE_SET_ALARM_SEC_PLUS_ONE:
    s_state_set_alarm = SYS_STATE_SET_ALARM_SEC;
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b916:	2203      	movs	r2, #3
 800b918:	701a      	strb	r2, [r3, #0]
    break;
 800b91a:	e00e      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
  case SYS_STATE_CONFIRM_ALARM:
    s_state_set_alarm = SYS_STATE_SET_ALARM_FINISH;
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b91e:	2207      	movs	r2, #7
 800b920:	701a      	strb	r2, [r3, #0]
    break;
 800b922:	e00a      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
  case SYS_STATE_SET_ALARM_FINISH:
    s_state_set_alarm = SYS_STATE_SET_ALARM_HOUR;
 800b924:	4b08      	ldr	r3, [pc, #32]	; (800b948 <sys_set_alarm_fsm_update+0x10c>)
 800b926:	2201      	movs	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
    break;
 800b92a:	e006      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
  default:
    break;
 800b92c:	bf00      	nop
 800b92e:	e004      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
    break;
 800b930:	bf00      	nop
 800b932:	e002      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
    break;
 800b934:	bf00      	nop
 800b936:	e000      	b.n	800b93a <sys_set_alarm_fsm_update+0xfe>
    break;
 800b938:	bf00      	nop
  }
}
 800b93a:	bf00      	nop
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	2000c605 	.word	0x2000c605

0800b94c <sys_set_alarm_fsm_action>:

uint32_t sys_set_alarm_fsm_action()
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
  switch (s_state_set_alarm)
 800b950:	4b1c      	ldr	r3, [pc, #112]	; (800b9c4 <sys_set_alarm_fsm_action+0x78>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b07      	cmp	r3, #7
 800b956:	d831      	bhi.n	800b9bc <sys_set_alarm_fsm_action+0x70>
 800b958:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <sys_set_alarm_fsm_action+0x14>)
 800b95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95e:	bf00      	nop
 800b960:	0800b9b1 	.word	0x0800b9b1
 800b964:	0800b981 	.word	0x0800b981
 800b968:	0800b989 	.word	0x0800b989
 800b96c:	0800b991 	.word	0x0800b991
 800b970:	0800b999 	.word	0x0800b999
 800b974:	0800b9a1 	.word	0x0800b9a1
 800b978:	0800b9a9 	.word	0x0800b9a9
 800b97c:	0800b9b9 	.word	0x0800b9b9
  {

  case SYS_STATE_SET_ALARM_HOUR:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_HOUR);
 800b980:	2004      	movs	r0, #4
 800b982:	f7f6 ff51 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b986:	e01a      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_SET_ALARM_MIN:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_MIN);
 800b988:	2005      	movs	r0, #5
 800b98a:	f7f6 ff4d 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b98e:	e016      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_SET_ALARM_SEC:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_SEC);
 800b990:	2006      	movs	r0, #6
 800b992:	f7f6 ff49 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b996:	e012      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_SET_ALARM_HOUR_PLUS_ONE:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_HOUR_PLUS_ONE);
 800b998:	2007      	movs	r0, #7
 800b99a:	f7f6 ff45 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b99e:	e00e      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_SET_ALARM_MIN_PLUS_ONE:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_MIN_PLUS_ONE);
 800b9a0:	2008      	movs	r0, #8
 800b9a2:	f7f6 ff41 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b9a6:	e00a      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_SET_ALARM_SEC_PLUS_ONE:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_SEC_PLUS_ONE);
 800b9a8:	2009      	movs	r0, #9
 800b9aa:	f7f6 ff3d 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b9ae:	e006      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_CONFIRM_ALARM:
    drv_led_matrix_set_alarm_interactive(D_LED_MATRIX_ALARM_NEXT);
 800b9b0:	200a      	movs	r0, #10
 800b9b2:	f7f6 ff39 	bl	8002828 <drv_led_matrix_set_alarm_interactive>
    break;
 800b9b6:	e002      	b.n	800b9be <sys_set_alarm_fsm_action+0x72>
  case SYS_STATE_SET_ALARM_FINISH:
    return SYS_STATE_SET_ALARM_FINISH;
 800b9b8:	2307      	movs	r3, #7
 800b9ba:	e001      	b.n	800b9c0 <sys_set_alarm_fsm_action+0x74>
    break;
  default:
    break;
 800b9bc:	bf00      	nop
  }
  return 0;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	2000c605 	.word	0x2000c605

0800b9c8 <sys_set_alarm_loop>:

void sys_set_alarm_loop(btn_info_t *button_state)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  sys_set_alarm_fsm_update(button_state);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff ff33 	bl	800b83c <sys_set_alarm_fsm_update>
  sys_set_alarm_fsm_action();
 800b9d6:	f7ff ffb9 	bl	800b94c <sys_set_alarm_fsm_action>
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <sys_set_time_init>:
d_rtc_t set_time;
d_rtc_t set_date;
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
void sys_set_time_init(void)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
  s_state_set_time = SYS_STATE_SET_DATE;
 800b9e8:	4b03      	ldr	r3, [pc, #12]	; (800b9f8 <sys_set_time_init+0x14>)
 800b9ea:	2209      	movs	r2, #9
 800b9ec:	701a      	strb	r2, [r3, #0]
}
 800b9ee:	bf00      	nop
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	2000c606 	.word	0x2000c606

0800b9fc <sys_set_time_fsm_update>:
void sys_set_time_fsm_update(btn_info_t *button_state)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  switch (s_state_set_time)
 800ba04:	4b98      	ldr	r3, [pc, #608]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b12      	cmp	r3, #18
 800ba0a:	f200 8115 	bhi.w	800bc38 <sys_set_time_fsm_update+0x23c>
 800ba0e:	a201      	add	r2, pc, #4	; (adr r2, 800ba14 <sys_set_time_fsm_update+0x18>)
 800ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba14:	0800ba61 	.word	0x0800ba61
 800ba18:	0800ba93 	.word	0x0800ba93
 800ba1c:	0800bac5 	.word	0x0800bac5
 800ba20:	0800baf7 	.word	0x0800baf7
 800ba24:	0800bb29 	.word	0x0800bb29
 800ba28:	0800bb31 	.word	0x0800bb31
 800ba2c:	0800bb39 	.word	0x0800bb39
 800ba30:	0800bb41 	.word	0x0800bb41
 800ba34:	0800bb49 	.word	0x0800bb49
 800ba38:	0800bb51 	.word	0x0800bb51
 800ba3c:	0800bb81 	.word	0x0800bb81
 800ba40:	0800bbb1 	.word	0x0800bbb1
 800ba44:	0800bbe1 	.word	0x0800bbe1
 800ba48:	0800bc11 	.word	0x0800bc11
 800ba4c:	0800bc19 	.word	0x0800bc19
 800ba50:	0800bc21 	.word	0x0800bc21
 800ba54:	0800bc29 	.word	0x0800bc29
 800ba58:	0800bc31 	.word	0x0800bc31
 800ba5c:	0800bc39 	.word	0x0800bc39
  {
  case SYS_STATE_SET_TIME:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d103      	bne.n	800ba70 <sys_set_time_fsm_update+0x74>
      s_state_set_time = SYS_STATE_SET_DATE;
 800ba68:	4b7f      	ldr	r3, [pc, #508]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800ba6a:	2209      	movs	r2, #9
 800ba6c:	701a      	strb	r2, [r3, #0]
    else if (*button_state == HOLD_BUTTON)
      s_state_set_time = SYS_STATE_EXIT;
    else if (*button_state == SINGLE_CLICK_BUTTON)
      s_state_set_time = SYS_STATE_SET_TIME_HOUR;
    break;
 800ba6e:	e0e5      	b.n	800bc3c <sys_set_time_fsm_update+0x240>
    else if (*button_state == HOLD_BUTTON)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d103      	bne.n	800ba80 <sys_set_time_fsm_update+0x84>
      s_state_set_time = SYS_STATE_EXIT;
 800ba78:	4b7b      	ldr	r3, [pc, #492]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800ba7a:	2212      	movs	r2, #18
 800ba7c:	701a      	strb	r2, [r3, #0]
    break;
 800ba7e:	e0dd      	b.n	800bc3c <sys_set_time_fsm_update+0x240>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	f040 80d9 	bne.w	800bc3c <sys_set_time_fsm_update+0x240>
      s_state_set_time = SYS_STATE_SET_TIME_HOUR;
 800ba8a:	4b77      	ldr	r3, [pc, #476]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	701a      	strb	r2, [r3, #0]
    break;
 800ba90:	e0d4      	b.n	800bc3c <sys_set_time_fsm_update+0x240>
  case SYS_STATE_SET_TIME_HOUR:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d103      	bne.n	800baa2 <sys_set_time_fsm_update+0xa6>
      s_state_set_time = SYS_STATE_SET_TIME_MIN;
 800ba9a:	4b73      	ldr	r3, [pc, #460]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	701a      	strb	r2, [r3, #0]
    else if (*button_state == HOLD_BUTTON)
      s_state_set_time = SYS_STATE_CONFIRM_SET_TIME;
    else if (*button_state == SINGLE_CLICK_BUTTON)
      s_state_set_time = SYS_STATE_SET_TIME_HOUR_PLUS_ONE;
    break;
 800baa0:	e0ce      	b.n	800bc40 <sys_set_time_fsm_update+0x244>
    else if (*button_state == HOLD_BUTTON)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d103      	bne.n	800bab2 <sys_set_time_fsm_update+0xb6>
      s_state_set_time = SYS_STATE_CONFIRM_SET_TIME;
 800baaa:	4b6f      	ldr	r3, [pc, #444]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800baac:	2207      	movs	r2, #7
 800baae:	701a      	strb	r2, [r3, #0]
    break;
 800bab0:	e0c6      	b.n	800bc40 <sys_set_time_fsm_update+0x244>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	f040 80c2 	bne.w	800bc40 <sys_set_time_fsm_update+0x244>
      s_state_set_time = SYS_STATE_SET_TIME_HOUR_PLUS_ONE;
 800babc:	4b6a      	ldr	r3, [pc, #424]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800babe:	2204      	movs	r2, #4
 800bac0:	701a      	strb	r2, [r3, #0]
    break;
 800bac2:	e0bd      	b.n	800bc40 <sys_set_time_fsm_update+0x244>
  case SYS_STATE_SET_TIME_MIN:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d103      	bne.n	800bad4 <sys_set_time_fsm_update+0xd8>
      s_state_set_time = SYS_STATE_SET_TIME_SEC;
 800bacc:	4b66      	ldr	r3, [pc, #408]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bace:	2203      	movs	r2, #3
 800bad0:	701a      	strb	r2, [r3, #0]
      s_state_set_time = SYS_STATE_CONFIRM_SET_TIME;
    else if (*button_state == SINGLE_CLICK_BUTTON)
    {
      s_state_set_time = SYS_STATE_SET_TIME_MIN_PLUS_ONE;
    }
    break;
 800bad2:	e0b7      	b.n	800bc44 <sys_set_time_fsm_update+0x248>
    else if (*button_state == HOLD_BUTTON)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d103      	bne.n	800bae4 <sys_set_time_fsm_update+0xe8>
      s_state_set_time = SYS_STATE_CONFIRM_SET_TIME;
 800badc:	4b62      	ldr	r3, [pc, #392]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bade:	2207      	movs	r2, #7
 800bae0:	701a      	strb	r2, [r3, #0]
    break;
 800bae2:	e0af      	b.n	800bc44 <sys_set_time_fsm_update+0x248>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	f040 80ab 	bne.w	800bc44 <sys_set_time_fsm_update+0x248>
      s_state_set_time = SYS_STATE_SET_TIME_MIN_PLUS_ONE;
 800baee:	4b5e      	ldr	r3, [pc, #376]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800baf0:	2205      	movs	r2, #5
 800baf2:	701a      	strb	r2, [r3, #0]
    break;
 800baf4:	e0a6      	b.n	800bc44 <sys_set_time_fsm_update+0x248>
  case SYS_STATE_SET_TIME_SEC:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d103      	bne.n	800bb06 <sys_set_time_fsm_update+0x10a>
      s_state_set_time = SYS_STATE_SET_TIME_HOUR;
 800bafe:	4b5a      	ldr	r3, [pc, #360]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb00:	2201      	movs	r2, #1
 800bb02:	701a      	strb	r2, [r3, #0]
      s_state_set_time = SYS_STATE_CONFIRM_SET_TIME;
    else if (*button_state == SINGLE_CLICK_BUTTON)
    {
      s_state_set_time = SYS_STATE_SET_TIME_SEC_PLUS_ONE;
    }
    break;
 800bb04:	e0a0      	b.n	800bc48 <sys_set_time_fsm_update+0x24c>
    else if (*button_state == HOLD_BUTTON)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d103      	bne.n	800bb16 <sys_set_time_fsm_update+0x11a>
      s_state_set_time = SYS_STATE_CONFIRM_SET_TIME;
 800bb0e:	4b56      	ldr	r3, [pc, #344]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	701a      	strb	r2, [r3, #0]
    break;
 800bb14:	e098      	b.n	800bc48 <sys_set_time_fsm_update+0x24c>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	f040 8094 	bne.w	800bc48 <sys_set_time_fsm_update+0x24c>
      s_state_set_time = SYS_STATE_SET_TIME_SEC_PLUS_ONE;
 800bb20:	4b51      	ldr	r3, [pc, #324]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb22:	2206      	movs	r2, #6
 800bb24:	701a      	strb	r2, [r3, #0]
    break;
 800bb26:	e08f      	b.n	800bc48 <sys_set_time_fsm_update+0x24c>
  case SYS_STATE_SET_TIME_HOUR_PLUS_ONE:
    s_state_set_time = SYS_STATE_SET_TIME_HOUR;
 800bb28:	4b4f      	ldr	r3, [pc, #316]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
    break;
 800bb2e:	e094      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_SET_TIME_MIN_PLUS_ONE:
    s_state_set_time = SYS_STATE_SET_TIME_MIN;
 800bb30:	4b4d      	ldr	r3, [pc, #308]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb32:	2202      	movs	r2, #2
 800bb34:	701a      	strb	r2, [r3, #0]
    break;
 800bb36:	e090      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_SET_TIME_SEC_PLUS_ONE:
    s_state_set_time = SYS_STATE_SET_TIME_SEC;
 800bb38:	4b4b      	ldr	r3, [pc, #300]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	701a      	strb	r2, [r3, #0]
    break;
 800bb3e:	e08c      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_CONFIRM_SET_TIME:
    s_state_set_time = SYS_STATE_SET_TIME;
 800bb40:	4b49      	ldr	r3, [pc, #292]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	701a      	strb	r2, [r3, #0]
    break;
 800bb46:	e088      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_FINSH_SET_TIME:
    s_state_set_time = SYS_STATE_SET_TIME;
 800bb48:	4b47      	ldr	r3, [pc, #284]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
    break;
 800bb4e:	e084      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_SET_DATE:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d103      	bne.n	800bb60 <sys_set_time_fsm_update+0x164>
      s_state_set_time = SYS_STATE_SET_TIME;
 800bb58:	4b43      	ldr	r3, [pc, #268]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
    else if (*button_state == HOLD_BUTTON)
      s_state_set_time = SYS_STATE_EXIT;
    else if (*button_state == SINGLE_CLICK_BUTTON)
      s_state_set_time = SYS_STATE_SET_DATE_DATE;
    break;
 800bb5e:	e075      	b.n	800bc4c <sys_set_time_fsm_update+0x250>
    else if (*button_state == HOLD_BUTTON)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d103      	bne.n	800bb70 <sys_set_time_fsm_update+0x174>
      s_state_set_time = SYS_STATE_EXIT;
 800bb68:	4b3f      	ldr	r3, [pc, #252]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb6a:	2212      	movs	r2, #18
 800bb6c:	701a      	strb	r2, [r3, #0]
    break;
 800bb6e:	e06d      	b.n	800bc4c <sys_set_time_fsm_update+0x250>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d169      	bne.n	800bc4c <sys_set_time_fsm_update+0x250>
      s_state_set_time = SYS_STATE_SET_DATE_DATE;
 800bb78:	4b3b      	ldr	r3, [pc, #236]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	701a      	strb	r2, [r3, #0]
    break;
 800bb7e:	e065      	b.n	800bc4c <sys_set_time_fsm_update+0x250>
  case SYS_STATE_SET_DATE_DATE:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d103      	bne.n	800bb90 <sys_set_time_fsm_update+0x194>
      s_state_set_time = SYS_STATE_SET_DATE_MONTH;
 800bb88:	4b37      	ldr	r3, [pc, #220]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb8a:	220b      	movs	r2, #11
 800bb8c:	701a      	strb	r2, [r3, #0]
    else if (*button_state == HOLD_BUTTON)
      s_state_set_time = SYS_STATE_CONFIRM_SET_DATE;
    else if (*button_state == SINGLE_CLICK_BUTTON)
      s_state_set_time = SYS_STATE_SET_DATE_DATE_PLUS_ONE;
    break;
 800bb8e:	e05f      	b.n	800bc50 <sys_set_time_fsm_update+0x254>
    else if (*button_state == HOLD_BUTTON)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d103      	bne.n	800bba0 <sys_set_time_fsm_update+0x1a4>
      s_state_set_time = SYS_STATE_CONFIRM_SET_DATE;
 800bb98:	4b33      	ldr	r3, [pc, #204]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	701a      	strb	r2, [r3, #0]
    break;
 800bb9e:	e057      	b.n	800bc50 <sys_set_time_fsm_update+0x254>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d153      	bne.n	800bc50 <sys_set_time_fsm_update+0x254>
      s_state_set_time = SYS_STATE_SET_DATE_DATE_PLUS_ONE;
 800bba8:	4b2f      	ldr	r3, [pc, #188]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bbaa:	220d      	movs	r2, #13
 800bbac:	701a      	strb	r2, [r3, #0]
    break;
 800bbae:	e04f      	b.n	800bc50 <sys_set_time_fsm_update+0x254>
  case SYS_STATE_SET_DATE_MONTH:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d103      	bne.n	800bbc0 <sys_set_time_fsm_update+0x1c4>
      s_state_set_time = SYS_STATE_SET_DATE_YEAR;
 800bbb8:	4b2b      	ldr	r3, [pc, #172]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bbba:	220c      	movs	r2, #12
 800bbbc:	701a      	strb	r2, [r3, #0]
      s_state_set_time = SYS_STATE_CONFIRM_SET_DATE;
    else if (*button_state == SINGLE_CLICK_BUTTON)
    {
      s_state_set_time = SYS_STATE_SET_DATE_MONTH_PLUS_ONE;
    }
    break;
 800bbbe:	e049      	b.n	800bc54 <sys_set_time_fsm_update+0x258>
    else if (*button_state == HOLD_BUTTON)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d103      	bne.n	800bbd0 <sys_set_time_fsm_update+0x1d4>
      s_state_set_time = SYS_STATE_CONFIRM_SET_DATE;
 800bbc8:	4b27      	ldr	r3, [pc, #156]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bbca:	2210      	movs	r2, #16
 800bbcc:	701a      	strb	r2, [r3, #0]
    break;
 800bbce:	e041      	b.n	800bc54 <sys_set_time_fsm_update+0x258>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d13d      	bne.n	800bc54 <sys_set_time_fsm_update+0x258>
      s_state_set_time = SYS_STATE_SET_DATE_MONTH_PLUS_ONE;
 800bbd8:	4b23      	ldr	r3, [pc, #140]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bbda:	220e      	movs	r2, #14
 800bbdc:	701a      	strb	r2, [r3, #0]
    break;
 800bbde:	e039      	b.n	800bc54 <sys_set_time_fsm_update+0x258>
  case SYS_STATE_SET_DATE_YEAR:
    if (*button_state == DOUBLE_CLICK_BUTTON)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d103      	bne.n	800bbf0 <sys_set_time_fsm_update+0x1f4>
      s_state_set_time = SYS_STATE_SET_DATE_DATE;
 800bbe8:	4b1f      	ldr	r3, [pc, #124]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bbea:	220a      	movs	r2, #10
 800bbec:	701a      	strb	r2, [r3, #0]
      s_state_set_time = SYS_STATE_CONFIRM_SET_DATE;
    else if (*button_state == SINGLE_CLICK_BUTTON)
    {
      s_state_set_time = SYS_STATE_SET_TIME_YEAR_PLUS_ONE;
    }
    break;
 800bbee:	e033      	b.n	800bc58 <sys_set_time_fsm_update+0x25c>
    else if (*button_state == HOLD_BUTTON)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d103      	bne.n	800bc00 <sys_set_time_fsm_update+0x204>
      s_state_set_time = SYS_STATE_CONFIRM_SET_DATE;
 800bbf8:	4b1b      	ldr	r3, [pc, #108]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bbfa:	2210      	movs	r2, #16
 800bbfc:	701a      	strb	r2, [r3, #0]
    break;
 800bbfe:	e02b      	b.n	800bc58 <sys_set_time_fsm_update+0x25c>
    else if (*button_state == SINGLE_CLICK_BUTTON)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d127      	bne.n	800bc58 <sys_set_time_fsm_update+0x25c>
      s_state_set_time = SYS_STATE_SET_TIME_YEAR_PLUS_ONE;
 800bc08:	4b17      	ldr	r3, [pc, #92]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bc0a:	220f      	movs	r2, #15
 800bc0c:	701a      	strb	r2, [r3, #0]
    break;
 800bc0e:	e023      	b.n	800bc58 <sys_set_time_fsm_update+0x25c>
  case SYS_STATE_SET_DATE_DATE_PLUS_ONE:
    s_state_set_time = SYS_STATE_SET_DATE_DATE;
 800bc10:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bc12:	220a      	movs	r2, #10
 800bc14:	701a      	strb	r2, [r3, #0]
    break;
 800bc16:	e020      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_SET_DATE_MONTH_PLUS_ONE:
    s_state_set_time = SYS_STATE_SET_DATE_MONTH;
 800bc18:	4b13      	ldr	r3, [pc, #76]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bc1a:	220b      	movs	r2, #11
 800bc1c:	701a      	strb	r2, [r3, #0]
    break;
 800bc1e:	e01c      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_SET_TIME_YEAR_PLUS_ONE:
    s_state_set_time = SYS_STATE_SET_DATE_YEAR;
 800bc20:	4b11      	ldr	r3, [pc, #68]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bc22:	220c      	movs	r2, #12
 800bc24:	701a      	strb	r2, [r3, #0]
    break;
 800bc26:	e018      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_CONFIRM_SET_DATE:
    s_state_set_time = SYS_STATE_SET_DATE;
 800bc28:	4b0f      	ldr	r3, [pc, #60]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bc2a:	2209      	movs	r2, #9
 800bc2c:	701a      	strb	r2, [r3, #0]
    break;
 800bc2e:	e014      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_FINSH_SET_DATE:
    s_state_set_time = SYS_STATE_SET_DATE;
 800bc30:	4b0d      	ldr	r3, [pc, #52]	; (800bc68 <sys_set_time_fsm_update+0x26c>)
 800bc32:	2209      	movs	r2, #9
 800bc34:	701a      	strb	r2, [r3, #0]
    break;
 800bc36:	e010      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
  case SYS_STATE_EXIT:
    break;
  default:
    break;
 800bc38:	bf00      	nop
 800bc3a:	e00e      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc3c:	bf00      	nop
 800bc3e:	e00c      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc40:	bf00      	nop
 800bc42:	e00a      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc44:	bf00      	nop
 800bc46:	e008      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc48:	bf00      	nop
 800bc4a:	e006      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc4c:	bf00      	nop
 800bc4e:	e004      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc50:	bf00      	nop
 800bc52:	e002      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc54:	bf00      	nop
 800bc56:	e000      	b.n	800bc5a <sys_set_time_fsm_update+0x25e>
    break;
 800bc58:	bf00      	nop
  }
}
 800bc5a:	bf00      	nop
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	2000c606 	.word	0x2000c606

0800bc6c <sys_set_time_fsm_action>:

uint32_t sys_set_time_fsm_action()
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	af00      	add	r7, sp, #0
  switch (s_state_set_time)
 800bc70:	4b64      	ldr	r3, [pc, #400]	; (800be04 <sys_set_time_fsm_action+0x198>)
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b12      	cmp	r3, #18
 800bc76:	f200 80c1 	bhi.w	800bdfc <sys_set_time_fsm_action+0x190>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <sys_set_time_fsm_action+0x14>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bccd 	.word	0x0800bccd
 800bc84:	0800bcd9 	.word	0x0800bcd9
 800bc88:	0800bce1 	.word	0x0800bce1
 800bc8c:	0800bce9 	.word	0x0800bce9
 800bc90:	0800bcf1 	.word	0x0800bcf1
 800bc94:	0800bcf9 	.word	0x0800bcf9
 800bc98:	0800bd01 	.word	0x0800bd01
 800bc9c:	0800bd09 	.word	0x0800bd09
 800bca0:	0800bd5b 	.word	0x0800bd5b
 800bca4:	0800bd63 	.word	0x0800bd63
 800bca8:	0800bd6f 	.word	0x0800bd6f
 800bcac:	0800bd77 	.word	0x0800bd77
 800bcb0:	0800bd7f 	.word	0x0800bd7f
 800bcb4:	0800bd87 	.word	0x0800bd87
 800bcb8:	0800bd8f 	.word	0x0800bd8f
 800bcbc:	0800bd97 	.word	0x0800bd97
 800bcc0:	0800bd9f 	.word	0x0800bd9f
 800bcc4:	0800bdf1 	.word	0x0800bdf1
 800bcc8:	0800bdf9 	.word	0x0800bdf9
  {

  case SYS_STATE_SET_TIME:
    drv_led_matrix_clear();
 800bccc:	f7f5 ffb8 	bl	8001c40 <drv_led_matrix_clear>
    drv_led_matrix_set_rtc_interactive(D_LED_MATRIX_SET_TIME);
 800bcd0:	2017      	movs	r0, #23
 800bcd2:	f7f6 fea7 	bl	8002a24 <drv_led_matrix_set_rtc_interactive>
    break;
 800bcd6:	e092      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_HOUR:
    drv_led_matrix_set_time_interactive(D_LED_MATRIX_SET_TIME_HOUR);
 800bcd8:	200b      	movs	r0, #11
 800bcda:	f7f6 fedb 	bl	8002a94 <drv_led_matrix_set_time_interactive>
    break;
 800bcde:	e08e      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_MIN:
    drv_led_matrix_set_time_interactive(D_LED_MATRIX_SET_TIME_MIN);
 800bce0:	200c      	movs	r0, #12
 800bce2:	f7f6 fed7 	bl	8002a94 <drv_led_matrix_set_time_interactive>
    break;
 800bce6:	e08a      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_SEC:
    drv_led_matrix_set_time_interactive(D_LED_MATRIX_SET_TIME_SEC);
 800bce8:	200d      	movs	r0, #13
 800bcea:	f7f6 fed3 	bl	8002a94 <drv_led_matrix_set_time_interactive>
    break;
 800bcee:	e086      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_HOUR_PLUS_ONE:
    drv_led_matrix_set_time_interactive(D_LED_MATRIX_SET_TIME_HOUR_PLUS_ONE);
 800bcf0:	200e      	movs	r0, #14
 800bcf2:	f7f6 fecf 	bl	8002a94 <drv_led_matrix_set_time_interactive>
    break;
 800bcf6:	e082      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_MIN_PLUS_ONE:
    drv_led_matrix_set_time_interactive(D_LED_MATRIX_SET_TIME_MIN_PLUS_ONE);
 800bcf8:	200f      	movs	r0, #15
 800bcfa:	f7f6 fecb 	bl	8002a94 <drv_led_matrix_set_time_interactive>
    break;
 800bcfe:	e07e      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_SEC_PLUS_ONE:
    drv_led_matrix_set_time_interactive(D_LED_MATRIX_SET_TIME_SEC_PLUS_ONE);
 800bd00:	2010      	movs	r0, #16
 800bd02:	f7f6 fec7 	bl	8002a94 <drv_led_matrix_set_time_interactive>
    break;
 800bd06:	e07a      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_CONFIRM_SET_TIME:

    set_time.hour = *get_set_time_hour();
 800bd08:	f7f5 ff5e 	bl	8001bc8 <get_set_time_hour>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	4b3d      	ldr	r3, [pc, #244]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd12:	709a      	strb	r2, [r3, #2]
    set_time.min = *get_set_time_minutes();
 800bd14:	f7f5 ff62 	bl	8001bdc <get_set_time_minutes>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	781a      	ldrb	r2, [r3, #0]
 800bd1c:	4b3a      	ldr	r3, [pc, #232]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd1e:	705a      	strb	r2, [r3, #1]
    set_time.sec = *get_set_time_seconds();
 800bd20:	f7f5 ff66 	bl	8001bf0 <get_set_time_seconds>
 800bd24:	4603      	mov	r3, r0
 800bd26:	781a      	ldrb	r2, [r3, #0]
 800bd28:	4b37      	ldr	r3, [pc, #220]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd2a:	701a      	strb	r2, [r3, #0]
    set_time.date = *get_set_time_date();
 800bd2c:	f7f5 ff6a 	bl	8001c04 <get_set_time_date>
 800bd30:	4603      	mov	r3, r0
 800bd32:	781a      	ldrb	r2, [r3, #0]
 800bd34:	4b34      	ldr	r3, [pc, #208]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd36:	711a      	strb	r2, [r3, #4]
    set_time.month = *get_set_time_month();
 800bd38:	f7f5 ff6e 	bl	8001c18 <get_set_time_month>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	781a      	ldrb	r2, [r3, #0]
 800bd40:	4b31      	ldr	r3, [pc, #196]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd42:	715a      	strb	r2, [r3, #5]
    set_time.year = *get_set_time_year();
 800bd44:	f7f5 ff72 	bl	8001c2c <get_set_time_year>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	781a      	ldrb	r2, [r3, #0]
 800bd4c:	4b2e      	ldr	r3, [pc, #184]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd4e:	719a      	strb	r2, [r3, #6]

    drv_rtc_set_time(&set_time, D_RTC_24_FORMAT);
 800bd50:	2101      	movs	r1, #1
 800bd52:	482d      	ldr	r0, [pc, #180]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bd54:	f7f7 fa70 	bl	8003238 <drv_rtc_set_time>
    break;
 800bd58:	e051      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_FINSH_SET_TIME:
    drv_led_matrix_clear();
 800bd5a:	f7f5 ff71 	bl	8001c40 <drv_led_matrix_clear>
    return SYS_STATE_FINSH_SET_TIME;
 800bd5e:	2308      	movs	r3, #8
 800bd60:	e04e      	b.n	800be00 <sys_set_time_fsm_action+0x194>
    break;

  case SYS_STATE_SET_DATE:
    drv_led_matrix_clear();
 800bd62:	f7f5 ff6d 	bl	8001c40 <drv_led_matrix_clear>
    drv_led_matrix_set_rtc_interactive(D_LED_MATRIX_SET_DATE);
 800bd66:	2018      	movs	r0, #24
 800bd68:	f7f6 fe5c 	bl	8002a24 <drv_led_matrix_set_rtc_interactive>
    break;
 800bd6c:	e047      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_DATE_DATE:
    drv_led_matrix_set_date_interactive(D_LED_MATRIX_SET_TIME_DATE);
 800bd6e:	2011      	movs	r0, #17
 800bd70:	f7f6 ff9e 	bl	8002cb0 <drv_led_matrix_set_date_interactive>
    break;
 800bd74:	e043      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_DATE_MONTH:
    drv_led_matrix_set_date_interactive(D_LED_MATRIX_SET_TIME_MONTH);
 800bd76:	2012      	movs	r0, #18
 800bd78:	f7f6 ff9a 	bl	8002cb0 <drv_led_matrix_set_date_interactive>
    break;
 800bd7c:	e03f      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_DATE_YEAR:
    drv_led_matrix_set_date_interactive(D_LED_MATRIX_SET_TIME_YEAR);
 800bd7e:	2013      	movs	r0, #19
 800bd80:	f7f6 ff96 	bl	8002cb0 <drv_led_matrix_set_date_interactive>
    break;
 800bd84:	e03b      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_DATE_DATE_PLUS_ONE:
    drv_led_matrix_set_date_interactive(D_LED_MATRIX_SET_TIME_DATE_PLUS_ONE);
 800bd86:	2014      	movs	r0, #20
 800bd88:	f7f6 ff92 	bl	8002cb0 <drv_led_matrix_set_date_interactive>
    break;
 800bd8c:	e037      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_DATE_MONTH_PLUS_ONE:
    drv_led_matrix_set_date_interactive(D_LED_MATRIX_SET_TIME_MONTH_PLUS_ONE);
 800bd8e:	2015      	movs	r0, #21
 800bd90:	f7f6 ff8e 	bl	8002cb0 <drv_led_matrix_set_date_interactive>
    break;
 800bd94:	e033      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_SET_TIME_YEAR_PLUS_ONE:
    drv_led_matrix_set_date_interactive(D_LED_MATRIX_SET_TIME_YEAR_PLUS_ONE);
 800bd96:	2016      	movs	r0, #22
 800bd98:	f7f6 ff8a 	bl	8002cb0 <drv_led_matrix_set_date_interactive>
    break;
 800bd9c:	e02f      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_CONFIRM_SET_DATE:

    set_time.hour = *get_set_time_hour();
 800bd9e:	f7f5 ff13 	bl	8001bc8 <get_set_time_hour>
 800bda2:	4603      	mov	r3, r0
 800bda4:	781a      	ldrb	r2, [r3, #0]
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bda8:	709a      	strb	r2, [r3, #2]
    set_time.min = *get_set_time_minutes();
 800bdaa:	f7f5 ff17 	bl	8001bdc <get_set_time_minutes>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	4b15      	ldr	r3, [pc, #84]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bdb4:	705a      	strb	r2, [r3, #1]
    set_time.sec = *get_set_time_seconds();
 800bdb6:	f7f5 ff1b 	bl	8001bf0 <get_set_time_seconds>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	781a      	ldrb	r2, [r3, #0]
 800bdbe:	4b12      	ldr	r3, [pc, #72]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bdc0:	701a      	strb	r2, [r3, #0]
    set_time.date = *get_set_time_date();
 800bdc2:	f7f5 ff1f 	bl	8001c04 <get_set_time_date>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	781a      	ldrb	r2, [r3, #0]
 800bdca:	4b0f      	ldr	r3, [pc, #60]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bdcc:	711a      	strb	r2, [r3, #4]
    set_time.month = *get_set_time_month();
 800bdce:	f7f5 ff23 	bl	8001c18 <get_set_time_month>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	781a      	ldrb	r2, [r3, #0]
 800bdd6:	4b0c      	ldr	r3, [pc, #48]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bdd8:	715a      	strb	r2, [r3, #5]
    set_time.year = *get_set_time_year();
 800bdda:	f7f5 ff27 	bl	8001c2c <get_set_time_year>
 800bdde:	4603      	mov	r3, r0
 800bde0:	781a      	ldrb	r2, [r3, #0]
 800bde2:	4b09      	ldr	r3, [pc, #36]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bde4:	719a      	strb	r2, [r3, #6]

    drv_rtc_set_time(&set_time, D_RTC_24_FORMAT);
 800bde6:	2101      	movs	r1, #1
 800bde8:	4807      	ldr	r0, [pc, #28]	; (800be08 <sys_set_time_fsm_action+0x19c>)
 800bdea:	f7f7 fa25 	bl	8003238 <drv_rtc_set_time>

    break;
 800bdee:	e006      	b.n	800bdfe <sys_set_time_fsm_action+0x192>
  case SYS_STATE_FINSH_SET_DATE:
    drv_led_matrix_clear();
 800bdf0:	f7f5 ff26 	bl	8001c40 <drv_led_matrix_clear>
    return SYS_STATE_FINSH_SET_DATE;
 800bdf4:	2311      	movs	r3, #17
 800bdf6:	e003      	b.n	800be00 <sys_set_time_fsm_action+0x194>
    break;
  case SYS_STATE_EXIT:
    return 1;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e001      	b.n	800be00 <sys_set_time_fsm_action+0x194>
  default:

    break;
 800bdfc:	bf00      	nop
  }
  return 0;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	bd80      	pop	{r7, pc}
 800be04:	2000c606 	.word	0x2000c606
 800be08:	2000c608 	.word	0x2000c608

0800be0c <sys_set_time_loop>:

uint32_t sys_set_time_loop(btn_info_t *button_state)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  sys_set_time_init();
 800be14:	f7ff fde6 	bl	800b9e4 <sys_set_time_init>
  while (1)
  {
    drv_btn_check_event(button_state);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7f5 fdb5 	bl	8001988 <drv_btn_check_event>
    sys_set_time_fsm_update(button_state);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff fdec 	bl	800b9fc <sys_set_time_fsm_update>
    check_set_finish = sys_set_time_fsm_action();
 800be24:	f7ff ff22 	bl	800bc6c <sys_set_time_fsm_action>
 800be28:	4603      	mov	r3, r0
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <sys_set_time_loop+0x38>)
 800be2e:	701a      	strb	r2, [r3, #0]
    if (check_set_finish == 1)
 800be30:	4b04      	ldr	r3, [pc, #16]	; (800be44 <sys_set_time_loop+0x38>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d1ef      	bne.n	800be18 <sys_set_time_loop+0xc>
    {
      return 1;
 800be38:	2301      	movs	r3, #1
    }
  }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	2000c607 	.word	0x2000c607

0800be48 <arm_rfft_32_fast_init_f32>:
 800be48:	b150      	cbz	r0, 800be60 <arm_rfft_32_fast_init_f32+0x18>
 800be4a:	b510      	push	{r4, lr}
 800be4c:	2110      	movs	r1, #16
 800be4e:	4604      	mov	r4, r0
 800be50:	f000 fe7c 	bl	800cb4c <arm_cfft_init_f32>
 800be54:	b918      	cbnz	r0, 800be5e <arm_rfft_32_fast_init_f32+0x16>
 800be56:	4b04      	ldr	r3, [pc, #16]	; (800be68 <arm_rfft_32_fast_init_f32+0x20>)
 800be58:	6163      	str	r3, [r4, #20]
 800be5a:	2220      	movs	r2, #32
 800be5c:	8222      	strh	r2, [r4, #16]
 800be5e:	bd10      	pop	{r4, pc}
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	080272fc 	.word	0x080272fc

0800be6c <arm_rfft_64_fast_init_f32>:
 800be6c:	b150      	cbz	r0, 800be84 <arm_rfft_64_fast_init_f32+0x18>
 800be6e:	b510      	push	{r4, lr}
 800be70:	2120      	movs	r1, #32
 800be72:	4604      	mov	r4, r0
 800be74:	f000 fe6a 	bl	800cb4c <arm_cfft_init_f32>
 800be78:	b918      	cbnz	r0, 800be82 <arm_rfft_64_fast_init_f32+0x16>
 800be7a:	4b04      	ldr	r3, [pc, #16]	; (800be8c <arm_rfft_64_fast_init_f32+0x20>)
 800be7c:	6163      	str	r3, [r4, #20]
 800be7e:	2240      	movs	r2, #64	; 0x40
 800be80:	8222      	strh	r2, [r4, #16]
 800be82:	bd10      	pop	{r4, pc}
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	0802bb7c 	.word	0x0802bb7c

0800be90 <arm_rfft_128_fast_init_f32>:
 800be90:	b150      	cbz	r0, 800bea8 <arm_rfft_128_fast_init_f32+0x18>
 800be92:	b510      	push	{r4, lr}
 800be94:	2140      	movs	r1, #64	; 0x40
 800be96:	4604      	mov	r4, r0
 800be98:	f000 fe58 	bl	800cb4c <arm_cfft_init_f32>
 800be9c:	b918      	cbnz	r0, 800bea6 <arm_rfft_128_fast_init_f32+0x16>
 800be9e:	4b04      	ldr	r3, [pc, #16]	; (800beb0 <arm_rfft_128_fast_init_f32+0x20>)
 800bea0:	6163      	str	r3, [r4, #20]
 800bea2:	2280      	movs	r2, #128	; 0x80
 800bea4:	8222      	strh	r2, [r4, #16]
 800bea6:	bd10      	pop	{r4, pc}
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	08024cfc 	.word	0x08024cfc

0800beb4 <arm_rfft_256_fast_init_f32>:
 800beb4:	b158      	cbz	r0, 800bece <arm_rfft_256_fast_init_f32+0x1a>
 800beb6:	b510      	push	{r4, lr}
 800beb8:	2180      	movs	r1, #128	; 0x80
 800beba:	4604      	mov	r4, r0
 800bebc:	f000 fe46 	bl	800cb4c <arm_cfft_init_f32>
 800bec0:	b920      	cbnz	r0, 800becc <arm_rfft_256_fast_init_f32+0x18>
 800bec2:	4b04      	ldr	r3, [pc, #16]	; (800bed4 <arm_rfft_256_fast_init_f32+0x20>)
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800beca:	8222      	strh	r2, [r4, #16]
 800becc:	bd10      	pop	{r4, pc}
 800bece:	f04f 30ff 	mov.w	r0, #4294967295
 800bed2:	4770      	bx	lr
 800bed4:	08026efc 	.word	0x08026efc

0800bed8 <arm_rfft_512_fast_init_f32>:
 800bed8:	b160      	cbz	r0, 800bef4 <arm_rfft_512_fast_init_f32+0x1c>
 800beda:	b510      	push	{r4, lr}
 800bedc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bee0:	4604      	mov	r4, r0
 800bee2:	f000 fe33 	bl	800cb4c <arm_cfft_init_f32>
 800bee6:	b920      	cbnz	r0, 800bef2 <arm_rfft_512_fast_init_f32+0x1a>
 800bee8:	4b04      	ldr	r3, [pc, #16]	; (800befc <arm_rfft_512_fast_init_f32+0x24>)
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef0:	8222      	strh	r2, [r4, #16]
 800bef2:	bd10      	pop	{r4, pc}
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	0802b37c 	.word	0x0802b37c

0800bf00 <arm_rfft_1024_fast_init_f32>:
 800bf00:	b160      	cbz	r0, 800bf1c <arm_rfft_1024_fast_init_f32+0x1c>
 800bf02:	b510      	push	{r4, lr}
 800bf04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf08:	4604      	mov	r4, r0
 800bf0a:	f000 fe1f 	bl	800cb4c <arm_cfft_init_f32>
 800bf0e:	b920      	cbnz	r0, 800bf1a <arm_rfft_1024_fast_init_f32+0x1a>
 800bf10:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <arm_rfft_1024_fast_init_f32+0x24>)
 800bf12:	6163      	str	r3, [r4, #20]
 800bf14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf18:	8222      	strh	r2, [r4, #16]
 800bf1a:	bd10      	pop	{r4, pc}
 800bf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	08023cfc 	.word	0x08023cfc

0800bf28 <arm_rfft_2048_fast_init_f32>:
 800bf28:	b160      	cbz	r0, 800bf44 <arm_rfft_2048_fast_init_f32+0x1c>
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bf30:	4604      	mov	r4, r0
 800bf32:	f000 fe0b 	bl	800cb4c <arm_cfft_init_f32>
 800bf36:	b920      	cbnz	r0, 800bf42 <arm_rfft_2048_fast_init_f32+0x1a>
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <arm_rfft_2048_fast_init_f32+0x24>)
 800bf3a:	6163      	str	r3, [r4, #20]
 800bf3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf40:	8222      	strh	r2, [r4, #16]
 800bf42:	bd10      	pop	{r4, pc}
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	08024efc 	.word	0x08024efc

0800bf50 <arm_rfft_4096_fast_init_f32>:
 800bf50:	b160      	cbz	r0, 800bf6c <arm_rfft_4096_fast_init_f32+0x1c>
 800bf52:	b510      	push	{r4, lr}
 800bf54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bf58:	4604      	mov	r4, r0
 800bf5a:	f000 fdf7 	bl	800cb4c <arm_cfft_init_f32>
 800bf5e:	b920      	cbnz	r0, 800bf6a <arm_rfft_4096_fast_init_f32+0x1a>
 800bf60:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <arm_rfft_4096_fast_init_f32+0x24>)
 800bf62:	6163      	str	r3, [r4, #20]
 800bf64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bf68:	8222      	strh	r2, [r4, #16]
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	0802737c 	.word	0x0802737c

0800bf78 <arm_rfft_fast_init_f32>:
 800bf78:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bf7c:	d024      	beq.n	800bfc8 <arm_rfft_fast_init_f32+0x50>
 800bf7e:	d807      	bhi.n	800bf90 <arm_rfft_fast_init_f32+0x18>
 800bf80:	2980      	cmp	r1, #128	; 0x80
 800bf82:	d01c      	beq.n	800bfbe <arm_rfft_fast_init_f32+0x46>
 800bf84:	d90c      	bls.n	800bfa0 <arm_rfft_fast_init_f32+0x28>
 800bf86:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bf8a:	d11a      	bne.n	800bfc2 <arm_rfft_fast_init_f32+0x4a>
 800bf8c:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <arm_rfft_fast_init_f32+0x54>)
 800bf8e:	4718      	bx	r3
 800bf90:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bf94:	d011      	beq.n	800bfba <arm_rfft_fast_init_f32+0x42>
 800bf96:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bf9a:	d107      	bne.n	800bfac <arm_rfft_fast_init_f32+0x34>
 800bf9c:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <arm_rfft_fast_init_f32+0x58>)
 800bf9e:	4718      	bx	r3
 800bfa0:	2920      	cmp	r1, #32
 800bfa2:	d008      	beq.n	800bfb6 <arm_rfft_fast_init_f32+0x3e>
 800bfa4:	2940      	cmp	r1, #64	; 0x40
 800bfa6:	d10c      	bne.n	800bfc2 <arm_rfft_fast_init_f32+0x4a>
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <arm_rfft_fast_init_f32+0x5c>)
 800bfaa:	e7f0      	b.n	800bf8e <arm_rfft_fast_init_f32+0x16>
 800bfac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bfb0:	d107      	bne.n	800bfc2 <arm_rfft_fast_init_f32+0x4a>
 800bfb2:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <arm_rfft_fast_init_f32+0x60>)
 800bfb4:	e7eb      	b.n	800bf8e <arm_rfft_fast_init_f32+0x16>
 800bfb6:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <arm_rfft_fast_init_f32+0x64>)
 800bfb8:	e7e9      	b.n	800bf8e <arm_rfft_fast_init_f32+0x16>
 800bfba:	4b09      	ldr	r3, [pc, #36]	; (800bfe0 <arm_rfft_fast_init_f32+0x68>)
 800bfbc:	e7e7      	b.n	800bf8e <arm_rfft_fast_init_f32+0x16>
 800bfbe:	4b09      	ldr	r3, [pc, #36]	; (800bfe4 <arm_rfft_fast_init_f32+0x6c>)
 800bfc0:	e7e5      	b.n	800bf8e <arm_rfft_fast_init_f32+0x16>
 800bfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc6:	4770      	bx	lr
 800bfc8:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <arm_rfft_fast_init_f32+0x70>)
 800bfca:	e7e0      	b.n	800bf8e <arm_rfft_fast_init_f32+0x16>
 800bfcc:	0800beb5 	.word	0x0800beb5
 800bfd0:	0800bf51 	.word	0x0800bf51
 800bfd4:	0800be6d 	.word	0x0800be6d
 800bfd8:	0800bf01 	.word	0x0800bf01
 800bfdc:	0800be49 	.word	0x0800be49
 800bfe0:	0800bf29 	.word	0x0800bf29
 800bfe4:	0800be91 	.word	0x0800be91
 800bfe8:	0800bed9 	.word	0x0800bed9

0800bfec <stage_rfft_f32>:
 800bfec:	b410      	push	{r4}
 800bfee:	edd1 7a00 	vldr	s15, [r1]
 800bff2:	ed91 7a01 	vldr	s14, [r1, #4]
 800bff6:	8804      	ldrh	r4, [r0, #0]
 800bff8:	6940      	ldr	r0, [r0, #20]
 800bffa:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c002:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c006:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c00a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c00e:	3c01      	subs	r4, #1
 800c010:	ee26 7a84 	vmul.f32	s14, s13, s8
 800c014:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c018:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800c01c:	ed82 7a00 	vstr	s14, [r2]
 800c020:	edc2 7a01 	vstr	s15, [r2, #4]
 800c024:	3010      	adds	r0, #16
 800c026:	3210      	adds	r2, #16
 800c028:	3b08      	subs	r3, #8
 800c02a:	3110      	adds	r1, #16
 800c02c:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c030:	ed93 7a02 	vldr	s14, [r3, #8]
 800c034:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c038:	edd3 4a03 	vldr	s9, [r3, #12]
 800c03c:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c040:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c044:	ee77 5a45 	vsub.f32	s11, s14, s10
 800c048:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c04c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c050:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c054:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c058:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c05c:	ee37 7a23 	vadd.f32	s14, s14, s7
 800c060:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c064:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c068:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c06c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c070:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c074:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c078:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c07c:	3c01      	subs	r4, #1
 800c07e:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c082:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c086:	f1a3 0308 	sub.w	r3, r3, #8
 800c08a:	f101 0108 	add.w	r1, r1, #8
 800c08e:	f100 0008 	add.w	r0, r0, #8
 800c092:	f102 0208 	add.w	r2, r2, #8
 800c096:	d1c9      	bne.n	800c02c <stage_rfft_f32+0x40>
 800c098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop

0800c0a0 <merge_rfft_f32>:
 800c0a0:	b410      	push	{r4}
 800c0a2:	edd1 7a00 	vldr	s15, [r1]
 800c0a6:	edd1 6a01 	vldr	s13, [r1, #4]
 800c0aa:	8804      	ldrh	r4, [r0, #0]
 800c0ac:	6940      	ldr	r0, [r0, #20]
 800c0ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c0b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c0b6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c0ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c0be:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c0c2:	3c01      	subs	r4, #1
 800c0c4:	ed82 7a00 	vstr	s14, [r2]
 800c0c8:	edc2 7a01 	vstr	s15, [r2, #4]
 800c0cc:	b3dc      	cbz	r4, 800c146 <merge_rfft_f32+0xa6>
 800c0ce:	00e3      	lsls	r3, r4, #3
 800c0d0:	3b08      	subs	r3, #8
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3010      	adds	r0, #16
 800c0d6:	3210      	adds	r2, #16
 800c0d8:	3110      	adds	r1, #16
 800c0da:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c0de:	ed93 7a02 	vldr	s14, [r3, #8]
 800c0e2:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c0e6:	edd3 4a03 	vldr	s9, [r3, #12]
 800c0ea:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c0ee:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c0f2:	ee75 5a47 	vsub.f32	s11, s10, s14
 800c0f6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c0fa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c0fe:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c102:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c106:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c10a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c10e:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c112:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c116:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c11a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c11e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c122:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c126:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c12a:	3c01      	subs	r4, #1
 800c12c:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c130:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c134:	f1a3 0308 	sub.w	r3, r3, #8
 800c138:	f101 0108 	add.w	r1, r1, #8
 800c13c:	f100 0008 	add.w	r0, r0, #8
 800c140:	f102 0208 	add.w	r2, r2, #8
 800c144:	d1c9      	bne.n	800c0da <merge_rfft_f32+0x3a>
 800c146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <arm_rfft_fast_f32>:
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	461c      	mov	r4, r3
 800c152:	4605      	mov	r5, r0
 800c154:	4616      	mov	r6, r2
 800c156:	b14b      	cbz	r3, 800c16c <arm_rfft_fast_f32+0x20>
 800c158:	f7ff ffa2 	bl	800c0a0 <merge_rfft_f32>
 800c15c:	4622      	mov	r2, r4
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	2301      	movs	r3, #1
 800c164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c168:	f000 bb34 	b.w	800c7d4 <arm_cfft_f32>
 800c16c:	460f      	mov	r7, r1
 800c16e:	461a      	mov	r2, r3
 800c170:	2301      	movs	r3, #1
 800c172:	f000 fb2f 	bl	800c7d4 <arm_cfft_f32>
 800c176:	4632      	mov	r2, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	4628      	mov	r0, r5
 800c17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	f7ff bf34 	b.w	800bfec <stage_rfft_f32>

0800c184 <arm_cfft_radix8by2_f32>:
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c188:	ed2d 8b08 	vpush	{d8-d11}
 800c18c:	f8b0 c000 	ldrh.w	ip, [r0]
 800c190:	6842      	ldr	r2, [r0, #4]
 800c192:	4607      	mov	r7, r0
 800c194:	4608      	mov	r0, r1
 800c196:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c19a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c19e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	f000 80b0 	beq.w	800c308 <arm_cfft_radix8by2_f32+0x184>
 800c1a8:	008c      	lsls	r4, r1, #2
 800c1aa:	3410      	adds	r4, #16
 800c1ac:	f100 0310 	add.w	r3, r0, #16
 800c1b0:	1906      	adds	r6, r0, r4
 800c1b2:	3210      	adds	r2, #16
 800c1b4:	4444      	add	r4, r8
 800c1b6:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c1ba:	f108 0510 	add.w	r5, r8, #16
 800c1be:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c1c2:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c1c6:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c1ca:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c1ce:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c1d2:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c1d6:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c1da:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c1de:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c1e2:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c1e6:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c1ea:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c1ee:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c1f2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c1f6:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c1fa:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c1fe:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c202:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c206:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c20a:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c20e:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c212:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c216:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c21a:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c21e:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c222:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c226:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c22a:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c22e:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c232:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c236:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c23a:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c23e:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c242:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c246:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c24a:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c24e:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c252:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c256:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c25a:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c25e:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c262:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c266:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c26a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c26e:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c272:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c276:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c27a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c27e:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c282:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c286:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c28a:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c28e:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c292:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c296:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c29a:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c29e:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c2a2:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c2a6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c2aa:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c2ae:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c2b2:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c2b6:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c2ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c2be:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c2c2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c2c6:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c2ca:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c2ce:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c2d2:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c2d6:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c2da:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c2de:	3310      	adds	r3, #16
 800c2e0:	4563      	cmp	r3, ip
 800c2e2:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c2e6:	f106 0610 	add.w	r6, r6, #16
 800c2ea:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c2ee:	f102 0210 	add.w	r2, r2, #16
 800c2f2:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c2f6:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c2fa:	f105 0510 	add.w	r5, r5, #16
 800c2fe:	f104 0410 	add.w	r4, r4, #16
 800c302:	f47f af5c 	bne.w	800c1be <arm_cfft_radix8by2_f32+0x3a>
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	b289      	uxth	r1, r1
 800c30a:	2302      	movs	r3, #2
 800c30c:	9101      	str	r1, [sp, #4]
 800c30e:	f000 fc6f 	bl	800cbf0 <arm_radix8_butterfly_f32>
 800c312:	9901      	ldr	r1, [sp, #4]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	4640      	mov	r0, r8
 800c318:	2302      	movs	r3, #2
 800c31a:	b002      	add	sp, #8
 800c31c:	ecbd 8b08 	vpop	{d8-d11}
 800c320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c324:	f000 bc64 	b.w	800cbf0 <arm_radix8_butterfly_f32>

0800c328 <arm_cfft_radix8by4_f32>:
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	ed2d 8b0a 	vpush	{d8-d12}
 800c330:	8803      	ldrh	r3, [r0, #0]
 800c332:	6842      	ldr	r2, [r0, #4]
 800c334:	b08d      	sub	sp, #52	; 0x34
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	900a      	str	r0, [sp, #40]	; 0x28
 800c33a:	4608      	mov	r0, r1
 800c33c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c340:	edd1 5a00 	vldr	s11, [r1]
 800c344:	edd0 7a00 	vldr	s15, [r0]
 800c348:	edd1 3a01 	vldr	s7, [r1, #4]
 800c34c:	ed90 5a01 	vldr	s10, [r0, #4]
 800c350:	9108      	str	r1, [sp, #32]
 800c352:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800c356:	ed96 7a00 	vldr	s14, [r6]
 800c35a:	ed96 4a01 	vldr	s8, [r6, #4]
 800c35e:	9607      	str	r6, [sp, #28]
 800c360:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c364:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800c368:	edd8 4a00 	vldr	s9, [r8]
 800c36c:	ed98 3a01 	vldr	s6, [r8, #4]
 800c370:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c374:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c378:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c37c:	4604      	mov	r4, r0
 800c37e:	edc0 6a00 	vstr	s13, [r0]
 800c382:	edd6 5a01 	vldr	s11, [r6, #4]
 800c386:	edd8 2a01 	vldr	s5, [r8, #4]
 800c38a:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c38e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c392:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c396:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c39a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c39e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c3a2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c3a6:	3408      	adds	r4, #8
 800c3a8:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c3b2:	4637      	mov	r7, r6
 800c3b4:	9402      	str	r4, [sp, #8]
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	3508      	adds	r5, #8
 800c3bc:	0859      	lsrs	r1, r3, #1
 800c3be:	9109      	str	r1, [sp, #36]	; 0x24
 800c3c0:	9706      	str	r7, [sp, #24]
 800c3c2:	9505      	str	r5, [sp, #20]
 800c3c4:	f102 0708 	add.w	r7, r2, #8
 800c3c8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c3cc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c3d0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c3d4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c3d8:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c3dc:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c3e0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c3e4:	3902      	subs	r1, #2
 800c3e6:	4645      	mov	r5, r8
 800c3e8:	9701      	str	r7, [sp, #4]
 800c3ea:	f102 0c18 	add.w	ip, r2, #24
 800c3ee:	f102 0710 	add.w	r7, r2, #16
 800c3f2:	3508      	adds	r5, #8
 800c3f4:	0849      	lsrs	r1, r1, #1
 800c3f6:	edc0 5a01 	vstr	s11, [r0, #4]
 800c3fa:	9703      	str	r7, [sp, #12]
 800c3fc:	edc6 3a00 	vstr	s7, [r6]
 800c400:	ed86 5a01 	vstr	s10, [r6, #4]
 800c404:	f8cd c000 	str.w	ip, [sp]
 800c408:	ed84 6a00 	vstr	s12, [r4]
 800c40c:	edc4 6a01 	vstr	s13, [r4, #4]
 800c410:	9504      	str	r5, [sp, #16]
 800c412:	edc8 7a00 	vstr	s15, [r8]
 800c416:	ed88 7a01 	vstr	s14, [r8, #4]
 800c41a:	910b      	str	r1, [sp, #44]	; 0x2c
 800c41c:	f000 8138 	beq.w	800c690 <arm_cfft_radix8by4_f32+0x368>
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	3b0c      	subs	r3, #12
 800c424:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c428:	f106 0510 	add.w	r5, r6, #16
 800c42c:	4626      	mov	r6, r4
 800c42e:	46bb      	mov	fp, r7
 800c430:	f102 0a20 	add.w	sl, r2, #32
 800c434:	f102 0930 	add.w	r9, r2, #48	; 0x30
 800c438:	f106 0710 	add.w	r7, r6, #16
 800c43c:	4443      	add	r3, r8
 800c43e:	f100 0e10 	add.w	lr, r0, #16
 800c442:	3c0c      	subs	r4, #12
 800c444:	f1a8 060c 	sub.w	r6, r8, #12
 800c448:	f108 0210 	add.w	r2, r8, #16
 800c44c:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800c450:	ed57 5a02 	vldr	s11, [r7, #-8]
 800c454:	ed55 7a02 	vldr	s15, [r5, #-8]
 800c458:	ed52 1a02 	vldr	s3, [r2, #-8]
 800c45c:	ed57 6a01 	vldr	s13, [r7, #-4]
 800c460:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800c464:	ed12 1a01 	vldr	s2, [r2, #-4]
 800c468:	ed15 8a01 	vldr	s16, [r5, #-4]
 800c46c:	ee35 4a25 	vadd.f32	s8, s10, s11
 800c470:	ee30 6a26 	vadd.f32	s12, s0, s13
 800c474:	ee37 7a84 	vadd.f32	s14, s15, s8
 800c478:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c47c:	ee37 7a21 	vadd.f32	s14, s14, s3
 800c480:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c484:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800c488:	ed15 7a01 	vldr	s14, [r5, #-4]
 800c48c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c490:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c494:	ee78 aa25 	vadd.f32	s21, s16, s11
 800c498:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c49c:	ee70 3a67 	vsub.f32	s7, s0, s15
 800c4a0:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800c4a4:	ed96 7a02 	vldr	s14, [r6, #8]
 800c4a8:	ed9c 2a02 	vldr	s4, [ip, #8]
 800c4ac:	ed94 ba02 	vldr	s22, [r4, #8]
 800c4b0:	edd3 9a02 	vldr	s19, [r3, #8]
 800c4b4:	edd6 2a01 	vldr	s5, [r6, #4]
 800c4b8:	ed9c 9a01 	vldr	s18, [ip, #4]
 800c4bc:	ed93 5a01 	vldr	s10, [r3, #4]
 800c4c0:	edd4 0a01 	vldr	s1, [r4, #4]
 800c4c4:	ee72 6a07 	vadd.f32	s13, s4, s14
 800c4c8:	ee32 2a47 	vsub.f32	s4, s4, s14
 800c4cc:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800c4d0:	ee79 4a22 	vadd.f32	s9, s18, s5
 800c4d4:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800c4d8:	ee79 2a62 	vsub.f32	s5, s18, s5
 800c4dc:	ed8c 7a02 	vstr	s14, [ip, #8]
 800c4e0:	ed94 7a01 	vldr	s14, [r4, #4]
 800c4e4:	edd3 8a01 	vldr	s17, [r3, #4]
 800c4e8:	ee34 7a87 	vadd.f32	s14, s9, s14
 800c4ec:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800c4f0:	ee37 7a28 	vadd.f32	s14, s14, s17
 800c4f4:	ee32 9a60 	vsub.f32	s18, s4, s1
 800c4f8:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c4fc:	ed1b 7a01 	vldr	s14, [fp, #-4]
 800c500:	ed1b aa02 	vldr	s20, [fp, #-8]
 800c504:	ee73 8a22 	vadd.f32	s17, s6, s5
 800c508:	ee39 9a05 	vadd.f32	s18, s18, s10
 800c50c:	ee7a aac1 	vsub.f32	s21, s21, s2
 800c510:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c514:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800c518:	ee69 ba07 	vmul.f32	s23, s18, s14
 800c51c:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c520:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c524:	ee63 ca87 	vmul.f32	s25, s7, s14
 800c528:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800c52c:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800c530:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c534:	ee73 3aea 	vsub.f32	s7, s7, s21
 800c538:	ee78 8a89 	vadd.f32	s17, s17, s18
 800c53c:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800c540:	ee3b aaca 	vsub.f32	s20, s23, s20
 800c544:	ee34 4a67 	vsub.f32	s8, s8, s15
 800c548:	ee76 6acb 	vsub.f32	s13, s13, s22
 800c54c:	ee36 6a48 	vsub.f32	s12, s12, s16
 800c550:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800c554:	ed05 7a02 	vstr	s14, [r5, #-8]
 800c558:	ed45 3a01 	vstr	s7, [r5, #-4]
 800c55c:	edc4 8a01 	vstr	s17, [r4, #4]
 800c560:	ed84 aa02 	vstr	s20, [r4, #8]
 800c564:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800c568:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800c56c:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800c570:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800c574:	ee34 4a61 	vsub.f32	s8, s8, s3
 800c578:	ee36 6a41 	vsub.f32	s12, s12, s2
 800c57c:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800c580:	ee66 9a26 	vmul.f32	s19, s12, s13
 800c584:	ee24 9a23 	vmul.f32	s18, s8, s7
 800c588:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c58c:	ee24 4a26 	vmul.f32	s8, s8, s13
 800c590:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c594:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c598:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800c59c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c5a0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c5a4:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800c5a8:	ee79 3a29 	vadd.f32	s7, s18, s19
 800c5ac:	ee75 6a60 	vsub.f32	s13, s10, s1
 800c5b0:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800c5b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c5b8:	ed47 3a02 	vstr	s7, [r7, #-8]
 800c5bc:	ed07 6a01 	vstr	s12, [r7, #-4]
 800c5c0:	ed86 7a01 	vstr	s14, [r6, #4]
 800c5c4:	ed86 4a02 	vstr	s8, [r6, #8]
 800c5c8:	ee35 6a81 	vadd.f32	s12, s11, s2
 800c5cc:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800c5d0:	ed59 5a06 	vldr	s11, [r9, #-24]	; 0xffffffe8
 800c5d4:	ed59 6a05 	vldr	s13, [r9, #-20]	; 0xffffffec
 800c5d8:	ee33 3a62 	vsub.f32	s6, s6, s5
 800c5dc:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800c5e0:	ee67 2a26 	vmul.f32	s5, s14, s13
 800c5e4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c5e8:	ee26 5a25 	vmul.f32	s10, s12, s11
 800c5ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c5f0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c5f4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c5f8:	ee63 6a26 	vmul.f32	s13, s6, s13
 800c5fc:	ee23 3a25 	vmul.f32	s6, s6, s11
 800c600:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c604:	ee75 5a24 	vadd.f32	s11, s10, s9
 800c608:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800c60c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c610:	3901      	subs	r1, #1
 800c612:	ed42 5a02 	vstr	s11, [r2, #-8]
 800c616:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c61a:	f10e 0e08 	add.w	lr, lr, #8
 800c61e:	ed83 3a02 	vstr	s6, [r3, #8]
 800c622:	ed83 7a01 	vstr	s14, [r3, #4]
 800c626:	f1ac 0c08 	sub.w	ip, ip, #8
 800c62a:	f10b 0b08 	add.w	fp, fp, #8
 800c62e:	f105 0508 	add.w	r5, r5, #8
 800c632:	f1a4 0408 	sub.w	r4, r4, #8
 800c636:	f10a 0a10 	add.w	sl, sl, #16
 800c63a:	f107 0708 	add.w	r7, r7, #8
 800c63e:	f1a6 0608 	sub.w	r6, r6, #8
 800c642:	f109 0918 	add.w	r9, r9, #24
 800c646:	f102 0208 	add.w	r2, r2, #8
 800c64a:	f1a3 0308 	sub.w	r3, r3, #8
 800c64e:	f47f aefd 	bne.w	800c44c <arm_cfft_radix8by4_f32+0x124>
 800c652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c654:	9902      	ldr	r1, [sp, #8]
 800c656:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c65a:	9102      	str	r1, [sp, #8]
 800c65c:	9901      	ldr	r1, [sp, #4]
 800c65e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c662:	9101      	str	r1, [sp, #4]
 800c664:	9906      	ldr	r1, [sp, #24]
 800c666:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c66a:	9106      	str	r1, [sp, #24]
 800c66c:	9903      	ldr	r1, [sp, #12]
 800c66e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800c672:	9103      	str	r1, [sp, #12]
 800c674:	9905      	ldr	r1, [sp, #20]
 800c676:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c67a:	9105      	str	r1, [sp, #20]
 800c67c:	9904      	ldr	r1, [sp, #16]
 800c67e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c682:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c686:	9204      	str	r2, [sp, #16]
 800c688:	9a00      	ldr	r2, [sp, #0]
 800c68a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	9902      	ldr	r1, [sp, #8]
 800c692:	9d05      	ldr	r5, [sp, #20]
 800c694:	ed91 4a00 	vldr	s8, [r1]
 800c698:	edd5 6a00 	vldr	s13, [r5]
 800c69c:	9b06      	ldr	r3, [sp, #24]
 800c69e:	9c04      	ldr	r4, [sp, #16]
 800c6a0:	edd3 7a00 	vldr	s15, [r3]
 800c6a4:	ed94 3a00 	vldr	s6, [r4]
 800c6a8:	edd5 4a01 	vldr	s9, [r5, #4]
 800c6ac:	edd1 3a01 	vldr	s7, [r1, #4]
 800c6b0:	ed94 2a01 	vldr	s4, [r4, #4]
 800c6b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c6b8:	9a01      	ldr	r2, [sp, #4]
 800c6ba:	ee34 6a26 	vadd.f32	s12, s8, s13
 800c6be:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800c6c2:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c6c6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c6ca:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c6ce:	ee74 6a66 	vsub.f32	s13, s8, s13
 800c6d2:	ed81 5a00 	vstr	s10, [r1]
 800c6d6:	ed93 5a01 	vldr	s10, [r3, #4]
 800c6da:	edd4 4a01 	vldr	s9, [r4, #4]
 800c6de:	ee35 5a85 	vadd.f32	s10, s11, s10
 800c6e2:	ee37 4a26 	vadd.f32	s8, s14, s13
 800c6e6:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c6ea:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800c6ee:	ed81 5a01 	vstr	s10, [r1, #4]
 800c6f2:	edd2 1a00 	vldr	s3, [r2]
 800c6f6:	edd2 2a01 	vldr	s5, [r2, #4]
 800c6fa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800c6fe:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c702:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c706:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c70a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800c70e:	ee24 4a22 	vmul.f32	s8, s8, s5
 800c712:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c716:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c71a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c71e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c722:	edc3 2a00 	vstr	s5, [r3]
 800c726:	ed83 5a01 	vstr	s10, [r3, #4]
 800c72a:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c734:	ed93 4a01 	vldr	s8, [r3, #4]
 800c738:	ed93 5a00 	vldr	s10, [r3]
 800c73c:	9b00      	ldr	r3, [sp, #0]
 800c73e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c742:	ee66 4a05 	vmul.f32	s9, s12, s10
 800c746:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c74a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c74e:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c752:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c756:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800c75a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c75e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c762:	ed85 6a01 	vstr	s12, [r5, #4]
 800c766:	edc5 5a00 	vstr	s11, [r5]
 800c76a:	edd3 5a01 	vldr	s11, [r3, #4]
 800c76e:	edd3 6a00 	vldr	s13, [r3]
 800c772:	ee37 7a02 	vadd.f32	s14, s14, s4
 800c776:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800c77a:	ee27 6a26 	vmul.f32	s12, s14, s13
 800c77e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c782:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c786:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c78a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c78e:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c792:	ed84 7a01 	vstr	s14, [r4, #4]
 800c796:	edc4 7a00 	vstr	s15, [r4]
 800c79a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c79c:	9100      	str	r1, [sp, #0]
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	f000 fa25 	bl	800cbf0 <arm_radix8_butterfly_f32>
 800c7a6:	9807      	ldr	r0, [sp, #28]
 800c7a8:	9900      	ldr	r1, [sp, #0]
 800c7aa:	6862      	ldr	r2, [r4, #4]
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	f000 fa1f 	bl	800cbf0 <arm_radix8_butterfly_f32>
 800c7b2:	9808      	ldr	r0, [sp, #32]
 800c7b4:	9900      	ldr	r1, [sp, #0]
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	2304      	movs	r3, #4
 800c7ba:	f000 fa19 	bl	800cbf0 <arm_radix8_butterfly_f32>
 800c7be:	9900      	ldr	r1, [sp, #0]
 800c7c0:	6862      	ldr	r2, [r4, #4]
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	2304      	movs	r3, #4
 800c7c6:	b00d      	add	sp, #52	; 0x34
 800c7c8:	ecbd 8b0a 	vpop	{d8-d12}
 800c7cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	f000 ba0e 	b.w	800cbf0 <arm_radix8_butterfly_f32>

0800c7d4 <arm_cfft_f32>:
 800c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d8:	2a01      	cmp	r2, #1
 800c7da:	8805      	ldrh	r5, [r0, #0]
 800c7dc:	4607      	mov	r7, r0
 800c7de:	4690      	mov	r8, r2
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	4699      	mov	r9, r3
 800c7e4:	d05c      	beq.n	800c8a0 <arm_cfft_f32+0xcc>
 800c7e6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c7ea:	d054      	beq.n	800c896 <arm_cfft_f32+0xc2>
 800c7ec:	d810      	bhi.n	800c810 <arm_cfft_f32+0x3c>
 800c7ee:	2d40      	cmp	r5, #64	; 0x40
 800c7f0:	d015      	beq.n	800c81e <arm_cfft_f32+0x4a>
 800c7f2:	d94c      	bls.n	800c88e <arm_cfft_f32+0xba>
 800c7f4:	2d80      	cmp	r5, #128	; 0x80
 800c7f6:	d103      	bne.n	800c800 <arm_cfft_f32+0x2c>
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f7ff fcc2 	bl	800c184 <arm_cfft_radix8by2_f32>
 800c800:	f1b9 0f00 	cmp.w	r9, #0
 800c804:	d114      	bne.n	800c830 <arm_cfft_f32+0x5c>
 800c806:	f1b8 0f01 	cmp.w	r8, #1
 800c80a:	d019      	beq.n	800c840 <arm_cfft_f32+0x6c>
 800c80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c810:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c814:	d03f      	beq.n	800c896 <arm_cfft_f32+0xc2>
 800c816:	d933      	bls.n	800c880 <arm_cfft_f32+0xac>
 800c818:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c81c:	d1f0      	bne.n	800c800 <arm_cfft_f32+0x2c>
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	2301      	movs	r3, #1
 800c822:	4629      	mov	r1, r5
 800c824:	4620      	mov	r0, r4
 800c826:	f000 f9e3 	bl	800cbf0 <arm_radix8_butterfly_f32>
 800c82a:	f1b9 0f00 	cmp.w	r9, #0
 800c82e:	d0ea      	beq.n	800c806 <arm_cfft_f32+0x32>
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	89b9      	ldrh	r1, [r7, #12]
 800c834:	4620      	mov	r0, r4
 800c836:	f000 f845 	bl	800c8c4 <arm_bitreversal_32>
 800c83a:	f1b8 0f01 	cmp.w	r8, #1
 800c83e:	d1e5      	bne.n	800c80c <arm_cfft_f32+0x38>
 800c840:	ee07 5a90 	vmov	s15, r5
 800c844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c84c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c850:	2d00      	cmp	r5, #0
 800c852:	d0db      	beq.n	800c80c <arm_cfft_f32+0x38>
 800c854:	f104 0108 	add.w	r1, r4, #8
 800c858:	2300      	movs	r3, #0
 800c85a:	3301      	adds	r3, #1
 800c85c:	429d      	cmp	r5, r3
 800c85e:	f101 0108 	add.w	r1, r1, #8
 800c862:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c866:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c86a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c86e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c872:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c876:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c87a:	d1ee      	bne.n	800c85a <arm_cfft_f32+0x86>
 800c87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c880:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c884:	d0cb      	beq.n	800c81e <arm_cfft_f32+0x4a>
 800c886:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c88a:	d0b5      	beq.n	800c7f8 <arm_cfft_f32+0x24>
 800c88c:	e7b8      	b.n	800c800 <arm_cfft_f32+0x2c>
 800c88e:	2d10      	cmp	r5, #16
 800c890:	d0b2      	beq.n	800c7f8 <arm_cfft_f32+0x24>
 800c892:	2d20      	cmp	r5, #32
 800c894:	d1b4      	bne.n	800c800 <arm_cfft_f32+0x2c>
 800c896:	4621      	mov	r1, r4
 800c898:	4638      	mov	r0, r7
 800c89a:	f7ff fd45 	bl	800c328 <arm_cfft_radix8by4_f32>
 800c89e:	e7af      	b.n	800c800 <arm_cfft_f32+0x2c>
 800c8a0:	b16d      	cbz	r5, 800c8be <arm_cfft_f32+0xea>
 800c8a2:	310c      	adds	r1, #12
 800c8a4:	2600      	movs	r6, #0
 800c8a6:	ed51 7a02 	vldr	s15, [r1, #-8]
 800c8aa:	3601      	adds	r6, #1
 800c8ac:	eef1 7a67 	vneg.f32	s15, s15
 800c8b0:	42b5      	cmp	r5, r6
 800c8b2:	ed41 7a02 	vstr	s15, [r1, #-8]
 800c8b6:	f101 0108 	add.w	r1, r1, #8
 800c8ba:	d1f4      	bne.n	800c8a6 <arm_cfft_f32+0xd2>
 800c8bc:	e793      	b.n	800c7e6 <arm_cfft_f32+0x12>
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d0a4      	beq.n	800c80c <arm_cfft_f32+0x38>
 800c8c2:	e7b5      	b.n	800c830 <arm_cfft_f32+0x5c>

0800c8c4 <arm_bitreversal_32>:
 800c8c4:	b1e9      	cbz	r1, 800c902 <arm_bitreversal_32+0x3e>
 800c8c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c8:	2500      	movs	r5, #0
 800c8ca:	f102 0e02 	add.w	lr, r2, #2
 800c8ce:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c8d2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c8d6:	08a4      	lsrs	r4, r4, #2
 800c8d8:	089b      	lsrs	r3, r3, #2
 800c8da:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c8de:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c8e2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c8e6:	00a6      	lsls	r6, r4, #2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	1d34      	adds	r4, r6, #4
 800c8f2:	3502      	adds	r5, #2
 800c8f4:	58c6      	ldr	r6, [r0, r3]
 800c8f6:	5907      	ldr	r7, [r0, r4]
 800c8f8:	50c7      	str	r7, [r0, r3]
 800c8fa:	428d      	cmp	r5, r1
 800c8fc:	5106      	str	r6, [r0, r4]
 800c8fe:	d3e6      	bcc.n	800c8ce <arm_bitreversal_32+0xa>
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c902:	4770      	bx	lr

0800c904 <arm_cmplx_mag_f32>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	ed2d 8b02 	vpush	{d8}
 800c90c:	0897      	lsrs	r7, r2, #2
 800c90e:	b084      	sub	sp, #16
 800c910:	d077      	beq.n	800ca02 <arm_cmplx_mag_f32+0xfe>
 800c912:	f04f 0800 	mov.w	r8, #0
 800c916:	f100 0420 	add.w	r4, r0, #32
 800c91a:	f101 0510 	add.w	r5, r1, #16
 800c91e:	463e      	mov	r6, r7
 800c920:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800c924:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800c928:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c92c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c930:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c934:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93c:	f2c0 80c5 	blt.w	800caca <arm_cmplx_mag_f32+0x1c6>
 800c940:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c948:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c94c:	f100 80cb 	bmi.w	800cae6 <arm_cmplx_mag_f32+0x1e2>
 800c950:	ed05 8a04 	vstr	s16, [r5, #-16]
 800c954:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800c958:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800c95c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c964:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c968:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c970:	f2c0 80a8 	blt.w	800cac4 <arm_cmplx_mag_f32+0x1c0>
 800c974:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c980:	f100 80a8 	bmi.w	800cad4 <arm_cmplx_mag_f32+0x1d0>
 800c984:	ed05 8a03 	vstr	s16, [r5, #-12]
 800c988:	ed14 0a04 	vldr	s0, [r4, #-16]
 800c98c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800c990:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c994:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c998:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c99c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a4:	f2c0 808b 	blt.w	800cabe <arm_cmplx_mag_f32+0x1ba>
 800c9a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c9b4:	f100 80a9 	bmi.w	800cb0a <arm_cmplx_mag_f32+0x206>
 800c9b8:	ed05 8a02 	vstr	s16, [r5, #-8]
 800c9bc:	ed14 0a02 	vldr	s0, [r4, #-8]
 800c9c0:	ed54 7a01 	vldr	s15, [r4, #-4]
 800c9c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c9cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d8:	db6e      	blt.n	800cab8 <arm_cmplx_mag_f32+0x1b4>
 800c9da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c9e6:	f100 8087 	bmi.w	800caf8 <arm_cmplx_mag_f32+0x1f4>
 800c9ea:	ed05 8a01 	vstr	s16, [r5, #-4]
 800c9ee:	3e01      	subs	r6, #1
 800c9f0:	f104 0420 	add.w	r4, r4, #32
 800c9f4:	f105 0510 	add.w	r5, r5, #16
 800c9f8:	d192      	bne.n	800c920 <arm_cmplx_mag_f32+0x1c>
 800c9fa:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800c9fe:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ca02:	f012 0203 	ands.w	r2, r2, #3
 800ca06:	d052      	beq.n	800caae <arm_cmplx_mag_f32+0x1aa>
 800ca08:	ed90 0a00 	vldr	s0, [r0]
 800ca0c:	edd0 7a01 	vldr	s15, [r0, #4]
 800ca10:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca18:	2300      	movs	r3, #0
 800ca1a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ca1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca26:	bfb8      	it	lt
 800ca28:	600b      	strlt	r3, [r1, #0]
 800ca2a:	db08      	blt.n	800ca3e <arm_cmplx_mag_f32+0x13a>
 800ca2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca34:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca38:	d479      	bmi.n	800cb2e <arm_cmplx_mag_f32+0x22a>
 800ca3a:	ed81 8a00 	vstr	s16, [r1]
 800ca3e:	3a01      	subs	r2, #1
 800ca40:	d035      	beq.n	800caae <arm_cmplx_mag_f32+0x1aa>
 800ca42:	ed90 0a02 	vldr	s0, [r0, #8]
 800ca46:	edd0 7a03 	vldr	s15, [r0, #12]
 800ca4a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca52:	2300      	movs	r3, #0
 800ca54:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ca58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca60:	bfb8      	it	lt
 800ca62:	604b      	strlt	r3, [r1, #4]
 800ca64:	db08      	blt.n	800ca78 <arm_cmplx_mag_f32+0x174>
 800ca66:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca72:	d453      	bmi.n	800cb1c <arm_cmplx_mag_f32+0x218>
 800ca74:	ed81 8a01 	vstr	s16, [r1, #4]
 800ca78:	2a01      	cmp	r2, #1
 800ca7a:	d018      	beq.n	800caae <arm_cmplx_mag_f32+0x1aa>
 800ca7c:	ed90 0a04 	vldr	s0, [r0, #16]
 800ca80:	edd0 7a05 	vldr	s15, [r0, #20]
 800ca84:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	db19      	blt.n	800cad0 <arm_cmplx_mag_f32+0x1cc>
 800ca9c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800caa8:	d44a      	bmi.n	800cb40 <arm_cmplx_mag_f32+0x23c>
 800caaa:	ed81 8a02 	vstr	s16, [r1, #8]
 800caae:	b004      	add	sp, #16
 800cab0:	ecbd 8b02 	vpop	{d8}
 800cab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab8:	f845 8c04 	str.w	r8, [r5, #-4]
 800cabc:	e797      	b.n	800c9ee <arm_cmplx_mag_f32+0xea>
 800cabe:	f845 8c08 	str.w	r8, [r5, #-8]
 800cac2:	e77b      	b.n	800c9bc <arm_cmplx_mag_f32+0xb8>
 800cac4:	f845 8c0c 	str.w	r8, [r5, #-12]
 800cac8:	e75e      	b.n	800c988 <arm_cmplx_mag_f32+0x84>
 800caca:	f845 8c10 	str.w	r8, [r5, #-16]
 800cace:	e741      	b.n	800c954 <arm_cmplx_mag_f32+0x50>
 800cad0:	608b      	str	r3, [r1, #8]
 800cad2:	e7ec      	b.n	800caae <arm_cmplx_mag_f32+0x1aa>
 800cad4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cad8:	9001      	str	r0, [sp, #4]
 800cada:	f001 f83f 	bl	800db5c <sqrtf>
 800cade:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cae2:	9801      	ldr	r0, [sp, #4]
 800cae4:	e74e      	b.n	800c984 <arm_cmplx_mag_f32+0x80>
 800cae6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800caea:	9001      	str	r0, [sp, #4]
 800caec:	f001 f836 	bl	800db5c <sqrtf>
 800caf0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800caf4:	9801      	ldr	r0, [sp, #4]
 800caf6:	e72b      	b.n	800c950 <arm_cmplx_mag_f32+0x4c>
 800caf8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cafc:	9001      	str	r0, [sp, #4]
 800cafe:	f001 f82d 	bl	800db5c <sqrtf>
 800cb02:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cb06:	9801      	ldr	r0, [sp, #4]
 800cb08:	e76f      	b.n	800c9ea <arm_cmplx_mag_f32+0xe6>
 800cb0a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cb0e:	9001      	str	r0, [sp, #4]
 800cb10:	f001 f824 	bl	800db5c <sqrtf>
 800cb14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cb18:	9801      	ldr	r0, [sp, #4]
 800cb1a:	e74d      	b.n	800c9b8 <arm_cmplx_mag_f32+0xb4>
 800cb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb20:	9201      	str	r2, [sp, #4]
 800cb22:	f001 f81b 	bl	800db5c <sqrtf>
 800cb26:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cb2a:	9903      	ldr	r1, [sp, #12]
 800cb2c:	e7a2      	b.n	800ca74 <arm_cmplx_mag_f32+0x170>
 800cb2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb32:	9201      	str	r2, [sp, #4]
 800cb34:	f001 f812 	bl	800db5c <sqrtf>
 800cb38:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cb3c:	9903      	ldr	r1, [sp, #12]
 800cb3e:	e77c      	b.n	800ca3a <arm_cmplx_mag_f32+0x136>
 800cb40:	9101      	str	r1, [sp, #4]
 800cb42:	f001 f80b 	bl	800db5c <sqrtf>
 800cb46:	9901      	ldr	r1, [sp, #4]
 800cb48:	e7af      	b.n	800caaa <arm_cmplx_mag_f32+0x1a6>
 800cb4a:	bf00      	nop

0800cb4c <arm_cfft_init_f32>:
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cb52:	f04f 0000 	mov.w	r0, #0
 800cb56:	b410      	push	{r4}
 800cb58:	8019      	strh	r1, [r3, #0]
 800cb5a:	6058      	str	r0, [r3, #4]
 800cb5c:	d033      	beq.n	800cbc6 <arm_cfft_init_f32+0x7a>
 800cb5e:	d918      	bls.n	800cb92 <arm_cfft_init_f32+0x46>
 800cb60:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800cb64:	d027      	beq.n	800cbb6 <arm_cfft_init_f32+0x6a>
 800cb66:	d90c      	bls.n	800cb82 <arm_cfft_init_f32+0x36>
 800cb68:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800cb6c:	d11e      	bne.n	800cbac <arm_cfft_init_f32+0x60>
 800cb6e:	4a17      	ldr	r2, [pc, #92]	; (800cbcc <arm_cfft_init_f32+0x80>)
 800cb70:	8994      	ldrh	r4, [r2, #12]
 800cb72:	819c      	strh	r4, [r3, #12]
 800cb74:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800cb78:	e9c3 2101 	strd	r2, r1, [r3, #4]
 800cb7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cb86:	d018      	beq.n	800cbba <arm_cfft_init_f32+0x6e>
 800cb88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cb8c:	d10e      	bne.n	800cbac <arm_cfft_init_f32+0x60>
 800cb8e:	4a10      	ldr	r2, [pc, #64]	; (800cbd0 <arm_cfft_init_f32+0x84>)
 800cb90:	e7ee      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cb92:	2940      	cmp	r1, #64	; 0x40
 800cb94:	d013      	beq.n	800cbbe <arm_cfft_init_f32+0x72>
 800cb96:	d903      	bls.n	800cba0 <arm_cfft_init_f32+0x54>
 800cb98:	2980      	cmp	r1, #128	; 0x80
 800cb9a:	d107      	bne.n	800cbac <arm_cfft_init_f32+0x60>
 800cb9c:	4a0d      	ldr	r2, [pc, #52]	; (800cbd4 <arm_cfft_init_f32+0x88>)
 800cb9e:	e7e7      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cba0:	2910      	cmp	r1, #16
 800cba2:	d00e      	beq.n	800cbc2 <arm_cfft_init_f32+0x76>
 800cba4:	2920      	cmp	r1, #32
 800cba6:	d101      	bne.n	800cbac <arm_cfft_init_f32+0x60>
 800cba8:	4a0b      	ldr	r2, [pc, #44]	; (800cbd8 <arm_cfft_init_f32+0x8c>)
 800cbaa:	e7e1      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	4a09      	ldr	r2, [pc, #36]	; (800cbdc <arm_cfft_init_f32+0x90>)
 800cbb8:	e7da      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cbba:	4a09      	ldr	r2, [pc, #36]	; (800cbe0 <arm_cfft_init_f32+0x94>)
 800cbbc:	e7d8      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cbbe:	4a09      	ldr	r2, [pc, #36]	; (800cbe4 <arm_cfft_init_f32+0x98>)
 800cbc0:	e7d6      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cbc2:	4a09      	ldr	r2, [pc, #36]	; (800cbe8 <arm_cfft_init_f32+0x9c>)
 800cbc4:	e7d4      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cbc6:	4a09      	ldr	r2, [pc, #36]	; (800cbec <arm_cfft_init_f32+0xa0>)
 800cbc8:	e7d2      	b.n	800cb70 <arm_cfft_init_f32+0x24>
 800cbca:	bf00      	nop
 800cbcc:	0802bcdc 	.word	0x0802bcdc
 800cbd0:	0802bc7c 	.word	0x0802bc7c
 800cbd4:	0802bc8c 	.word	0x0802bc8c
 800cbd8:	0802bccc 	.word	0x0802bccc
 800cbdc:	0802bcac 	.word	0x0802bcac
 800cbe0:	0802bcec 	.word	0x0802bcec
 800cbe4:	0802bcfc 	.word	0x0802bcfc
 800cbe8:	0802bc9c 	.word	0x0802bc9c
 800cbec:	0802bcbc 	.word	0x0802bcbc

0800cbf0 <arm_radix8_butterfly_f32>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	ed2d 8b10 	vpush	{d8-d15}
 800cbf8:	b093      	sub	sp, #76	; 0x4c
 800cbfa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800cbfe:	4603      	mov	r3, r0
 800cc00:	3304      	adds	r3, #4
 800cc02:	ed9f bac0 	vldr	s22, [pc, #768]	; 800cf04 <arm_radix8_butterfly_f32+0x314>
 800cc06:	9010      	str	r0, [sp, #64]	; 0x40
 800cc08:	468b      	mov	fp, r1
 800cc0a:	9311      	str	r3, [sp, #68]	; 0x44
 800cc0c:	4689      	mov	r9, r1
 800cc0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800cc10:	ea4f 05db 	mov.w	r5, fp, lsr #3
 800cc14:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800cc18:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 800cc1c:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800cc20:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800cc24:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800cc28:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 800cc2c:	9100      	str	r1, [sp, #0]
 800cc2e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800cc32:	f108 0004 	add.w	r0, r8, #4
 800cc36:	f10e 0104 	add.w	r1, lr, #4
 800cc3a:	462e      	mov	r6, r5
 800cc3c:	4420      	add	r0, r4
 800cc3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc42:	4421      	add	r1, r4
 800cc44:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 800cc48:	960d      	str	r6, [sp, #52]	; 0x34
 800cc4a:	9402      	str	r4, [sp, #8]
 800cc4c:	012c      	lsls	r4, r5, #4
 800cc4e:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800cc52:	9403      	str	r4, [sp, #12]
 800cc54:	00ec      	lsls	r4, r5, #3
 800cc56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cc58:	9404      	str	r4, [sp, #16]
 800cc5a:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800cc5e:	9405      	str	r4, [sp, #20]
 800cc60:	016c      	lsls	r4, r5, #5
 800cc62:	9401      	str	r4, [sp, #4]
 800cc64:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800cc66:	9c00      	ldr	r4, [sp, #0]
 800cc68:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 800cc6c:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800cc70:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cc74:	f04f 0c00 	mov.w	ip, #0
 800cc78:	edd6 6a00 	vldr	s13, [r6]
 800cc7c:	edd7 1a00 	vldr	s3, [r7]
 800cc80:	ed15 aa01 	vldr	s20, [r5, #-4]
 800cc84:	edd2 5a00 	vldr	s11, [r2]
 800cc88:	ed51 9a01 	vldr	s19, [r1, #-4]
 800cc8c:	ed94 6a00 	vldr	s12, [r4]
 800cc90:	ed50 7a01 	vldr	s15, [r0, #-4]
 800cc94:	ed93 3a00 	vldr	s6, [r3]
 800cc98:	ee39 0a86 	vadd.f32	s0, s19, s12
 800cc9c:	ee33 2a21 	vadd.f32	s4, s6, s3
 800cca0:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800cca4:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800cca8:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ccac:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ccb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ccb4:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ccb8:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ccbc:	ed45 6a01 	vstr	s13, [r5, #-4]
 800ccc0:	ed82 4a00 	vstr	s8, [r2]
 800ccc4:	edd0 6a00 	vldr	s13, [r0]
 800ccc8:	ed96 9a01 	vldr	s18, [r6, #4]
 800cccc:	edd3 2a01 	vldr	s5, [r3, #4]
 800ccd0:	edd7 8a01 	vldr	s17, [r7, #4]
 800ccd4:	edd5 0a00 	vldr	s1, [r5]
 800ccd8:	edd2 3a01 	vldr	s7, [r2, #4]
 800ccdc:	ed94 8a01 	vldr	s16, [r4, #4]
 800cce0:	ed91 7a00 	vldr	s14, [r1]
 800cce4:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cce8:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800ccec:	ee72 aae8 	vsub.f32	s21, s5, s17
 800ccf0:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800ccf4:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800ccf8:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ccfc:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800cd00:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800cd04:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800cd08:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800cd0c:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800cd10:	ee77 0a08 	vadd.f32	s1, s14, s16
 800cd14:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800cd18:	ee37 7a48 	vsub.f32	s14, s14, s16
 800cd1c:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800cd20:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800cd24:	ee76 6a89 	vadd.f32	s13, s13, s18
 800cd28:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800cd2c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800cd30:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800cd34:	ee35 5a42 	vsub.f32	s10, s10, s4
 800cd38:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800cd3c:	ee33 2a20 	vadd.f32	s4, s6, s1
 800cd40:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800cd44:	ee33 3a60 	vsub.f32	s6, s6, s1
 800cd48:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800cd4c:	ee77 0a01 	vadd.f32	s1, s14, s2
 800cd50:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800cd54:	ee37 7a41 	vsub.f32	s14, s14, s2
 800cd58:	ee73 1a84 	vadd.f32	s3, s7, s8
 800cd5c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800cd60:	ee76 3a27 	vadd.f32	s7, s12, s15
 800cd64:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cd68:	ee32 8a00 	vadd.f32	s16, s4, s0
 800cd6c:	ee33 1a45 	vsub.f32	s2, s6, s10
 800cd70:	ee32 2a40 	vsub.f32	s4, s4, s0
 800cd74:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cd78:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800cd7c:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800cd80:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800cd84:	ee34 6a67 	vsub.f32	s12, s8, s15
 800cd88:	ee75 4a87 	vadd.f32	s9, s11, s14
 800cd8c:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800cd90:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800cd94:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cd98:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800cd9c:	44dc      	add	ip, fp
 800cd9e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800cda2:	45e1      	cmp	r9, ip
 800cda4:	ed85 8a00 	vstr	s16, [r5]
 800cda8:	ed82 2a01 	vstr	s4, [r2, #4]
 800cdac:	4455      	add	r5, sl
 800cdae:	ed01 0a01 	vstr	s0, [r1, #-4]
 800cdb2:	4452      	add	r2, sl
 800cdb4:	edc4 6a00 	vstr	s13, [r4]
 800cdb8:	ed81 1a00 	vstr	s2, [r1]
 800cdbc:	ed84 5a01 	vstr	s10, [r4, #4]
 800cdc0:	4451      	add	r1, sl
 800cdc2:	ed00 3a01 	vstr	s6, [r0, #-4]
 800cdc6:	4454      	add	r4, sl
 800cdc8:	edc7 2a00 	vstr	s5, [r7]
 800cdcc:	edc6 4a00 	vstr	s9, [r6]
 800cdd0:	ed83 7a00 	vstr	s14, [r3]
 800cdd4:	edc0 5a00 	vstr	s11, [r0]
 800cdd8:	edc7 3a01 	vstr	s7, [r7, #4]
 800cddc:	4450      	add	r0, sl
 800cdde:	ed86 6a01 	vstr	s12, [r6, #4]
 800cde2:	4457      	add	r7, sl
 800cde4:	edc3 7a01 	vstr	s15, [r3, #4]
 800cde8:	4456      	add	r6, sl
 800cdea:	4453      	add	r3, sl
 800cdec:	f63f af44 	bhi.w	800cc78 <arm_radix8_butterfly_f32+0x88>
 800cdf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdf2:	2b07      	cmp	r3, #7
 800cdf4:	f240 81c3 	bls.w	800d17e <arm_radix8_butterfly_f32+0x58e>
 800cdf8:	9805      	ldr	r0, [sp, #20]
 800cdfa:	9a01      	ldr	r2, [sp, #4]
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	9d04      	ldr	r5, [sp, #16]
 800ce00:	9902      	ldr	r1, [sp, #8]
 800ce02:	f100 0c08 	add.w	ip, r0, #8
 800ce06:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce08:	3208      	adds	r2, #8
 800ce0a:	1882      	adds	r2, r0, r2
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	920a      	str	r2, [sp, #40]	; 0x28
 800ce10:	4602      	mov	r2, r0
 800ce12:	18d3      	adds	r3, r2, r3
 800ce14:	3108      	adds	r1, #8
 800ce16:	3508      	adds	r5, #8
 800ce18:	1851      	adds	r1, r2, r1
 800ce1a:	9307      	str	r3, [sp, #28]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	442a      	add	r2, r5
 800ce20:	9206      	str	r2, [sp, #24]
 800ce22:	461a      	mov	r2, r3
 800ce24:	4462      	add	r2, ip
 800ce26:	f10e 0e0c 	add.w	lr, lr, #12
 800ce2a:	9205      	str	r2, [sp, #20]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4472      	add	r2, lr
 800ce30:	f108 0808 	add.w	r8, r8, #8
 800ce34:	330c      	adds	r3, #12
 800ce36:	4440      	add	r0, r8
 800ce38:	f04f 0e00 	mov.w	lr, #0
 800ce3c:	9203      	str	r2, [sp, #12]
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	465a      	mov	r2, fp
 800ce42:	464b      	mov	r3, r9
 800ce44:	46f3      	mov	fp, lr
 800ce46:	46d1      	mov	r9, sl
 800ce48:	9009      	str	r0, [sp, #36]	; 0x24
 800ce4a:	9108      	str	r1, [sp, #32]
 800ce4c:	f04f 0801 	mov.w	r8, #1
 800ce50:	469a      	mov	sl, r3
 800ce52:	4696      	mov	lr, r2
 800ce54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce56:	449b      	add	fp, r3
 800ce58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce5a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce5e:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800ce62:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 800ce66:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 800ce6a:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800ce6e:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800ce72:	930c      	str	r3, [sp, #48]	; 0x30
 800ce74:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 800ce78:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 800ce7c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce7e:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800ce82:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 800ce86:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 800ce8a:	9202      	str	r2, [sp, #8]
 800ce8c:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800ce90:	9301      	str	r3, [sp, #4]
 800ce92:	4613      	mov	r3, r2
 800ce94:	edd3 da01 	vldr	s27, [r3, #4]
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	edd0 7a00 	vldr	s15, [r0]
 800ce9e:	ed93 da01 	vldr	s26, [r3, #4]
 800cea2:	9b02      	ldr	r3, [sp, #8]
 800cea4:	edcd 7a02 	vstr	s15, [sp, #8]
 800cea8:	ed93 ca01 	vldr	s24, [r3, #4]
 800ceac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceae:	eddc ca01 	vldr	s25, [ip, #4]
 800ceb2:	edd3 7a00 	vldr	s15, [r3]
 800ceb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ceb8:	edcd 7a01 	vstr	s15, [sp, #4]
 800cebc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800cec0:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 800cec4:	9200      	str	r2, [sp, #0]
 800cec6:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 800ceca:	edd3 7a00 	vldr	s15, [r3]
 800cece:	ed92 fa01 	vldr	s30, [r2, #4]
 800ced2:	9a00      	ldr	r2, [sp, #0]
 800ced4:	edd1 ea01 	vldr	s29, [r1, #4]
 800ced8:	ed92 ea01 	vldr	s28, [r2, #4]
 800cedc:	edd7 ba00 	vldr	s23, [r7]
 800cee0:	edd6 aa00 	vldr	s21, [r6]
 800cee4:	ed95 aa00 	vldr	s20, [r5]
 800cee8:	edd4 9a00 	vldr	s19, [r4]
 800ceec:	edcd 7a00 	vstr	s15, [sp]
 800cef0:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 800cef4:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 800cef8:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800cefc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf00:	46c4      	mov	ip, r8
 800cf02:	e001      	b.n	800cf08 <arm_radix8_butterfly_f32+0x318>
 800cf04:	3f3504f3 	.word	0x3f3504f3
 800cf08:	ed91 6a00 	vldr	s12, [r1]
 800cf0c:	ed93 5a00 	vldr	s10, [r3]
 800cf10:	edd0 fa00 	vldr	s31, [r0]
 800cf14:	edd4 7a00 	vldr	s15, [r4]
 800cf18:	ed95 7a00 	vldr	s14, [r5]
 800cf1c:	ed56 3a01 	vldr	s7, [r6, #-4]
 800cf20:	ed17 3a01 	vldr	s6, [r7, #-4]
 800cf24:	ed92 2a00 	vldr	s4, [r2]
 800cf28:	ed96 0a00 	vldr	s0, [r6]
 800cf2c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800cf30:	ee32 1a06 	vadd.f32	s2, s4, s12
 800cf34:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800cf38:	ee77 4a87 	vadd.f32	s9, s15, s14
 800cf3c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800cf40:	ee71 6a24 	vadd.f32	s13, s2, s9
 800cf44:	ee32 2a46 	vsub.f32	s4, s4, s12
 800cf48:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800cf4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf50:	ed06 6a01 	vstr	s12, [r6, #-4]
 800cf54:	edd4 8a01 	vldr	s17, [r4, #4]
 800cf58:	ed92 9a01 	vldr	s18, [r2, #4]
 800cf5c:	edd7 0a00 	vldr	s1, [r7]
 800cf60:	edd1 2a01 	vldr	s5, [r1, #4]
 800cf64:	ed95 7a01 	vldr	s14, [r5, #4]
 800cf68:	ed93 6a01 	vldr	s12, [r3, #4]
 800cf6c:	edd0 5a01 	vldr	s11, [r0, #4]
 800cf70:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800cf74:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800cf78:	ee39 5a62 	vsub.f32	s10, s18, s5
 800cf7c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800cf80:	ee38 4a44 	vsub.f32	s8, s16, s8
 800cf84:	ee38 7a87 	vadd.f32	s14, s17, s14
 800cf88:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800cf8c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800cf90:	ee32 9a27 	vadd.f32	s18, s4, s15
 800cf94:	ee72 7a67 	vsub.f32	s15, s4, s15
 800cf98:	ee30 2a06 	vadd.f32	s4, s0, s12
 800cf9c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800cfa0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800cfa4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800cfa8:	ee32 1a08 	vadd.f32	s2, s4, s16
 800cfac:	ee72 fa87 	vadd.f32	s31, s5, s14
 800cfb0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800cfb4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800cfb8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800cfbc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800cfc0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800cfc4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800cfc8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800cfcc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800cfd0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800cfd4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800cfd8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800cfdc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800cfe0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800cfe4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800cfe8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800cfec:	ee73 8a09 	vadd.f32	s17, s6, s18
 800cff0:	ee74 4a82 	vadd.f32	s9, s9, s4
 800cff4:	ee33 9a49 	vsub.f32	s18, s6, s18
 800cff8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800cffc:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d000:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d004:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d008:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d00c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d010:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d014:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d018:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d01c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d020:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d024:	ed9d 2a00 	vldr	s4, [sp]
 800d028:	eddd 1a01 	vldr	s3, [sp, #4]
 800d02c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d030:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d034:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d038:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d03c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d040:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d044:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d048:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d04c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d050:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d054:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d058:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d05c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d060:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d064:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d068:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d06c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d070:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d074:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d078:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d07c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d080:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d084:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d088:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d08c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d090:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d094:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d098:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d09c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d0a0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d0a4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d0a8:	eddd 5a02 	vldr	s11, [sp, #8]
 800d0ac:	edc6 fa00 	vstr	s31, [r6]
 800d0b0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d0b4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d0b8:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d0bc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d0c0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d0c4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d0c8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d0cc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d0d0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d0d4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d0d8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d0dc:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d0e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d0e4:	44f4      	add	ip, lr
 800d0e6:	45e2      	cmp	sl, ip
 800d0e8:	edc3 3a00 	vstr	s7, [r3]
 800d0ec:	edc3 6a01 	vstr	s13, [r3, #4]
 800d0f0:	444e      	add	r6, r9
 800d0f2:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d0f6:	edc7 0a00 	vstr	s1, [r7]
 800d0fa:	444b      	add	r3, r9
 800d0fc:	ed80 2a00 	vstr	s4, [r0]
 800d100:	edc0 2a01 	vstr	s5, [r0, #4]
 800d104:	444f      	add	r7, r9
 800d106:	edc2 1a00 	vstr	s3, [r2]
 800d10a:	ed82 7a01 	vstr	s14, [r2, #4]
 800d10e:	4448      	add	r0, r9
 800d110:	ed85 8a00 	vstr	s16, [r5]
 800d114:	ed85 0a01 	vstr	s0, [r5, #4]
 800d118:	444a      	add	r2, r9
 800d11a:	edc1 4a00 	vstr	s9, [r1]
 800d11e:	444d      	add	r5, r9
 800d120:	ed81 3a01 	vstr	s6, [r1, #4]
 800d124:	edc4 8a00 	vstr	s17, [r4]
 800d128:	ed84 6a01 	vstr	s12, [r4, #4]
 800d12c:	4449      	add	r1, r9
 800d12e:	444c      	add	r4, r9
 800d130:	f63f aeea 	bhi.w	800cf08 <arm_radix8_butterfly_f32+0x318>
 800d134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d136:	3308      	adds	r3, #8
 800d138:	930a      	str	r3, [sp, #40]	; 0x28
 800d13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13c:	3308      	adds	r3, #8
 800d13e:	9309      	str	r3, [sp, #36]	; 0x24
 800d140:	9b08      	ldr	r3, [sp, #32]
 800d142:	3308      	adds	r3, #8
 800d144:	9308      	str	r3, [sp, #32]
 800d146:	9b07      	ldr	r3, [sp, #28]
 800d148:	3308      	adds	r3, #8
 800d14a:	9307      	str	r3, [sp, #28]
 800d14c:	9b06      	ldr	r3, [sp, #24]
 800d14e:	3308      	adds	r3, #8
 800d150:	9306      	str	r3, [sp, #24]
 800d152:	9b05      	ldr	r3, [sp, #20]
 800d154:	3308      	adds	r3, #8
 800d156:	9305      	str	r3, [sp, #20]
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	3308      	adds	r3, #8
 800d15c:	9304      	str	r3, [sp, #16]
 800d15e:	9b03      	ldr	r3, [sp, #12]
 800d160:	3308      	adds	r3, #8
 800d162:	9303      	str	r3, [sp, #12]
 800d164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d166:	f108 0801 	add.w	r8, r8, #1
 800d16a:	4543      	cmp	r3, r8
 800d16c:	f47f ae72 	bne.w	800ce54 <arm_radix8_butterfly_f32+0x264>
 800d170:	469b      	mov	fp, r3
 800d172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	b29b      	uxth	r3, r3
 800d178:	46d1      	mov	r9, sl
 800d17a:	930e      	str	r3, [sp, #56]	; 0x38
 800d17c:	e547      	b.n	800cc0e <arm_radix8_butterfly_f32+0x1e>
 800d17e:	b013      	add	sp, #76	; 0x4c
 800d180:	ecbd 8b10 	vpop	{d8-d15}
 800d184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d188 <sniprintf>:
 800d188:	b40c      	push	{r2, r3}
 800d18a:	b530      	push	{r4, r5, lr}
 800d18c:	4b17      	ldr	r3, [pc, #92]	; (800d1ec <sniprintf+0x64>)
 800d18e:	1e0c      	subs	r4, r1, #0
 800d190:	681d      	ldr	r5, [r3, #0]
 800d192:	b09d      	sub	sp, #116	; 0x74
 800d194:	da08      	bge.n	800d1a8 <sniprintf+0x20>
 800d196:	238b      	movs	r3, #139	; 0x8b
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	f04f 30ff 	mov.w	r0, #4294967295
 800d19e:	b01d      	add	sp, #116	; 0x74
 800d1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1a4:	b002      	add	sp, #8
 800d1a6:	4770      	bx	lr
 800d1a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d1ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d1b0:	bf14      	ite	ne
 800d1b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1b6:	4623      	moveq	r3, r4
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	9307      	str	r3, [sp, #28]
 800d1bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1c0:	9002      	str	r0, [sp, #8]
 800d1c2:	9006      	str	r0, [sp, #24]
 800d1c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d1c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d1ca:	ab21      	add	r3, sp, #132	; 0x84
 800d1cc:	a902      	add	r1, sp, #8
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	f000 f9c5 	bl	800d560 <_svfiprintf_r>
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	bfbc      	itt	lt
 800d1da:	238b      	movlt	r3, #139	; 0x8b
 800d1dc:	602b      	strlt	r3, [r5, #0]
 800d1de:	2c00      	cmp	r4, #0
 800d1e0:	d0dd      	beq.n	800d19e <sniprintf+0x16>
 800d1e2:	9b02      	ldr	r3, [sp, #8]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	701a      	strb	r2, [r3, #0]
 800d1e8:	e7d9      	b.n	800d19e <sniprintf+0x16>
 800d1ea:	bf00      	nop
 800d1ec:	20000064 	.word	0x20000064

0800d1f0 <siprintf>:
 800d1f0:	b40e      	push	{r1, r2, r3}
 800d1f2:	b500      	push	{lr}
 800d1f4:	b09c      	sub	sp, #112	; 0x70
 800d1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800d1f8:	9002      	str	r0, [sp, #8]
 800d1fa:	9006      	str	r0, [sp, #24]
 800d1fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d200:	4809      	ldr	r0, [pc, #36]	; (800d228 <siprintf+0x38>)
 800d202:	9107      	str	r1, [sp, #28]
 800d204:	9104      	str	r1, [sp, #16]
 800d206:	4909      	ldr	r1, [pc, #36]	; (800d22c <siprintf+0x3c>)
 800d208:	f853 2b04 	ldr.w	r2, [r3], #4
 800d20c:	9105      	str	r1, [sp, #20]
 800d20e:	6800      	ldr	r0, [r0, #0]
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	a902      	add	r1, sp, #8
 800d214:	f000 f9a4 	bl	800d560 <_svfiprintf_r>
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	2200      	movs	r2, #0
 800d21c:	701a      	strb	r2, [r3, #0]
 800d21e:	b01c      	add	sp, #112	; 0x70
 800d220:	f85d eb04 	ldr.w	lr, [sp], #4
 800d224:	b003      	add	sp, #12
 800d226:	4770      	bx	lr
 800d228:	20000064 	.word	0x20000064
 800d22c:	ffff0208 	.word	0xffff0208

0800d230 <memset>:
 800d230:	4402      	add	r2, r0
 800d232:	4603      	mov	r3, r0
 800d234:	4293      	cmp	r3, r2
 800d236:	d100      	bne.n	800d23a <memset+0xa>
 800d238:	4770      	bx	lr
 800d23a:	f803 1b01 	strb.w	r1, [r3], #1
 800d23e:	e7f9      	b.n	800d234 <memset+0x4>

0800d240 <strncmp>:
 800d240:	b510      	push	{r4, lr}
 800d242:	b16a      	cbz	r2, 800d260 <strncmp+0x20>
 800d244:	3901      	subs	r1, #1
 800d246:	1884      	adds	r4, r0, r2
 800d248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d24c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d250:	429a      	cmp	r2, r3
 800d252:	d103      	bne.n	800d25c <strncmp+0x1c>
 800d254:	42a0      	cmp	r0, r4
 800d256:	d001      	beq.n	800d25c <strncmp+0x1c>
 800d258:	2a00      	cmp	r2, #0
 800d25a:	d1f5      	bne.n	800d248 <strncmp+0x8>
 800d25c:	1ad0      	subs	r0, r2, r3
 800d25e:	bd10      	pop	{r4, pc}
 800d260:	4610      	mov	r0, r2
 800d262:	e7fc      	b.n	800d25e <strncmp+0x1e>

0800d264 <__errno>:
 800d264:	4b01      	ldr	r3, [pc, #4]	; (800d26c <__errno+0x8>)
 800d266:	6818      	ldr	r0, [r3, #0]
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	20000064 	.word	0x20000064

0800d270 <__libc_init_array>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	4d0d      	ldr	r5, [pc, #52]	; (800d2a8 <__libc_init_array+0x38>)
 800d274:	4c0d      	ldr	r4, [pc, #52]	; (800d2ac <__libc_init_array+0x3c>)
 800d276:	1b64      	subs	r4, r4, r5
 800d278:	10a4      	asrs	r4, r4, #2
 800d27a:	2600      	movs	r6, #0
 800d27c:	42a6      	cmp	r6, r4
 800d27e:	d109      	bne.n	800d294 <__libc_init_array+0x24>
 800d280:	4d0b      	ldr	r5, [pc, #44]	; (800d2b0 <__libc_init_array+0x40>)
 800d282:	4c0c      	ldr	r4, [pc, #48]	; (800d2b4 <__libc_init_array+0x44>)
 800d284:	f000 fc8c 	bl	800dba0 <_init>
 800d288:	1b64      	subs	r4, r4, r5
 800d28a:	10a4      	asrs	r4, r4, #2
 800d28c:	2600      	movs	r6, #0
 800d28e:	42a6      	cmp	r6, r4
 800d290:	d105      	bne.n	800d29e <__libc_init_array+0x2e>
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	f855 3b04 	ldr.w	r3, [r5], #4
 800d298:	4798      	blx	r3
 800d29a:	3601      	adds	r6, #1
 800d29c:	e7ee      	b.n	800d27c <__libc_init_array+0xc>
 800d29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a2:	4798      	blx	r3
 800d2a4:	3601      	adds	r6, #1
 800d2a6:	e7f2      	b.n	800d28e <__libc_init_array+0x1e>
 800d2a8:	0802bd48 	.word	0x0802bd48
 800d2ac:	0802bd48 	.word	0x0802bd48
 800d2b0:	0802bd48 	.word	0x0802bd48
 800d2b4:	0802bd4c 	.word	0x0802bd4c

0800d2b8 <__retarget_lock_acquire_recursive>:
 800d2b8:	4770      	bx	lr

0800d2ba <__retarget_lock_release_recursive>:
 800d2ba:	4770      	bx	lr

0800d2bc <_free_r>:
 800d2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2be:	2900      	cmp	r1, #0
 800d2c0:	d044      	beq.n	800d34c <_free_r+0x90>
 800d2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2c6:	9001      	str	r0, [sp, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f1a1 0404 	sub.w	r4, r1, #4
 800d2ce:	bfb8      	it	lt
 800d2d0:	18e4      	addlt	r4, r4, r3
 800d2d2:	f000 f8df 	bl	800d494 <__malloc_lock>
 800d2d6:	4a1e      	ldr	r2, [pc, #120]	; (800d350 <_free_r+0x94>)
 800d2d8:	9801      	ldr	r0, [sp, #4]
 800d2da:	6813      	ldr	r3, [r2, #0]
 800d2dc:	b933      	cbnz	r3, 800d2ec <_free_r+0x30>
 800d2de:	6063      	str	r3, [r4, #4]
 800d2e0:	6014      	str	r4, [r2, #0]
 800d2e2:	b003      	add	sp, #12
 800d2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2e8:	f000 b8da 	b.w	800d4a0 <__malloc_unlock>
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	d908      	bls.n	800d302 <_free_r+0x46>
 800d2f0:	6825      	ldr	r5, [r4, #0]
 800d2f2:	1961      	adds	r1, r4, r5
 800d2f4:	428b      	cmp	r3, r1
 800d2f6:	bf01      	itttt	eq
 800d2f8:	6819      	ldreq	r1, [r3, #0]
 800d2fa:	685b      	ldreq	r3, [r3, #4]
 800d2fc:	1949      	addeq	r1, r1, r5
 800d2fe:	6021      	streq	r1, [r4, #0]
 800d300:	e7ed      	b.n	800d2de <_free_r+0x22>
 800d302:	461a      	mov	r2, r3
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	b10b      	cbz	r3, 800d30c <_free_r+0x50>
 800d308:	42a3      	cmp	r3, r4
 800d30a:	d9fa      	bls.n	800d302 <_free_r+0x46>
 800d30c:	6811      	ldr	r1, [r2, #0]
 800d30e:	1855      	adds	r5, r2, r1
 800d310:	42a5      	cmp	r5, r4
 800d312:	d10b      	bne.n	800d32c <_free_r+0x70>
 800d314:	6824      	ldr	r4, [r4, #0]
 800d316:	4421      	add	r1, r4
 800d318:	1854      	adds	r4, r2, r1
 800d31a:	42a3      	cmp	r3, r4
 800d31c:	6011      	str	r1, [r2, #0]
 800d31e:	d1e0      	bne.n	800d2e2 <_free_r+0x26>
 800d320:	681c      	ldr	r4, [r3, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	6053      	str	r3, [r2, #4]
 800d326:	440c      	add	r4, r1
 800d328:	6014      	str	r4, [r2, #0]
 800d32a:	e7da      	b.n	800d2e2 <_free_r+0x26>
 800d32c:	d902      	bls.n	800d334 <_free_r+0x78>
 800d32e:	230c      	movs	r3, #12
 800d330:	6003      	str	r3, [r0, #0]
 800d332:	e7d6      	b.n	800d2e2 <_free_r+0x26>
 800d334:	6825      	ldr	r5, [r4, #0]
 800d336:	1961      	adds	r1, r4, r5
 800d338:	428b      	cmp	r3, r1
 800d33a:	bf04      	itt	eq
 800d33c:	6819      	ldreq	r1, [r3, #0]
 800d33e:	685b      	ldreq	r3, [r3, #4]
 800d340:	6063      	str	r3, [r4, #4]
 800d342:	bf04      	itt	eq
 800d344:	1949      	addeq	r1, r1, r5
 800d346:	6021      	streq	r1, [r4, #0]
 800d348:	6054      	str	r4, [r2, #4]
 800d34a:	e7ca      	b.n	800d2e2 <_free_r+0x26>
 800d34c:	b003      	add	sp, #12
 800d34e:	bd30      	pop	{r4, r5, pc}
 800d350:	2000c758 	.word	0x2000c758

0800d354 <sbrk_aligned>:
 800d354:	b570      	push	{r4, r5, r6, lr}
 800d356:	4e0e      	ldr	r6, [pc, #56]	; (800d390 <sbrk_aligned+0x3c>)
 800d358:	460c      	mov	r4, r1
 800d35a:	6831      	ldr	r1, [r6, #0]
 800d35c:	4605      	mov	r5, r0
 800d35e:	b911      	cbnz	r1, 800d366 <sbrk_aligned+0x12>
 800d360:	f000 fba6 	bl	800dab0 <_sbrk_r>
 800d364:	6030      	str	r0, [r6, #0]
 800d366:	4621      	mov	r1, r4
 800d368:	4628      	mov	r0, r5
 800d36a:	f000 fba1 	bl	800dab0 <_sbrk_r>
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	d00a      	beq.n	800d388 <sbrk_aligned+0x34>
 800d372:	1cc4      	adds	r4, r0, #3
 800d374:	f024 0403 	bic.w	r4, r4, #3
 800d378:	42a0      	cmp	r0, r4
 800d37a:	d007      	beq.n	800d38c <sbrk_aligned+0x38>
 800d37c:	1a21      	subs	r1, r4, r0
 800d37e:	4628      	mov	r0, r5
 800d380:	f000 fb96 	bl	800dab0 <_sbrk_r>
 800d384:	3001      	adds	r0, #1
 800d386:	d101      	bne.n	800d38c <sbrk_aligned+0x38>
 800d388:	f04f 34ff 	mov.w	r4, #4294967295
 800d38c:	4620      	mov	r0, r4
 800d38e:	bd70      	pop	{r4, r5, r6, pc}
 800d390:	2000c75c 	.word	0x2000c75c

0800d394 <_malloc_r>:
 800d394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d398:	1ccd      	adds	r5, r1, #3
 800d39a:	f025 0503 	bic.w	r5, r5, #3
 800d39e:	3508      	adds	r5, #8
 800d3a0:	2d0c      	cmp	r5, #12
 800d3a2:	bf38      	it	cc
 800d3a4:	250c      	movcc	r5, #12
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	db01      	blt.n	800d3b0 <_malloc_r+0x1c>
 800d3ac:	42a9      	cmp	r1, r5
 800d3ae:	d905      	bls.n	800d3bc <_malloc_r+0x28>
 800d3b0:	230c      	movs	r3, #12
 800d3b2:	603b      	str	r3, [r7, #0]
 800d3b4:	2600      	movs	r6, #0
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d490 <_malloc_r+0xfc>
 800d3c0:	f000 f868 	bl	800d494 <__malloc_lock>
 800d3c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d3c8:	461c      	mov	r4, r3
 800d3ca:	bb5c      	cbnz	r4, 800d424 <_malloc_r+0x90>
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f7ff ffc0 	bl	800d354 <sbrk_aligned>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	d155      	bne.n	800d486 <_malloc_r+0xf2>
 800d3da:	f8d8 4000 	ldr.w	r4, [r8]
 800d3de:	4626      	mov	r6, r4
 800d3e0:	2e00      	cmp	r6, #0
 800d3e2:	d145      	bne.n	800d470 <_malloc_r+0xdc>
 800d3e4:	2c00      	cmp	r4, #0
 800d3e6:	d048      	beq.n	800d47a <_malloc_r+0xe6>
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	eb04 0903 	add.w	r9, r4, r3
 800d3f2:	f000 fb5d 	bl	800dab0 <_sbrk_r>
 800d3f6:	4581      	cmp	r9, r0
 800d3f8:	d13f      	bne.n	800d47a <_malloc_r+0xe6>
 800d3fa:	6821      	ldr	r1, [r4, #0]
 800d3fc:	1a6d      	subs	r5, r5, r1
 800d3fe:	4629      	mov	r1, r5
 800d400:	4638      	mov	r0, r7
 800d402:	f7ff ffa7 	bl	800d354 <sbrk_aligned>
 800d406:	3001      	adds	r0, #1
 800d408:	d037      	beq.n	800d47a <_malloc_r+0xe6>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	442b      	add	r3, r5
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	f8d8 3000 	ldr.w	r3, [r8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d038      	beq.n	800d48a <_malloc_r+0xf6>
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	42a2      	cmp	r2, r4
 800d41c:	d12b      	bne.n	800d476 <_malloc_r+0xe2>
 800d41e:	2200      	movs	r2, #0
 800d420:	605a      	str	r2, [r3, #4]
 800d422:	e00f      	b.n	800d444 <_malloc_r+0xb0>
 800d424:	6822      	ldr	r2, [r4, #0]
 800d426:	1b52      	subs	r2, r2, r5
 800d428:	d41f      	bmi.n	800d46a <_malloc_r+0xd6>
 800d42a:	2a0b      	cmp	r2, #11
 800d42c:	d917      	bls.n	800d45e <_malloc_r+0xca>
 800d42e:	1961      	adds	r1, r4, r5
 800d430:	42a3      	cmp	r3, r4
 800d432:	6025      	str	r5, [r4, #0]
 800d434:	bf18      	it	ne
 800d436:	6059      	strne	r1, [r3, #4]
 800d438:	6863      	ldr	r3, [r4, #4]
 800d43a:	bf08      	it	eq
 800d43c:	f8c8 1000 	streq.w	r1, [r8]
 800d440:	5162      	str	r2, [r4, r5]
 800d442:	604b      	str	r3, [r1, #4]
 800d444:	4638      	mov	r0, r7
 800d446:	f104 060b 	add.w	r6, r4, #11
 800d44a:	f000 f829 	bl	800d4a0 <__malloc_unlock>
 800d44e:	f026 0607 	bic.w	r6, r6, #7
 800d452:	1d23      	adds	r3, r4, #4
 800d454:	1af2      	subs	r2, r6, r3
 800d456:	d0ae      	beq.n	800d3b6 <_malloc_r+0x22>
 800d458:	1b9b      	subs	r3, r3, r6
 800d45a:	50a3      	str	r3, [r4, r2]
 800d45c:	e7ab      	b.n	800d3b6 <_malloc_r+0x22>
 800d45e:	42a3      	cmp	r3, r4
 800d460:	6862      	ldr	r2, [r4, #4]
 800d462:	d1dd      	bne.n	800d420 <_malloc_r+0x8c>
 800d464:	f8c8 2000 	str.w	r2, [r8]
 800d468:	e7ec      	b.n	800d444 <_malloc_r+0xb0>
 800d46a:	4623      	mov	r3, r4
 800d46c:	6864      	ldr	r4, [r4, #4]
 800d46e:	e7ac      	b.n	800d3ca <_malloc_r+0x36>
 800d470:	4634      	mov	r4, r6
 800d472:	6876      	ldr	r6, [r6, #4]
 800d474:	e7b4      	b.n	800d3e0 <_malloc_r+0x4c>
 800d476:	4613      	mov	r3, r2
 800d478:	e7cc      	b.n	800d414 <_malloc_r+0x80>
 800d47a:	230c      	movs	r3, #12
 800d47c:	603b      	str	r3, [r7, #0]
 800d47e:	4638      	mov	r0, r7
 800d480:	f000 f80e 	bl	800d4a0 <__malloc_unlock>
 800d484:	e797      	b.n	800d3b6 <_malloc_r+0x22>
 800d486:	6025      	str	r5, [r4, #0]
 800d488:	e7dc      	b.n	800d444 <_malloc_r+0xb0>
 800d48a:	605b      	str	r3, [r3, #4]
 800d48c:	deff      	udf	#255	; 0xff
 800d48e:	bf00      	nop
 800d490:	2000c758 	.word	0x2000c758

0800d494 <__malloc_lock>:
 800d494:	4801      	ldr	r0, [pc, #4]	; (800d49c <__malloc_lock+0x8>)
 800d496:	f7ff bf0f 	b.w	800d2b8 <__retarget_lock_acquire_recursive>
 800d49a:	bf00      	nop
 800d49c:	2000c754 	.word	0x2000c754

0800d4a0 <__malloc_unlock>:
 800d4a0:	4801      	ldr	r0, [pc, #4]	; (800d4a8 <__malloc_unlock+0x8>)
 800d4a2:	f7ff bf0a 	b.w	800d2ba <__retarget_lock_release_recursive>
 800d4a6:	bf00      	nop
 800d4a8:	2000c754 	.word	0x2000c754

0800d4ac <__ssputs_r>:
 800d4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b0:	688e      	ldr	r6, [r1, #8]
 800d4b2:	461f      	mov	r7, r3
 800d4b4:	42be      	cmp	r6, r7
 800d4b6:	680b      	ldr	r3, [r1, #0]
 800d4b8:	4682      	mov	sl, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	4690      	mov	r8, r2
 800d4be:	d82c      	bhi.n	800d51a <__ssputs_r+0x6e>
 800d4c0:	898a      	ldrh	r2, [r1, #12]
 800d4c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4c6:	d026      	beq.n	800d516 <__ssputs_r+0x6a>
 800d4c8:	6965      	ldr	r5, [r4, #20]
 800d4ca:	6909      	ldr	r1, [r1, #16]
 800d4cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4d0:	eba3 0901 	sub.w	r9, r3, r1
 800d4d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4d8:	1c7b      	adds	r3, r7, #1
 800d4da:	444b      	add	r3, r9
 800d4dc:	106d      	asrs	r5, r5, #1
 800d4de:	429d      	cmp	r5, r3
 800d4e0:	bf38      	it	cc
 800d4e2:	461d      	movcc	r5, r3
 800d4e4:	0553      	lsls	r3, r2, #21
 800d4e6:	d527      	bpl.n	800d538 <__ssputs_r+0x8c>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	f7ff ff53 	bl	800d394 <_malloc_r>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	b360      	cbz	r0, 800d54c <__ssputs_r+0xa0>
 800d4f2:	6921      	ldr	r1, [r4, #16]
 800d4f4:	464a      	mov	r2, r9
 800d4f6:	f000 faeb 	bl	800dad0 <memcpy>
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d504:	81a3      	strh	r3, [r4, #12]
 800d506:	6126      	str	r6, [r4, #16]
 800d508:	6165      	str	r5, [r4, #20]
 800d50a:	444e      	add	r6, r9
 800d50c:	eba5 0509 	sub.w	r5, r5, r9
 800d510:	6026      	str	r6, [r4, #0]
 800d512:	60a5      	str	r5, [r4, #8]
 800d514:	463e      	mov	r6, r7
 800d516:	42be      	cmp	r6, r7
 800d518:	d900      	bls.n	800d51c <__ssputs_r+0x70>
 800d51a:	463e      	mov	r6, r7
 800d51c:	6820      	ldr	r0, [r4, #0]
 800d51e:	4632      	mov	r2, r6
 800d520:	4641      	mov	r1, r8
 800d522:	f000 faab 	bl	800da7c <memmove>
 800d526:	68a3      	ldr	r3, [r4, #8]
 800d528:	1b9b      	subs	r3, r3, r6
 800d52a:	60a3      	str	r3, [r4, #8]
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	4433      	add	r3, r6
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	2000      	movs	r0, #0
 800d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d538:	462a      	mov	r2, r5
 800d53a:	f000 fad7 	bl	800daec <_realloc_r>
 800d53e:	4606      	mov	r6, r0
 800d540:	2800      	cmp	r0, #0
 800d542:	d1e0      	bne.n	800d506 <__ssputs_r+0x5a>
 800d544:	6921      	ldr	r1, [r4, #16]
 800d546:	4650      	mov	r0, sl
 800d548:	f7ff feb8 	bl	800d2bc <_free_r>
 800d54c:	230c      	movs	r3, #12
 800d54e:	f8ca 3000 	str.w	r3, [sl]
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	f04f 30ff 	mov.w	r0, #4294967295
 800d55e:	e7e9      	b.n	800d534 <__ssputs_r+0x88>

0800d560 <_svfiprintf_r>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	4698      	mov	r8, r3
 800d566:	898b      	ldrh	r3, [r1, #12]
 800d568:	061b      	lsls	r3, r3, #24
 800d56a:	b09d      	sub	sp, #116	; 0x74
 800d56c:	4607      	mov	r7, r0
 800d56e:	460d      	mov	r5, r1
 800d570:	4614      	mov	r4, r2
 800d572:	d50e      	bpl.n	800d592 <_svfiprintf_r+0x32>
 800d574:	690b      	ldr	r3, [r1, #16]
 800d576:	b963      	cbnz	r3, 800d592 <_svfiprintf_r+0x32>
 800d578:	2140      	movs	r1, #64	; 0x40
 800d57a:	f7ff ff0b 	bl	800d394 <_malloc_r>
 800d57e:	6028      	str	r0, [r5, #0]
 800d580:	6128      	str	r0, [r5, #16]
 800d582:	b920      	cbnz	r0, 800d58e <_svfiprintf_r+0x2e>
 800d584:	230c      	movs	r3, #12
 800d586:	603b      	str	r3, [r7, #0]
 800d588:	f04f 30ff 	mov.w	r0, #4294967295
 800d58c:	e0d0      	b.n	800d730 <_svfiprintf_r+0x1d0>
 800d58e:	2340      	movs	r3, #64	; 0x40
 800d590:	616b      	str	r3, [r5, #20]
 800d592:	2300      	movs	r3, #0
 800d594:	9309      	str	r3, [sp, #36]	; 0x24
 800d596:	2320      	movs	r3, #32
 800d598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d59c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5a0:	2330      	movs	r3, #48	; 0x30
 800d5a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d748 <_svfiprintf_r+0x1e8>
 800d5a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5aa:	f04f 0901 	mov.w	r9, #1
 800d5ae:	4623      	mov	r3, r4
 800d5b0:	469a      	mov	sl, r3
 800d5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5b6:	b10a      	cbz	r2, 800d5bc <_svfiprintf_r+0x5c>
 800d5b8:	2a25      	cmp	r2, #37	; 0x25
 800d5ba:	d1f9      	bne.n	800d5b0 <_svfiprintf_r+0x50>
 800d5bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5c0:	d00b      	beq.n	800d5da <_svfiprintf_r+0x7a>
 800d5c2:	465b      	mov	r3, fp
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f7ff ff6f 	bl	800d4ac <__ssputs_r>
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	f000 80a9 	beq.w	800d726 <_svfiprintf_r+0x1c6>
 800d5d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5d6:	445a      	add	r2, fp
 800d5d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d5da:	f89a 3000 	ldrb.w	r3, [sl]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f000 80a1 	beq.w	800d726 <_svfiprintf_r+0x1c6>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5ee:	f10a 0a01 	add.w	sl, sl, #1
 800d5f2:	9304      	str	r3, [sp, #16]
 800d5f4:	9307      	str	r3, [sp, #28]
 800d5f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d5fc:	4654      	mov	r4, sl
 800d5fe:	2205      	movs	r2, #5
 800d600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d604:	4850      	ldr	r0, [pc, #320]	; (800d748 <_svfiprintf_r+0x1e8>)
 800d606:	f7f2 fdf3 	bl	80001f0 <memchr>
 800d60a:	9a04      	ldr	r2, [sp, #16]
 800d60c:	b9d8      	cbnz	r0, 800d646 <_svfiprintf_r+0xe6>
 800d60e:	06d0      	lsls	r0, r2, #27
 800d610:	bf44      	itt	mi
 800d612:	2320      	movmi	r3, #32
 800d614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d618:	0711      	lsls	r1, r2, #28
 800d61a:	bf44      	itt	mi
 800d61c:	232b      	movmi	r3, #43	; 0x2b
 800d61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d622:	f89a 3000 	ldrb.w	r3, [sl]
 800d626:	2b2a      	cmp	r3, #42	; 0x2a
 800d628:	d015      	beq.n	800d656 <_svfiprintf_r+0xf6>
 800d62a:	9a07      	ldr	r2, [sp, #28]
 800d62c:	4654      	mov	r4, sl
 800d62e:	2000      	movs	r0, #0
 800d630:	f04f 0c0a 	mov.w	ip, #10
 800d634:	4621      	mov	r1, r4
 800d636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d63a:	3b30      	subs	r3, #48	; 0x30
 800d63c:	2b09      	cmp	r3, #9
 800d63e:	d94d      	bls.n	800d6dc <_svfiprintf_r+0x17c>
 800d640:	b1b0      	cbz	r0, 800d670 <_svfiprintf_r+0x110>
 800d642:	9207      	str	r2, [sp, #28]
 800d644:	e014      	b.n	800d670 <_svfiprintf_r+0x110>
 800d646:	eba0 0308 	sub.w	r3, r0, r8
 800d64a:	fa09 f303 	lsl.w	r3, r9, r3
 800d64e:	4313      	orrs	r3, r2
 800d650:	9304      	str	r3, [sp, #16]
 800d652:	46a2      	mov	sl, r4
 800d654:	e7d2      	b.n	800d5fc <_svfiprintf_r+0x9c>
 800d656:	9b03      	ldr	r3, [sp, #12]
 800d658:	1d19      	adds	r1, r3, #4
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	9103      	str	r1, [sp, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bfbb      	ittet	lt
 800d662:	425b      	neglt	r3, r3
 800d664:	f042 0202 	orrlt.w	r2, r2, #2
 800d668:	9307      	strge	r3, [sp, #28]
 800d66a:	9307      	strlt	r3, [sp, #28]
 800d66c:	bfb8      	it	lt
 800d66e:	9204      	strlt	r2, [sp, #16]
 800d670:	7823      	ldrb	r3, [r4, #0]
 800d672:	2b2e      	cmp	r3, #46	; 0x2e
 800d674:	d10c      	bne.n	800d690 <_svfiprintf_r+0x130>
 800d676:	7863      	ldrb	r3, [r4, #1]
 800d678:	2b2a      	cmp	r3, #42	; 0x2a
 800d67a:	d134      	bne.n	800d6e6 <_svfiprintf_r+0x186>
 800d67c:	9b03      	ldr	r3, [sp, #12]
 800d67e:	1d1a      	adds	r2, r3, #4
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	9203      	str	r2, [sp, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	bfb8      	it	lt
 800d688:	f04f 33ff 	movlt.w	r3, #4294967295
 800d68c:	3402      	adds	r4, #2
 800d68e:	9305      	str	r3, [sp, #20]
 800d690:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d758 <_svfiprintf_r+0x1f8>
 800d694:	7821      	ldrb	r1, [r4, #0]
 800d696:	2203      	movs	r2, #3
 800d698:	4650      	mov	r0, sl
 800d69a:	f7f2 fda9 	bl	80001f0 <memchr>
 800d69e:	b138      	cbz	r0, 800d6b0 <_svfiprintf_r+0x150>
 800d6a0:	9b04      	ldr	r3, [sp, #16]
 800d6a2:	eba0 000a 	sub.w	r0, r0, sl
 800d6a6:	2240      	movs	r2, #64	; 0x40
 800d6a8:	4082      	lsls	r2, r0
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	3401      	adds	r4, #1
 800d6ae:	9304      	str	r3, [sp, #16]
 800d6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b4:	4825      	ldr	r0, [pc, #148]	; (800d74c <_svfiprintf_r+0x1ec>)
 800d6b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6ba:	2206      	movs	r2, #6
 800d6bc:	f7f2 fd98 	bl	80001f0 <memchr>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d038      	beq.n	800d736 <_svfiprintf_r+0x1d6>
 800d6c4:	4b22      	ldr	r3, [pc, #136]	; (800d750 <_svfiprintf_r+0x1f0>)
 800d6c6:	bb1b      	cbnz	r3, 800d710 <_svfiprintf_r+0x1b0>
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	3307      	adds	r3, #7
 800d6cc:	f023 0307 	bic.w	r3, r3, #7
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	9303      	str	r3, [sp, #12]
 800d6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6d6:	4433      	add	r3, r6
 800d6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6da:	e768      	b.n	800d5ae <_svfiprintf_r+0x4e>
 800d6dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	e7a6      	b.n	800d634 <_svfiprintf_r+0xd4>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	3401      	adds	r4, #1
 800d6ea:	9305      	str	r3, [sp, #20]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f04f 0c0a 	mov.w	ip, #10
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6f8:	3a30      	subs	r2, #48	; 0x30
 800d6fa:	2a09      	cmp	r2, #9
 800d6fc:	d903      	bls.n	800d706 <_svfiprintf_r+0x1a6>
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d0c6      	beq.n	800d690 <_svfiprintf_r+0x130>
 800d702:	9105      	str	r1, [sp, #20]
 800d704:	e7c4      	b.n	800d690 <_svfiprintf_r+0x130>
 800d706:	fb0c 2101 	mla	r1, ip, r1, r2
 800d70a:	4604      	mov	r4, r0
 800d70c:	2301      	movs	r3, #1
 800d70e:	e7f0      	b.n	800d6f2 <_svfiprintf_r+0x192>
 800d710:	ab03      	add	r3, sp, #12
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	462a      	mov	r2, r5
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <_svfiprintf_r+0x1f4>)
 800d718:	a904      	add	r1, sp, #16
 800d71a:	4638      	mov	r0, r7
 800d71c:	f3af 8000 	nop.w
 800d720:	1c42      	adds	r2, r0, #1
 800d722:	4606      	mov	r6, r0
 800d724:	d1d6      	bne.n	800d6d4 <_svfiprintf_r+0x174>
 800d726:	89ab      	ldrh	r3, [r5, #12]
 800d728:	065b      	lsls	r3, r3, #25
 800d72a:	f53f af2d 	bmi.w	800d588 <_svfiprintf_r+0x28>
 800d72e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d730:	b01d      	add	sp, #116	; 0x74
 800d732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d736:	ab03      	add	r3, sp, #12
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	462a      	mov	r2, r5
 800d73c:	4b05      	ldr	r3, [pc, #20]	; (800d754 <_svfiprintf_r+0x1f4>)
 800d73e:	a904      	add	r1, sp, #16
 800d740:	4638      	mov	r0, r7
 800d742:	f000 f879 	bl	800d838 <_printf_i>
 800d746:	e7eb      	b.n	800d720 <_svfiprintf_r+0x1c0>
 800d748:	0802bd0c 	.word	0x0802bd0c
 800d74c:	0802bd16 	.word	0x0802bd16
 800d750:	00000000 	.word	0x00000000
 800d754:	0800d4ad 	.word	0x0800d4ad
 800d758:	0802bd12 	.word	0x0802bd12

0800d75c <_printf_common>:
 800d75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d760:	4616      	mov	r6, r2
 800d762:	4699      	mov	r9, r3
 800d764:	688a      	ldr	r2, [r1, #8]
 800d766:	690b      	ldr	r3, [r1, #16]
 800d768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d76c:	4293      	cmp	r3, r2
 800d76e:	bfb8      	it	lt
 800d770:	4613      	movlt	r3, r2
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d778:	4607      	mov	r7, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	b10a      	cbz	r2, 800d782 <_printf_common+0x26>
 800d77e:	3301      	adds	r3, #1
 800d780:	6033      	str	r3, [r6, #0]
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	0699      	lsls	r1, r3, #26
 800d786:	bf42      	ittt	mi
 800d788:	6833      	ldrmi	r3, [r6, #0]
 800d78a:	3302      	addmi	r3, #2
 800d78c:	6033      	strmi	r3, [r6, #0]
 800d78e:	6825      	ldr	r5, [r4, #0]
 800d790:	f015 0506 	ands.w	r5, r5, #6
 800d794:	d106      	bne.n	800d7a4 <_printf_common+0x48>
 800d796:	f104 0a19 	add.w	sl, r4, #25
 800d79a:	68e3      	ldr	r3, [r4, #12]
 800d79c:	6832      	ldr	r2, [r6, #0]
 800d79e:	1a9b      	subs	r3, r3, r2
 800d7a0:	42ab      	cmp	r3, r5
 800d7a2:	dc26      	bgt.n	800d7f2 <_printf_common+0x96>
 800d7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7a8:	1e13      	subs	r3, r2, #0
 800d7aa:	6822      	ldr	r2, [r4, #0]
 800d7ac:	bf18      	it	ne
 800d7ae:	2301      	movne	r3, #1
 800d7b0:	0692      	lsls	r2, r2, #26
 800d7b2:	d42b      	bmi.n	800d80c <_printf_common+0xb0>
 800d7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	47c0      	blx	r8
 800d7be:	3001      	adds	r0, #1
 800d7c0:	d01e      	beq.n	800d800 <_printf_common+0xa4>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	6922      	ldr	r2, [r4, #16]
 800d7c6:	f003 0306 	and.w	r3, r3, #6
 800d7ca:	2b04      	cmp	r3, #4
 800d7cc:	bf02      	ittt	eq
 800d7ce:	68e5      	ldreq	r5, [r4, #12]
 800d7d0:	6833      	ldreq	r3, [r6, #0]
 800d7d2:	1aed      	subeq	r5, r5, r3
 800d7d4:	68a3      	ldr	r3, [r4, #8]
 800d7d6:	bf0c      	ite	eq
 800d7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7dc:	2500      	movne	r5, #0
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	bfc4      	itt	gt
 800d7e2:	1a9b      	subgt	r3, r3, r2
 800d7e4:	18ed      	addgt	r5, r5, r3
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	341a      	adds	r4, #26
 800d7ea:	42b5      	cmp	r5, r6
 800d7ec:	d11a      	bne.n	800d824 <_printf_common+0xc8>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	e008      	b.n	800d804 <_printf_common+0xa8>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	4652      	mov	r2, sl
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	47c0      	blx	r8
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d103      	bne.n	800d808 <_printf_common+0xac>
 800d800:	f04f 30ff 	mov.w	r0, #4294967295
 800d804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d808:	3501      	adds	r5, #1
 800d80a:	e7c6      	b.n	800d79a <_printf_common+0x3e>
 800d80c:	18e1      	adds	r1, r4, r3
 800d80e:	1c5a      	adds	r2, r3, #1
 800d810:	2030      	movs	r0, #48	; 0x30
 800d812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d816:	4422      	add	r2, r4
 800d818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d81c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d820:	3302      	adds	r3, #2
 800d822:	e7c7      	b.n	800d7b4 <_printf_common+0x58>
 800d824:	2301      	movs	r3, #1
 800d826:	4622      	mov	r2, r4
 800d828:	4649      	mov	r1, r9
 800d82a:	4638      	mov	r0, r7
 800d82c:	47c0      	blx	r8
 800d82e:	3001      	adds	r0, #1
 800d830:	d0e6      	beq.n	800d800 <_printf_common+0xa4>
 800d832:	3601      	adds	r6, #1
 800d834:	e7d9      	b.n	800d7ea <_printf_common+0x8e>
	...

0800d838 <_printf_i>:
 800d838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	7e0f      	ldrb	r7, [r1, #24]
 800d83e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d840:	2f78      	cmp	r7, #120	; 0x78
 800d842:	4691      	mov	r9, r2
 800d844:	4680      	mov	r8, r0
 800d846:	460c      	mov	r4, r1
 800d848:	469a      	mov	sl, r3
 800d84a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d84e:	d807      	bhi.n	800d860 <_printf_i+0x28>
 800d850:	2f62      	cmp	r7, #98	; 0x62
 800d852:	d80a      	bhi.n	800d86a <_printf_i+0x32>
 800d854:	2f00      	cmp	r7, #0
 800d856:	f000 80d4 	beq.w	800da02 <_printf_i+0x1ca>
 800d85a:	2f58      	cmp	r7, #88	; 0x58
 800d85c:	f000 80c0 	beq.w	800d9e0 <_printf_i+0x1a8>
 800d860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d868:	e03a      	b.n	800d8e0 <_printf_i+0xa8>
 800d86a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d86e:	2b15      	cmp	r3, #21
 800d870:	d8f6      	bhi.n	800d860 <_printf_i+0x28>
 800d872:	a101      	add	r1, pc, #4	; (adr r1, 800d878 <_printf_i+0x40>)
 800d874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d878:	0800d8d1 	.word	0x0800d8d1
 800d87c:	0800d8e5 	.word	0x0800d8e5
 800d880:	0800d861 	.word	0x0800d861
 800d884:	0800d861 	.word	0x0800d861
 800d888:	0800d861 	.word	0x0800d861
 800d88c:	0800d861 	.word	0x0800d861
 800d890:	0800d8e5 	.word	0x0800d8e5
 800d894:	0800d861 	.word	0x0800d861
 800d898:	0800d861 	.word	0x0800d861
 800d89c:	0800d861 	.word	0x0800d861
 800d8a0:	0800d861 	.word	0x0800d861
 800d8a4:	0800d9e9 	.word	0x0800d9e9
 800d8a8:	0800d911 	.word	0x0800d911
 800d8ac:	0800d9a3 	.word	0x0800d9a3
 800d8b0:	0800d861 	.word	0x0800d861
 800d8b4:	0800d861 	.word	0x0800d861
 800d8b8:	0800da0b 	.word	0x0800da0b
 800d8bc:	0800d861 	.word	0x0800d861
 800d8c0:	0800d911 	.word	0x0800d911
 800d8c4:	0800d861 	.word	0x0800d861
 800d8c8:	0800d861 	.word	0x0800d861
 800d8cc:	0800d9ab 	.word	0x0800d9ab
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	1d1a      	adds	r2, r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	602a      	str	r2, [r5, #0]
 800d8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e09f      	b.n	800da24 <_printf_i+0x1ec>
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	682b      	ldr	r3, [r5, #0]
 800d8e8:	0607      	lsls	r7, r0, #24
 800d8ea:	f103 0104 	add.w	r1, r3, #4
 800d8ee:	6029      	str	r1, [r5, #0]
 800d8f0:	d501      	bpl.n	800d8f6 <_printf_i+0xbe>
 800d8f2:	681e      	ldr	r6, [r3, #0]
 800d8f4:	e003      	b.n	800d8fe <_printf_i+0xc6>
 800d8f6:	0646      	lsls	r6, r0, #25
 800d8f8:	d5fb      	bpl.n	800d8f2 <_printf_i+0xba>
 800d8fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d8fe:	2e00      	cmp	r6, #0
 800d900:	da03      	bge.n	800d90a <_printf_i+0xd2>
 800d902:	232d      	movs	r3, #45	; 0x2d
 800d904:	4276      	negs	r6, r6
 800d906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d90a:	485a      	ldr	r0, [pc, #360]	; (800da74 <_printf_i+0x23c>)
 800d90c:	230a      	movs	r3, #10
 800d90e:	e012      	b.n	800d936 <_printf_i+0xfe>
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	6820      	ldr	r0, [r4, #0]
 800d914:	1d19      	adds	r1, r3, #4
 800d916:	6029      	str	r1, [r5, #0]
 800d918:	0605      	lsls	r5, r0, #24
 800d91a:	d501      	bpl.n	800d920 <_printf_i+0xe8>
 800d91c:	681e      	ldr	r6, [r3, #0]
 800d91e:	e002      	b.n	800d926 <_printf_i+0xee>
 800d920:	0641      	lsls	r1, r0, #25
 800d922:	d5fb      	bpl.n	800d91c <_printf_i+0xe4>
 800d924:	881e      	ldrh	r6, [r3, #0]
 800d926:	4853      	ldr	r0, [pc, #332]	; (800da74 <_printf_i+0x23c>)
 800d928:	2f6f      	cmp	r7, #111	; 0x6f
 800d92a:	bf0c      	ite	eq
 800d92c:	2308      	moveq	r3, #8
 800d92e:	230a      	movne	r3, #10
 800d930:	2100      	movs	r1, #0
 800d932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d936:	6865      	ldr	r5, [r4, #4]
 800d938:	60a5      	str	r5, [r4, #8]
 800d93a:	2d00      	cmp	r5, #0
 800d93c:	bfa2      	ittt	ge
 800d93e:	6821      	ldrge	r1, [r4, #0]
 800d940:	f021 0104 	bicge.w	r1, r1, #4
 800d944:	6021      	strge	r1, [r4, #0]
 800d946:	b90e      	cbnz	r6, 800d94c <_printf_i+0x114>
 800d948:	2d00      	cmp	r5, #0
 800d94a:	d04b      	beq.n	800d9e4 <_printf_i+0x1ac>
 800d94c:	4615      	mov	r5, r2
 800d94e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d952:	fb03 6711 	mls	r7, r3, r1, r6
 800d956:	5dc7      	ldrb	r7, [r0, r7]
 800d958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d95c:	4637      	mov	r7, r6
 800d95e:	42bb      	cmp	r3, r7
 800d960:	460e      	mov	r6, r1
 800d962:	d9f4      	bls.n	800d94e <_printf_i+0x116>
 800d964:	2b08      	cmp	r3, #8
 800d966:	d10b      	bne.n	800d980 <_printf_i+0x148>
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	07de      	lsls	r6, r3, #31
 800d96c:	d508      	bpl.n	800d980 <_printf_i+0x148>
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	6861      	ldr	r1, [r4, #4]
 800d972:	4299      	cmp	r1, r3
 800d974:	bfde      	ittt	le
 800d976:	2330      	movle	r3, #48	; 0x30
 800d978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d97c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d980:	1b52      	subs	r2, r2, r5
 800d982:	6122      	str	r2, [r4, #16]
 800d984:	f8cd a000 	str.w	sl, [sp]
 800d988:	464b      	mov	r3, r9
 800d98a:	aa03      	add	r2, sp, #12
 800d98c:	4621      	mov	r1, r4
 800d98e:	4640      	mov	r0, r8
 800d990:	f7ff fee4 	bl	800d75c <_printf_common>
 800d994:	3001      	adds	r0, #1
 800d996:	d14a      	bne.n	800da2e <_printf_i+0x1f6>
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	b004      	add	sp, #16
 800d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	f043 0320 	orr.w	r3, r3, #32
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	4833      	ldr	r0, [pc, #204]	; (800da78 <_printf_i+0x240>)
 800d9ac:	2778      	movs	r7, #120	; 0x78
 800d9ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	6829      	ldr	r1, [r5, #0]
 800d9b6:	061f      	lsls	r7, r3, #24
 800d9b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d9bc:	d402      	bmi.n	800d9c4 <_printf_i+0x18c>
 800d9be:	065f      	lsls	r7, r3, #25
 800d9c0:	bf48      	it	mi
 800d9c2:	b2b6      	uxthmi	r6, r6
 800d9c4:	07df      	lsls	r7, r3, #31
 800d9c6:	bf48      	it	mi
 800d9c8:	f043 0320 	orrmi.w	r3, r3, #32
 800d9cc:	6029      	str	r1, [r5, #0]
 800d9ce:	bf48      	it	mi
 800d9d0:	6023      	strmi	r3, [r4, #0]
 800d9d2:	b91e      	cbnz	r6, 800d9dc <_printf_i+0x1a4>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	f023 0320 	bic.w	r3, r3, #32
 800d9da:	6023      	str	r3, [r4, #0]
 800d9dc:	2310      	movs	r3, #16
 800d9de:	e7a7      	b.n	800d930 <_printf_i+0xf8>
 800d9e0:	4824      	ldr	r0, [pc, #144]	; (800da74 <_printf_i+0x23c>)
 800d9e2:	e7e4      	b.n	800d9ae <_printf_i+0x176>
 800d9e4:	4615      	mov	r5, r2
 800d9e6:	e7bd      	b.n	800d964 <_printf_i+0x12c>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	6826      	ldr	r6, [r4, #0]
 800d9ec:	6961      	ldr	r1, [r4, #20]
 800d9ee:	1d18      	adds	r0, r3, #4
 800d9f0:	6028      	str	r0, [r5, #0]
 800d9f2:	0635      	lsls	r5, r6, #24
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	d501      	bpl.n	800d9fc <_printf_i+0x1c4>
 800d9f8:	6019      	str	r1, [r3, #0]
 800d9fa:	e002      	b.n	800da02 <_printf_i+0x1ca>
 800d9fc:	0670      	lsls	r0, r6, #25
 800d9fe:	d5fb      	bpl.n	800d9f8 <_printf_i+0x1c0>
 800da00:	8019      	strh	r1, [r3, #0]
 800da02:	2300      	movs	r3, #0
 800da04:	6123      	str	r3, [r4, #16]
 800da06:	4615      	mov	r5, r2
 800da08:	e7bc      	b.n	800d984 <_printf_i+0x14c>
 800da0a:	682b      	ldr	r3, [r5, #0]
 800da0c:	1d1a      	adds	r2, r3, #4
 800da0e:	602a      	str	r2, [r5, #0]
 800da10:	681d      	ldr	r5, [r3, #0]
 800da12:	6862      	ldr	r2, [r4, #4]
 800da14:	2100      	movs	r1, #0
 800da16:	4628      	mov	r0, r5
 800da18:	f7f2 fbea 	bl	80001f0 <memchr>
 800da1c:	b108      	cbz	r0, 800da22 <_printf_i+0x1ea>
 800da1e:	1b40      	subs	r0, r0, r5
 800da20:	6060      	str	r0, [r4, #4]
 800da22:	6863      	ldr	r3, [r4, #4]
 800da24:	6123      	str	r3, [r4, #16]
 800da26:	2300      	movs	r3, #0
 800da28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da2c:	e7aa      	b.n	800d984 <_printf_i+0x14c>
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	462a      	mov	r2, r5
 800da32:	4649      	mov	r1, r9
 800da34:	4640      	mov	r0, r8
 800da36:	47d0      	blx	sl
 800da38:	3001      	adds	r0, #1
 800da3a:	d0ad      	beq.n	800d998 <_printf_i+0x160>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	079b      	lsls	r3, r3, #30
 800da40:	d413      	bmi.n	800da6a <_printf_i+0x232>
 800da42:	68e0      	ldr	r0, [r4, #12]
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	4298      	cmp	r0, r3
 800da48:	bfb8      	it	lt
 800da4a:	4618      	movlt	r0, r3
 800da4c:	e7a6      	b.n	800d99c <_printf_i+0x164>
 800da4e:	2301      	movs	r3, #1
 800da50:	4632      	mov	r2, r6
 800da52:	4649      	mov	r1, r9
 800da54:	4640      	mov	r0, r8
 800da56:	47d0      	blx	sl
 800da58:	3001      	adds	r0, #1
 800da5a:	d09d      	beq.n	800d998 <_printf_i+0x160>
 800da5c:	3501      	adds	r5, #1
 800da5e:	68e3      	ldr	r3, [r4, #12]
 800da60:	9903      	ldr	r1, [sp, #12]
 800da62:	1a5b      	subs	r3, r3, r1
 800da64:	42ab      	cmp	r3, r5
 800da66:	dcf2      	bgt.n	800da4e <_printf_i+0x216>
 800da68:	e7eb      	b.n	800da42 <_printf_i+0x20a>
 800da6a:	2500      	movs	r5, #0
 800da6c:	f104 0619 	add.w	r6, r4, #25
 800da70:	e7f5      	b.n	800da5e <_printf_i+0x226>
 800da72:	bf00      	nop
 800da74:	0802bd1d 	.word	0x0802bd1d
 800da78:	0802bd2e 	.word	0x0802bd2e

0800da7c <memmove>:
 800da7c:	4288      	cmp	r0, r1
 800da7e:	b510      	push	{r4, lr}
 800da80:	eb01 0402 	add.w	r4, r1, r2
 800da84:	d902      	bls.n	800da8c <memmove+0x10>
 800da86:	4284      	cmp	r4, r0
 800da88:	4623      	mov	r3, r4
 800da8a:	d807      	bhi.n	800da9c <memmove+0x20>
 800da8c:	1e43      	subs	r3, r0, #1
 800da8e:	42a1      	cmp	r1, r4
 800da90:	d008      	beq.n	800daa4 <memmove+0x28>
 800da92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da9a:	e7f8      	b.n	800da8e <memmove+0x12>
 800da9c:	4402      	add	r2, r0
 800da9e:	4601      	mov	r1, r0
 800daa0:	428a      	cmp	r2, r1
 800daa2:	d100      	bne.n	800daa6 <memmove+0x2a>
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daae:	e7f7      	b.n	800daa0 <memmove+0x24>

0800dab0 <_sbrk_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d06      	ldr	r5, [pc, #24]	; (800dacc <_sbrk_r+0x1c>)
 800dab4:	2300      	movs	r3, #0
 800dab6:	4604      	mov	r4, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	602b      	str	r3, [r5, #0]
 800dabc:	f7f3 fee8 	bl	8001890 <_sbrk>
 800dac0:	1c43      	adds	r3, r0, #1
 800dac2:	d102      	bne.n	800daca <_sbrk_r+0x1a>
 800dac4:	682b      	ldr	r3, [r5, #0]
 800dac6:	b103      	cbz	r3, 800daca <_sbrk_r+0x1a>
 800dac8:	6023      	str	r3, [r4, #0]
 800daca:	bd38      	pop	{r3, r4, r5, pc}
 800dacc:	2000c750 	.word	0x2000c750

0800dad0 <memcpy>:
 800dad0:	440a      	add	r2, r1
 800dad2:	4291      	cmp	r1, r2
 800dad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dad8:	d100      	bne.n	800dadc <memcpy+0xc>
 800dada:	4770      	bx	lr
 800dadc:	b510      	push	{r4, lr}
 800dade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dae6:	4291      	cmp	r1, r2
 800dae8:	d1f9      	bne.n	800dade <memcpy+0xe>
 800daea:	bd10      	pop	{r4, pc}

0800daec <_realloc_r>:
 800daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf0:	4680      	mov	r8, r0
 800daf2:	4614      	mov	r4, r2
 800daf4:	460e      	mov	r6, r1
 800daf6:	b921      	cbnz	r1, 800db02 <_realloc_r+0x16>
 800daf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafc:	4611      	mov	r1, r2
 800dafe:	f7ff bc49 	b.w	800d394 <_malloc_r>
 800db02:	b92a      	cbnz	r2, 800db10 <_realloc_r+0x24>
 800db04:	f7ff fbda 	bl	800d2bc <_free_r>
 800db08:	4625      	mov	r5, r4
 800db0a:	4628      	mov	r0, r5
 800db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db10:	f000 f81b 	bl	800db4a <_malloc_usable_size_r>
 800db14:	4284      	cmp	r4, r0
 800db16:	4607      	mov	r7, r0
 800db18:	d802      	bhi.n	800db20 <_realloc_r+0x34>
 800db1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db1e:	d812      	bhi.n	800db46 <_realloc_r+0x5a>
 800db20:	4621      	mov	r1, r4
 800db22:	4640      	mov	r0, r8
 800db24:	f7ff fc36 	bl	800d394 <_malloc_r>
 800db28:	4605      	mov	r5, r0
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d0ed      	beq.n	800db0a <_realloc_r+0x1e>
 800db2e:	42bc      	cmp	r4, r7
 800db30:	4622      	mov	r2, r4
 800db32:	4631      	mov	r1, r6
 800db34:	bf28      	it	cs
 800db36:	463a      	movcs	r2, r7
 800db38:	f7ff ffca 	bl	800dad0 <memcpy>
 800db3c:	4631      	mov	r1, r6
 800db3e:	4640      	mov	r0, r8
 800db40:	f7ff fbbc 	bl	800d2bc <_free_r>
 800db44:	e7e1      	b.n	800db0a <_realloc_r+0x1e>
 800db46:	4635      	mov	r5, r6
 800db48:	e7df      	b.n	800db0a <_realloc_r+0x1e>

0800db4a <_malloc_usable_size_r>:
 800db4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db4e:	1f18      	subs	r0, r3, #4
 800db50:	2b00      	cmp	r3, #0
 800db52:	bfbc      	itt	lt
 800db54:	580b      	ldrlt	r3, [r1, r0]
 800db56:	18c0      	addlt	r0, r0, r3
 800db58:	4770      	bx	lr
	...

0800db5c <sqrtf>:
 800db5c:	b508      	push	{r3, lr}
 800db5e:	ed2d 8b02 	vpush	{d8}
 800db62:	eeb0 8a40 	vmov.f32	s16, s0
 800db66:	f000 f817 	bl	800db98 <__ieee754_sqrtf>
 800db6a:	eeb4 8a48 	vcmp.f32	s16, s16
 800db6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db72:	d60c      	bvs.n	800db8e <sqrtf+0x32>
 800db74:	eddf 8a07 	vldr	s17, [pc, #28]	; 800db94 <sqrtf+0x38>
 800db78:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db80:	d505      	bpl.n	800db8e <sqrtf+0x32>
 800db82:	f7ff fb6f 	bl	800d264 <__errno>
 800db86:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db8a:	2321      	movs	r3, #33	; 0x21
 800db8c:	6003      	str	r3, [r0, #0]
 800db8e:	ecbd 8b02 	vpop	{d8}
 800db92:	bd08      	pop	{r3, pc}
 800db94:	00000000 	.word	0x00000000

0800db98 <__ieee754_sqrtf>:
 800db98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800db9c:	4770      	bx	lr
	...

0800dba0 <_init>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	bf00      	nop
 800dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba6:	bc08      	pop	{r3}
 800dba8:	469e      	mov	lr, r3
 800dbaa:	4770      	bx	lr

0800dbac <_fini>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	bf00      	nop
 800dbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb2:	bc08      	pop	{r3}
 800dbb4:	469e      	mov	lr, r3
 800dbb6:	4770      	bx	lr
